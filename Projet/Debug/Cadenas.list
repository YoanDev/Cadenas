
Cadenas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800b368  0800b368  0001b368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b954  0800b954  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b954  0800b954  0001b954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b95c  0800b95c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b95c  0800b95c  0001b95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b960  0800b960  0001b960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800b964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c68  2000008c  0800b9f0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cf4  0800b9f0  00020cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f642  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d7a  00000000  00000000  0003f6fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00043478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  00044b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b880  00000000  00000000  000460d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc46  00000000  00000000  00061950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a46c6  00000000  00000000  0007f596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123c5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063cc  00000000  00000000  00123cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b350 	.word	0x0800b350

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	0800b350 	.word	0x0800b350

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <copy>:
char date[10];
uint8_t alarm = 0;

/* Fonctions secondaires */
void copy(uint16_t *a, uint16_t *b)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
	int i = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
	for(i = 0; i<4; i++)
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	e00c      	b.n	80005b6 <copy+0x2e>
	{
		b[i] = a[i];
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	441a      	add	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	6839      	ldr	r1, [r7, #0]
 80005aa:	440b      	add	r3, r1
 80005ac:	8812      	ldrh	r2, [r2, #0]
 80005ae:	801a      	strh	r2, [r3, #0]
	for(i = 0; i<4; i++)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3301      	adds	r3, #1
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2b03      	cmp	r3, #3
 80005ba:	ddef      	ble.n	800059c <copy+0x14>
	}
}
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <compare>:

int compare(uint16_t *a, uint16_t *b)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	6039      	str	r1, [r7, #0]
	int i = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
	for(i = 0; i<4; i++)
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	e010      	b.n	8000600 <compare+0x36>
	{
		if(b[i] != a[i])
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	881a      	ldrh	r2, [r3, #0]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	440b      	add	r3, r1
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d001      	beq.n	80005fa <compare+0x30>
		return 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	e006      	b.n	8000608 <compare+0x3e>
	for(i = 0; i<4; i++)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3301      	adds	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b03      	cmp	r3, #3
 8000604:	ddeb      	ble.n	80005de <compare+0x14>
	}
	return 1;
 8000606:	2301      	movs	r3, #1
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <initLCD>:

/* Fonctions principales */

// Initialise l'écran LCD
void initLCD(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HD44780_Init(16, 2);
 8000618:	2102      	movs	r1, #2
 800061a:	2010      	movs	r0, #16
 800061c:	f001 f82e 	bl	800167c <HD44780_Init>
	HD44780_Puts(0, 0, "Cadenas"); //Put string to LCD
 8000620:	4a13      	ldr	r2, [pc, #76]	; (8000670 <initLCD+0x5c>)
 8000622:	2100      	movs	r1, #0
 8000624:	2000      	movs	r0, #0
 8000626:	f001 f895 	bl	8001754 <HD44780_Puts>
	HAL_Delay(1000);
 800062a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062e:	f001 fda7 	bl	8002180 <HAL_Delay>
	HD44780_CursorOn(); //Show cursor
 8000632:	f001 f903 	bl	800183c <HD44780_CursorOn>

	HD44780_Clear();
 8000636:	f001 f883 	bl	8001740 <HD44780_Clear>
	HD44780_Puts(0, 0, "0");
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <initLCD+0x60>)
 800063c:	2100      	movs	r1, #0
 800063e:	2000      	movs	r0, #0
 8000640:	f001 f888 	bl	8001754 <HD44780_Puts>
	HD44780_Puts(1, 0, "0");
 8000644:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <initLCD+0x60>)
 8000646:	2100      	movs	r1, #0
 8000648:	2001      	movs	r0, #1
 800064a:	f001 f883 	bl	8001754 <HD44780_Puts>
	HD44780_Puts(2, 0, "0");
 800064e:	4a09      	ldr	r2, [pc, #36]	; (8000674 <initLCD+0x60>)
 8000650:	2100      	movs	r1, #0
 8000652:	2002      	movs	r0, #2
 8000654:	f001 f87e 	bl	8001754 <HD44780_Puts>
	HD44780_Puts(3, 0, "0");
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <initLCD+0x60>)
 800065a:	2100      	movs	r1, #0
 800065c:	2003      	movs	r0, #3
 800065e:	f001 f879 	bl	8001754 <HD44780_Puts>
	HD44780_CursorSet(0,0);
 8000662:	2100      	movs	r1, #0
 8000664:	2000      	movs	r0, #0
 8000666:	f001 f981 	bl	800196c <HD44780_CursorSet>
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	0800b368 	.word	0x0800b368
 8000674:	0800b370 	.word	0x0800b370

08000678 <open>:

// Ouvre le cadenas
void open(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	TIM4->CCR2 = 25;
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <open+0x18>)
 800067e:	2219      	movs	r2, #25
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(2000);
 8000682:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000686:	f001 fd7b 	bl	8002180 <HAL_Delay>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40000800 	.word	0x40000800

08000694 <close>:

// Ferme le cadenas
void close(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	TIM4->CCR2 = 75;
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <close+0x18>)
 800069a:	224b      	movs	r2, #75	; 0x4b
 800069c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(2000);
 800069e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006a2:	f001 fd6d 	bl	8002180 <HAL_Delay>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40000800 	.word	0x40000800

080006b0 <verifCombiUart>:

// Vérifie que les paramètres sont égaux
int verifCombiUart(char *a, uint16_t *b)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
	int i = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
	for(i = 0; i<4; i++)
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	e011      	b.n	80006e8 <verifCombiUart+0x38>
	{
		if(b[i] != a[i]-48) // conversion char vers int avec (-48)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	4619      	mov	r1, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	3b30      	subs	r3, #48	; 0x30
 80006da:	4299      	cmp	r1, r3
 80006dc:	d001      	beq.n	80006e2 <verifCombiUart+0x32>
		{
			return 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	e006      	b.n	80006f0 <verifCombiUart+0x40>
	for(i = 0; i<4; i++)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	ddea      	ble.n	80006c4 <verifCombiUart+0x14>
		}
		//changeUart = a[i]; // Pour debug
	}
	return 1;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <changeCombiUart>:

// Copie a dans b
void changeCombiUart(char *a, uint16_t *b)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
	int i;
	for(i=0; i<4; i++)
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	e00f      	b.n	800072c <changeCombiUart+0x30>
	{
		b[i] = a[i+4]-48;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3304      	adds	r3, #4
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b29a      	uxth	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	6839      	ldr	r1, [r7, #0]
 800071e:	440b      	add	r3, r1
 8000720:	3a30      	subs	r2, #48	; 0x30
 8000722:	b292      	uxth	r2, r2
 8000724:	801a      	strh	r2, [r3, #0]
	for(i=0; i<4; i++)
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	3301      	adds	r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b03      	cmp	r3, #3
 8000730:	ddec      	ble.n	800070c <changeCombiUart+0x10>
	}
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <buttonManager>:

// Gère les boutons poussoirs
void buttonManager()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	 if(adcVal<980 && adcVal>970) // bouton select
 8000744:	4b85      	ldr	r3, [pc, #532]	; (800095c <buttonManager+0x21c>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 800074c:	d208      	bcs.n	8000760 <buttonManager+0x20>
 800074e:	4b83      	ldr	r3, [pc, #524]	; (800095c <buttonManager+0x21c>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	f240 32ca 	movw	r2, #970	; 0x3ca
 8000756:	4293      	cmp	r3, r2
 8000758:	d902      	bls.n	8000760 <buttonManager+0x20>
	 {
		selectManager();
 800075a:	f000 f90f 	bl	800097c <selectManager>
 800075e:	e0fa      	b.n	8000956 <buttonManager+0x216>
	 }
	 else if(adcVal<630 && adcVal>620) // bouton gauche
 8000760:	4b7e      	ldr	r3, [pc, #504]	; (800095c <buttonManager+0x21c>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	f240 2275 	movw	r2, #629	; 0x275
 8000768:	4293      	cmp	r3, r2
 800076a:	d81c      	bhi.n	80007a6 <buttonManager+0x66>
 800076c:	4b7b      	ldr	r3, [pc, #492]	; (800095c <buttonManager+0x21c>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8000774:	d917      	bls.n	80007a6 <buttonManager+0x66>
	 {
		 if((debounce == 0)&&(cursorVal>0))
 8000776:	4b7a      	ldr	r3, [pc, #488]	; (8000960 <buttonManager+0x220>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d10d      	bne.n	800079a <buttonManager+0x5a>
 800077e:	4b79      	ldr	r3, [pc, #484]	; (8000964 <buttonManager+0x224>)
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d009      	beq.n	800079a <buttonManager+0x5a>
		 {
			 cursorVal--;
 8000786:	4b77      	ldr	r3, [pc, #476]	; (8000964 <buttonManager+0x224>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	3b01      	subs	r3, #1
 800078c:	b29a      	uxth	r2, r3
 800078e:	4b75      	ldr	r3, [pc, #468]	; (8000964 <buttonManager+0x224>)
 8000790:	801a      	strh	r2, [r3, #0]
			 HAL_Delay(1000);
 8000792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000796:	f001 fcf3 	bl	8002180 <HAL_Delay>
		 }
		 debounce++;
 800079a:	4b71      	ldr	r3, [pc, #452]	; (8000960 <buttonManager+0x220>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	4a6f      	ldr	r2, [pc, #444]	; (8000960 <buttonManager+0x220>)
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	e0d7      	b.n	8000956 <buttonManager+0x216>
	 }

	 else if(adcVal < 10) // bouton droite
 80007a6:	4b6d      	ldr	r3, [pc, #436]	; (800095c <buttonManager+0x21c>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	2b09      	cmp	r3, #9
 80007ac:	d817      	bhi.n	80007de <buttonManager+0x9e>
	 {
		 if((debounce == 0)&&(cursorVal<3))
 80007ae:	4b6c      	ldr	r3, [pc, #432]	; (8000960 <buttonManager+0x220>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d10d      	bne.n	80007d2 <buttonManager+0x92>
 80007b6:	4b6b      	ldr	r3, [pc, #428]	; (8000964 <buttonManager+0x224>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d809      	bhi.n	80007d2 <buttonManager+0x92>
		 {
			 cursorVal++;
 80007be:	4b69      	ldr	r3, [pc, #420]	; (8000964 <buttonManager+0x224>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	4b67      	ldr	r3, [pc, #412]	; (8000964 <buttonManager+0x224>)
 80007c8:	801a      	strh	r2, [r3, #0]
			 HAL_Delay(1000);
 80007ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ce:	f001 fcd7 	bl	8002180 <HAL_Delay>
		 }
		 debounce++;
 80007d2:	4b63      	ldr	r3, [pc, #396]	; (8000960 <buttonManager+0x220>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	4a61      	ldr	r2, [pc, #388]	; (8000960 <buttonManager+0x220>)
 80007da:	6013      	str	r3, [r2, #0]
				  sprintf(numberBuffDisplay+cursorVal,"%d",numberDisplay[cursorVal]);
			  }
		  }
		  encodeur_ref = encodeur;
	 }
}
 80007dc:	e0bb      	b.n	8000956 <buttonManager+0x216>
	 else if(adcVal<160 && adcVal>150) // bouton haut
 80007de:	4b5f      	ldr	r3, [pc, #380]	; (800095c <buttonManager+0x21c>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	2b9f      	cmp	r3, #159	; 0x9f
 80007e4:	d82e      	bhi.n	8000844 <buttonManager+0x104>
 80007e6:	4b5d      	ldr	r3, [pc, #372]	; (800095c <buttonManager+0x21c>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b96      	cmp	r3, #150	; 0x96
 80007ec:	d92a      	bls.n	8000844 <buttonManager+0x104>
		 if((debounce == 0)&&(numberDisplay[cursorVal]<9))
 80007ee:	4b5c      	ldr	r3, [pc, #368]	; (8000960 <buttonManager+0x220>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d120      	bne.n	8000838 <buttonManager+0xf8>
 80007f6:	4b5b      	ldr	r3, [pc, #364]	; (8000964 <buttonManager+0x224>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b5a      	ldr	r3, [pc, #360]	; (8000968 <buttonManager+0x228>)
 80007fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000802:	2b08      	cmp	r3, #8
 8000804:	d818      	bhi.n	8000838 <buttonManager+0xf8>
			 numberDisplay[cursorVal]++;
 8000806:	4b57      	ldr	r3, [pc, #348]	; (8000964 <buttonManager+0x224>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	4a57      	ldr	r2, [pc, #348]	; (8000968 <buttonManager+0x228>)
 800080c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000810:	3201      	adds	r2, #1
 8000812:	b291      	uxth	r1, r2
 8000814:	4a54      	ldr	r2, [pc, #336]	; (8000968 <buttonManager+0x228>)
 8000816:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 sprintf(numberBuffDisplay+cursorVal,"%d",numberDisplay[cursorVal]);
 800081a:	4b52      	ldr	r3, [pc, #328]	; (8000964 <buttonManager+0x224>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	4b52      	ldr	r3, [pc, #328]	; (800096c <buttonManager+0x22c>)
 8000822:	4413      	add	r3, r2
 8000824:	4a4f      	ldr	r2, [pc, #316]	; (8000964 <buttonManager+0x224>)
 8000826:	8812      	ldrh	r2, [r2, #0]
 8000828:	4611      	mov	r1, r2
 800082a:	4a4f      	ldr	r2, [pc, #316]	; (8000968 <buttonManager+0x228>)
 800082c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000830:	494f      	ldr	r1, [pc, #316]	; (8000970 <buttonManager+0x230>)
 8000832:	4618      	mov	r0, r3
 8000834:	f00a f95e 	bl	800aaf4 <siprintf>
		 debounce++;
 8000838:	4b49      	ldr	r3, [pc, #292]	; (8000960 <buttonManager+0x220>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	4a48      	ldr	r2, [pc, #288]	; (8000960 <buttonManager+0x220>)
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	e088      	b.n	8000956 <buttonManager+0x216>
	 else if(adcVal<400 && adcVal>390) // bouton bas
 8000844:	4b45      	ldr	r3, [pc, #276]	; (800095c <buttonManager+0x21c>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800084c:	d22f      	bcs.n	80008ae <buttonManager+0x16e>
 800084e:	4b43      	ldr	r3, [pc, #268]	; (800095c <buttonManager+0x21c>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8000856:	d92a      	bls.n	80008ae <buttonManager+0x16e>
		 if((debounce == 0)&&(numberDisplay[cursorVal]>0))
 8000858:	4b41      	ldr	r3, [pc, #260]	; (8000960 <buttonManager+0x220>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d120      	bne.n	80008a2 <buttonManager+0x162>
 8000860:	4b40      	ldr	r3, [pc, #256]	; (8000964 <buttonManager+0x224>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	4b40      	ldr	r3, [pc, #256]	; (8000968 <buttonManager+0x228>)
 8000868:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d018      	beq.n	80008a2 <buttonManager+0x162>
			 numberDisplay[cursorVal]--;
 8000870:	4b3c      	ldr	r3, [pc, #240]	; (8000964 <buttonManager+0x224>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	4a3c      	ldr	r2, [pc, #240]	; (8000968 <buttonManager+0x228>)
 8000876:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800087a:	3a01      	subs	r2, #1
 800087c:	b291      	uxth	r1, r2
 800087e:	4a3a      	ldr	r2, [pc, #232]	; (8000968 <buttonManager+0x228>)
 8000880:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 sprintf(numberBuffDisplay+cursorVal,"%d",numberDisplay[cursorVal]);
 8000884:	4b37      	ldr	r3, [pc, #220]	; (8000964 <buttonManager+0x224>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4b38      	ldr	r3, [pc, #224]	; (800096c <buttonManager+0x22c>)
 800088c:	4413      	add	r3, r2
 800088e:	4a35      	ldr	r2, [pc, #212]	; (8000964 <buttonManager+0x224>)
 8000890:	8812      	ldrh	r2, [r2, #0]
 8000892:	4611      	mov	r1, r2
 8000894:	4a34      	ldr	r2, [pc, #208]	; (8000968 <buttonManager+0x228>)
 8000896:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800089a:	4935      	ldr	r1, [pc, #212]	; (8000970 <buttonManager+0x230>)
 800089c:	4618      	mov	r0, r3
 800089e:	f00a f929 	bl	800aaf4 <siprintf>
		 debounce++;
 80008a2:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <buttonManager+0x220>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	3301      	adds	r3, #1
 80008a8:	4a2d      	ldr	r2, [pc, #180]	; (8000960 <buttonManager+0x220>)
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	e053      	b.n	8000956 <buttonManager+0x216>
	 else if(encodeur!=encodeur_ref)
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <buttonManager+0x234>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <buttonManager+0x238>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d04d      	beq.n	8000956 <buttonManager+0x216>
		 if(encodeur<encodeur_ref) // encodeur decrement
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <buttonManager+0x234>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <buttonManager+0x238>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d221      	bcs.n	800090a <buttonManager+0x1ca>
			 if(numberDisplay[cursorVal]>0)
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <buttonManager+0x224>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	4b26      	ldr	r3, [pc, #152]	; (8000968 <buttonManager+0x228>)
 80008ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d03a      	beq.n	800094c <buttonManager+0x20c>
				 numberDisplay[cursorVal]--;
 80008d6:	4b23      	ldr	r3, [pc, #140]	; (8000964 <buttonManager+0x224>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	4a23      	ldr	r2, [pc, #140]	; (8000968 <buttonManager+0x228>)
 80008dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008e0:	3a01      	subs	r2, #1
 80008e2:	b291      	uxth	r1, r2
 80008e4:	4a20      	ldr	r2, [pc, #128]	; (8000968 <buttonManager+0x228>)
 80008e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 		 sprintf(numberBuffDisplay+cursorVal,"%d",numberDisplay[cursorVal]);
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <buttonManager+0x224>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <buttonManager+0x22c>)
 80008f2:	4413      	add	r3, r2
 80008f4:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <buttonManager+0x224>)
 80008f6:	8812      	ldrh	r2, [r2, #0]
 80008f8:	4611      	mov	r1, r2
 80008fa:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <buttonManager+0x228>)
 80008fc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000900:	491b      	ldr	r1, [pc, #108]	; (8000970 <buttonManager+0x230>)
 8000902:	4618      	mov	r0, r3
 8000904:	f00a f8f6 	bl	800aaf4 <siprintf>
 8000908:	e020      	b.n	800094c <buttonManager+0x20c>
			  if(numberDisplay[cursorVal]<9)
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <buttonManager+0x224>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <buttonManager+0x228>)
 8000912:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000916:	2b08      	cmp	r3, #8
 8000918:	d818      	bhi.n	800094c <buttonManager+0x20c>
			  	numberDisplay[cursorVal]++;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <buttonManager+0x224>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <buttonManager+0x228>)
 8000920:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000924:	3201      	adds	r2, #1
 8000926:	b291      	uxth	r1, r2
 8000928:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <buttonManager+0x228>)
 800092a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  sprintf(numberBuffDisplay+cursorVal,"%d",numberDisplay[cursorVal]);
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <buttonManager+0x224>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <buttonManager+0x22c>)
 8000936:	4413      	add	r3, r2
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <buttonManager+0x224>)
 800093a:	8812      	ldrh	r2, [r2, #0]
 800093c:	4611      	mov	r1, r2
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <buttonManager+0x228>)
 8000940:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000944:	490a      	ldr	r1, [pc, #40]	; (8000970 <buttonManager+0x230>)
 8000946:	4618      	mov	r0, r3
 8000948:	f00a f8d4 	bl	800aaf4 <siprintf>
		  encodeur_ref = encodeur;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <buttonManager+0x234>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a09      	ldr	r2, [pc, #36]	; (8000978 <buttonManager+0x238>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	e7ff      	b.n	8000956 <buttonManager+0x216>
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200005d4 	.word	0x200005d4
 8000960:	200000c0 	.word	0x200000c0
 8000964:	200000b0 	.word	0x200000b0
 8000968:	200000a8 	.word	0x200000a8
 800096c:	20000000 	.word	0x20000000
 8000970:	0800b374 	.word	0x0800b374
 8000974:	200000c4 	.word	0x200000c4
 8000978:	200005b0 	.word	0x200005b0

0800097c <selectManager>:

// Gère l'ouverture et la fermeture du cadenas
void selectManager(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	if(isOpen == 0)
 8000980:	4b65      	ldr	r3, [pc, #404]	; (8000b18 <selectManager+0x19c>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d165      	bne.n	8000a54 <selectManager+0xd8>
	{
		if(compare(combinaisonCorrect,numberDisplay))
 8000988:	4964      	ldr	r1, [pc, #400]	; (8000b1c <selectManager+0x1a0>)
 800098a:	4865      	ldr	r0, [pc, #404]	; (8000b20 <selectManager+0x1a4>)
 800098c:	f7ff fe1d 	bl	80005ca <compare>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d036      	beq.n	8000a04 <selectManager+0x88>
		{
			get_time();
 8000996:	f000 f989 	bl	8000cac <get_time>
			write_log(date);
 800099a:	4862      	ldr	r0, [pc, #392]	; (8000b24 <selectManager+0x1a8>)
 800099c:	f000 f8e6 	bl	8000b6c <write_log>
			write_log(" ");
 80009a0:	4861      	ldr	r0, [pc, #388]	; (8000b28 <selectManager+0x1ac>)
 80009a2:	f000 f8e3 	bl	8000b6c <write_log>
			write_log(time);
 80009a6:	4861      	ldr	r0, [pc, #388]	; (8000b2c <selectManager+0x1b0>)
 80009a8:	f000 f8e0 	bl	8000b6c <write_log>
			write_log(" ");
 80009ac:	485e      	ldr	r0, [pc, #376]	; (8000b28 <selectManager+0x1ac>)
 80009ae:	f000 f8dd 	bl	8000b6c <write_log>
			write_log("Bonne combinaison: ");
 80009b2:	485f      	ldr	r0, [pc, #380]	; (8000b30 <selectManager+0x1b4>)
 80009b4:	f000 f8da 	bl	8000b6c <write_log>
			write_log(numberBuffDisplay);
 80009b8:	485e      	ldr	r0, [pc, #376]	; (8000b34 <selectManager+0x1b8>)
 80009ba:	f000 f8d7 	bl	8000b6c <write_log>
			write_log("\n");
 80009be:	485e      	ldr	r0, [pc, #376]	; (8000b38 <selectManager+0x1bc>)
 80009c0:	f000 f8d4 	bl	8000b6c <write_log>

			write_log(date);
 80009c4:	4857      	ldr	r0, [pc, #348]	; (8000b24 <selectManager+0x1a8>)
 80009c6:	f000 f8d1 	bl	8000b6c <write_log>
			write_log(" ");
 80009ca:	4857      	ldr	r0, [pc, #348]	; (8000b28 <selectManager+0x1ac>)
 80009cc:	f000 f8ce 	bl	8000b6c <write_log>
			write_log(time);
 80009d0:	4856      	ldr	r0, [pc, #344]	; (8000b2c <selectManager+0x1b0>)
 80009d2:	f000 f8cb 	bl	8000b6c <write_log>
			write_log(" ");
 80009d6:	4854      	ldr	r0, [pc, #336]	; (8000b28 <selectManager+0x1ac>)
 80009d8:	f000 f8c8 	bl	8000b6c <write_log>
			write_log("Ouverture du cadenas\n");
 80009dc:	4857      	ldr	r0, [pc, #348]	; (8000b3c <selectManager+0x1c0>)
 80009de:	f000 f8c5 	bl	8000b6c <write_log>
			strcpy(state,"");
 80009e2:	4b57      	ldr	r3, [pc, #348]	; (8000b40 <selectManager+0x1c4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
			strcpy(state,"ouvert");
 80009e8:	4b55      	ldr	r3, [pc, #340]	; (8000b40 <selectManager+0x1c4>)
 80009ea:	4a56      	ldr	r2, [pc, #344]	; (8000b44 <selectManager+0x1c8>)
 80009ec:	6810      	ldr	r0, [r2, #0]
 80009ee:	6018      	str	r0, [r3, #0]
 80009f0:	8891      	ldrh	r1, [r2, #4]
 80009f2:	7992      	ldrb	r2, [r2, #6]
 80009f4:	8099      	strh	r1, [r3, #4]
 80009f6:	719a      	strb	r2, [r3, #6]
			open();
 80009f8:	f7ff fe3e 	bl	8000678 <open>
			isOpen = 1;
 80009fc:	4b46      	ldr	r3, [pc, #280]	; (8000b18 <selectManager+0x19c>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	801a      	strh	r2, [r3, #0]
		close();
		strcpy(state,"");
		strcpy(state,"ferme");
		isOpen = 0;
	}
}
 8000a02:	e087      	b.n	8000b14 <selectManager+0x198>
			get_time();
 8000a04:	f000 f952 	bl	8000cac <get_time>
			write_log(date);
 8000a08:	4846      	ldr	r0, [pc, #280]	; (8000b24 <selectManager+0x1a8>)
 8000a0a:	f000 f8af 	bl	8000b6c <write_log>
			write_log(" ");
 8000a0e:	4846      	ldr	r0, [pc, #280]	; (8000b28 <selectManager+0x1ac>)
 8000a10:	f000 f8ac 	bl	8000b6c <write_log>
			write_log(time);
 8000a14:	4845      	ldr	r0, [pc, #276]	; (8000b2c <selectManager+0x1b0>)
 8000a16:	f000 f8a9 	bl	8000b6c <write_log>
			write_log(" ");
 8000a1a:	4843      	ldr	r0, [pc, #268]	; (8000b28 <selectManager+0x1ac>)
 8000a1c:	f000 f8a6 	bl	8000b6c <write_log>
			write_log("Mauvaise combinaison: ");
 8000a20:	4849      	ldr	r0, [pc, #292]	; (8000b48 <selectManager+0x1cc>)
 8000a22:	f000 f8a3 	bl	8000b6c <write_log>
			write_log(numberBuffDisplay);
 8000a26:	4843      	ldr	r0, [pc, #268]	; (8000b34 <selectManager+0x1b8>)
 8000a28:	f000 f8a0 	bl	8000b6c <write_log>
			write_log("\n");
 8000a2c:	4842      	ldr	r0, [pc, #264]	; (8000b38 <selectManager+0x1bc>)
 8000a2e:	f000 f89d 	bl	8000b6c <write_log>
			strcpy(state,"");
 8000a32:	4b43      	ldr	r3, [pc, #268]	; (8000b40 <selectManager+0x1c4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
			strcpy(state,"ferme");
 8000a38:	4b41      	ldr	r3, [pc, #260]	; (8000b40 <selectManager+0x1c4>)
 8000a3a:	4a44      	ldr	r2, [pc, #272]	; (8000b4c <selectManager+0x1d0>)
 8000a3c:	6810      	ldr	r0, [r2, #0]
 8000a3e:	6018      	str	r0, [r3, #0]
 8000a40:	8892      	ldrh	r2, [r2, #4]
 8000a42:	809a      	strh	r2, [r3, #4]
			HD44780_Puts(0, 1, "");
 8000a44:	4a42      	ldr	r2, [pc, #264]	; (8000b50 <selectManager+0x1d4>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 fe83 	bl	8001754 <HD44780_Puts>
			close();
 8000a4e:	f7ff fe21 	bl	8000694 <close>
}
 8000a52:	e05f      	b.n	8000b14 <selectManager+0x198>
		get_time();
 8000a54:	f000 f92a 	bl	8000cac <get_time>
		write_log(date);
 8000a58:	4832      	ldr	r0, [pc, #200]	; (8000b24 <selectManager+0x1a8>)
 8000a5a:	f000 f887 	bl	8000b6c <write_log>
		write_log(" ");
 8000a5e:	4832      	ldr	r0, [pc, #200]	; (8000b28 <selectManager+0x1ac>)
 8000a60:	f000 f884 	bl	8000b6c <write_log>
		write_log(time);
 8000a64:	4831      	ldr	r0, [pc, #196]	; (8000b2c <selectManager+0x1b0>)
 8000a66:	f000 f881 	bl	8000b6c <write_log>
		write_log(" ");
 8000a6a:	482f      	ldr	r0, [pc, #188]	; (8000b28 <selectManager+0x1ac>)
 8000a6c:	f000 f87e 	bl	8000b6c <write_log>
		write_log("Nouvelle combinaison par LCD: ");
 8000a70:	4838      	ldr	r0, [pc, #224]	; (8000b54 <selectManager+0x1d8>)
 8000a72:	f000 f87b 	bl	8000b6c <write_log>
		write_log(numberBuffDisplay);
 8000a76:	482f      	ldr	r0, [pc, #188]	; (8000b34 <selectManager+0x1b8>)
 8000a78:	f000 f878 	bl	8000b6c <write_log>
		write_log("\n");
 8000a7c:	482e      	ldr	r0, [pc, #184]	; (8000b38 <selectManager+0x1bc>)
 8000a7e:	f000 f875 	bl	8000b6c <write_log>
		write_log(date);
 8000a82:	4828      	ldr	r0, [pc, #160]	; (8000b24 <selectManager+0x1a8>)
 8000a84:	f000 f872 	bl	8000b6c <write_log>
		write_log(" ");
 8000a88:	4827      	ldr	r0, [pc, #156]	; (8000b28 <selectManager+0x1ac>)
 8000a8a:	f000 f86f 	bl	8000b6c <write_log>
		write_log(time);
 8000a8e:	4827      	ldr	r0, [pc, #156]	; (8000b2c <selectManager+0x1b0>)
 8000a90:	f000 f86c 	bl	8000b6c <write_log>
		write_log(" ");
 8000a94:	4824      	ldr	r0, [pc, #144]	; (8000b28 <selectManager+0x1ac>)
 8000a96:	f000 f869 	bl	8000b6c <write_log>
		write_log("Fermeture du cadenas\n");
 8000a9a:	482f      	ldr	r0, [pc, #188]	; (8000b58 <selectManager+0x1dc>)
 8000a9c:	f000 f866 	bl	8000b6c <write_log>
		copy(numberDisplay,combinaisonCorrect);
 8000aa0:	491f      	ldr	r1, [pc, #124]	; (8000b20 <selectManager+0x1a4>)
 8000aa2:	481e      	ldr	r0, [pc, #120]	; (8000b1c <selectManager+0x1a0>)
 8000aa4:	f7ff fd70 	bl	8000588 <copy>
		numberDisplay[0] = 0;
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <selectManager+0x1a0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	801a      	strh	r2, [r3, #0]
		numberDisplay[1] = 0;
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <selectManager+0x1a0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	805a      	strh	r2, [r3, #2]
		numberDisplay[2] = 0;
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <selectManager+0x1a0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	809a      	strh	r2, [r3, #4]
		numberDisplay[3] = 0;
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <selectManager+0x1a0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	80da      	strh	r2, [r3, #6]
		sprintf(numberBuffDisplay+0,"%d",numberDisplay[0]);
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <selectManager+0x1a0>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4925      	ldr	r1, [pc, #148]	; (8000b5c <selectManager+0x1e0>)
 8000ac8:	481a      	ldr	r0, [pc, #104]	; (8000b34 <selectManager+0x1b8>)
 8000aca:	f00a f813 	bl	800aaf4 <siprintf>
		sprintf(numberBuffDisplay+1,"%d",numberDisplay[1]);
 8000ace:	4824      	ldr	r0, [pc, #144]	; (8000b60 <selectManager+0x1e4>)
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <selectManager+0x1a0>)
 8000ad2:	885b      	ldrh	r3, [r3, #2]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4921      	ldr	r1, [pc, #132]	; (8000b5c <selectManager+0x1e0>)
 8000ad8:	f00a f80c 	bl	800aaf4 <siprintf>
		sprintf(numberBuffDisplay+2,"%d",numberDisplay[2]);
 8000adc:	4821      	ldr	r0, [pc, #132]	; (8000b64 <selectManager+0x1e8>)
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <selectManager+0x1a0>)
 8000ae0:	889b      	ldrh	r3, [r3, #4]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	491d      	ldr	r1, [pc, #116]	; (8000b5c <selectManager+0x1e0>)
 8000ae6:	f00a f805 	bl	800aaf4 <siprintf>
		sprintf(numberBuffDisplay+3,"%d",numberDisplay[3]);
 8000aea:	481f      	ldr	r0, [pc, #124]	; (8000b68 <selectManager+0x1ec>)
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <selectManager+0x1a0>)
 8000aee:	88db      	ldrh	r3, [r3, #6]
 8000af0:	461a      	mov	r2, r3
 8000af2:	491a      	ldr	r1, [pc, #104]	; (8000b5c <selectManager+0x1e0>)
 8000af4:	f009 fffe 	bl	800aaf4 <siprintf>
		close();
 8000af8:	f7ff fdcc 	bl	8000694 <close>
		strcpy(state,"");
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <selectManager+0x1c4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
		strcpy(state,"ferme");
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <selectManager+0x1c4>)
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <selectManager+0x1d0>)
 8000b06:	6810      	ldr	r0, [r2, #0]
 8000b08:	6018      	str	r0, [r3, #0]
 8000b0a:	8892      	ldrh	r2, [r2, #4]
 8000b0c:	809a      	strh	r2, [r3, #4]
		isOpen = 0;
 8000b0e:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <selectManager+0x19c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	801a      	strh	r2, [r3, #0]
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000bc 	.word	0x200000bc
 8000b1c:	200000a8 	.word	0x200000a8
 8000b20:	200000b4 	.word	0x200000b4
 8000b24:	200005e4 	.word	0x200005e4
 8000b28:	0800b378 	.word	0x0800b378
 8000b2c:	200005d8 	.word	0x200005d8
 8000b30:	0800b37c 	.word	0x0800b37c
 8000b34:	20000000 	.word	0x20000000
 8000b38:	0800b390 	.word	0x0800b390
 8000b3c:	0800b394 	.word	0x0800b394
 8000b40:	200005a4 	.word	0x200005a4
 8000b44:	0800b3ac 	.word	0x0800b3ac
 8000b48:	0800b3b4 	.word	0x0800b3b4
 8000b4c:	0800b3cc 	.word	0x0800b3cc
 8000b50:	0800b3d4 	.word	0x0800b3d4
 8000b54:	0800b3d8 	.word	0x0800b3d8
 8000b58:	0800b3f8 	.word	0x0800b3f8
 8000b5c:	0800b374 	.word	0x0800b374
 8000b60:	20000001 	.word	0x20000001
 8000b64:	20000002 	.word	0x20000002
 8000b68:	20000003 	.word	0x20000003

08000b6c <write_log>:

// Ecrit des logs dans le fichier sur la carte SD
void write_log(char *log)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b090      	sub	sp, #64	; 0x40
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	UINT testByte;
	FRESULT fres;
	char fileName[12] = {0};
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
	char fileTitle[36] = {0};
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	2220      	movs	r2, #32
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f009 ffa8 	bl	800aae4 <memset>

  sprintf(fileName,"STMlecon.txt");
 8000b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b98:	4928      	ldr	r1, [pc, #160]	; (8000c3c <write_log+0xd0>)
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f009 ffaa 	bl	800aaf4 <siprintf>
  sprintf(fileTitle,log);
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f009 ffa4 	bl	800aaf4 <siprintf>

  fres = f_mount(&myFATFS,"",1);
 8000bac:	2201      	movs	r2, #1
 8000bae:	4924      	ldr	r1, [pc, #144]	; (8000c40 <write_log+0xd4>)
 8000bb0:	4824      	ldr	r0, [pc, #144]	; (8000c44 <write_log+0xd8>)
 8000bb2:	f009 f923 	bl	8009dfc <f_mount>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if(fres == FR_OK)
 8000bbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d136      	bne.n	8000c32 <write_log+0xc6>
  {
  	HAL_Delay(10);
 8000bc4:	200a      	movs	r0, #10
 8000bc6:	f001 fadb 	bl	8002180 <HAL_Delay>
  	f_mkdir(FILEPATH);
 8000bca:	481f      	ldr	r0, [pc, #124]	; (8000c48 <write_log+0xdc>)
 8000bcc:	f009 fd37 	bl	800a63e <f_mkdir>
  	HAL_Delay(10);
 8000bd0:	200a      	movs	r0, #10
 8000bd2:	f001 fad5 	bl	8002180 <HAL_Delay>
  	fres = f_open(&myFile, fileName, FA_WRITE | FA_OPEN_APPEND);
 8000bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bda:	2232      	movs	r2, #50	; 0x32
 8000bdc:	4619      	mov	r1, r3
 8000bde:	481b      	ldr	r0, [pc, #108]	; (8000c4c <write_log+0xe0>)
 8000be0:	f009 f952 	bl	8009e88 <f_open>
 8000be4:	4603      	mov	r3, r0
 8000be6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  	if(fres == FR_OK)
 8000bea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d11f      	bne.n	8000c32 <write_log+0xc6>
  	{
  		HAL_Delay(10);
 8000bf2:	200a      	movs	r0, #10
 8000bf4:	f001 fac4 	bl	8002180 <HAL_Delay>
  		fres = f_write(&myFile, fileTitle, strlen(fileTitle), &testByte);
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff faef 	bl	80001e0 <strlen>
 8000c02:	4602      	mov	r2, r0
 8000c04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c08:	f107 0108 	add.w	r1, r7, #8
 8000c0c:	480f      	ldr	r0, [pc, #60]	; (8000c4c <write_log+0xe0>)
 8000c0e:	f009 faf9 	bl	800a204 <f_write>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  		if(fres == FR_OK)
 8000c18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d108      	bne.n	8000c32 <write_log+0xc6>
  		{
  			HAL_Delay(10);
 8000c20:	200a      	movs	r0, #10
 8000c22:	f001 faad 	bl	8002180 <HAL_Delay>
  			fres = f_close(&myFile);
 8000c26:	4809      	ldr	r0, [pc, #36]	; (8000c4c <write_log+0xe0>)
 8000c28:	f009 fcdf 	bl	800a5ea <f_close>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  		}
  	}
  }
}
 8000c32:	bf00      	nop
 8000c34:	3740      	adds	r7, #64	; 0x40
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	0800b410 	.word	0x0800b410
 8000c40:	0800b3d4 	.word	0x0800b3d4
 8000c44:	20000370 	.word	0x20000370
 8000c48:	0800b420 	.word	0x0800b420
 8000c4c:	20000138 	.word	0x20000138

08000c50 <set_time>:

// Initialise une date et une heure sur la RTC
void set_time (void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
    /**Initialize RTC and set the Time and Date
    */
  sTime.Hours = 0x10;
 8000c56:	2310      	movs	r3, #16
 8000c58:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 8000c5a:	2320      	movs	r3, #32
 8000c5c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8000c5e:	2330      	movs	r3, #48	; 0x30
 8000c60:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <set_time+0x58>)
 8000c72:	f003 fb4e 	bl	8004312 <HAL_RTC_SetTime>
  }
  /* USER CODE BEGIN RTC_Init 3 */

  /* USER CODE END RTC_Init 3 */

  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000c76:	2302      	movs	r3, #2
 8000c78:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8000c7e:	2312      	movs	r3, #18
 8000c80:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c86:	463b      	mov	r3, r7
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <set_time+0x58>)
 8000c8e:	f003 fc5b 	bl	8004548 <HAL_RTC_SetDate>
  {
    //_Error_Handler(__FILE__, __LINE__);
  }
  /* USER CODE BEGIN RTC_Init 4 */

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 8000c92:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000c96:	2101      	movs	r1, #1
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <set_time+0x58>)
 8000c9a:	f003 fef3 	bl	8004a84 <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 4 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200005b4 	.word	0x200005b4

08000cac <get_time>:
  /* USER CODE END RTC_Init 5 */
}

// Récupère la date et l'heure sur la RTC
void get_time(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af02      	add	r7, sp, #8
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4812      	ldr	r0, [pc, #72]	; (8000d04 <get_time+0x58>)
 8000cba:	f003 fbe7 	bl	800448c <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480f      	ldr	r0, [pc, #60]	; (8000d04 <get_time+0x58>)
 8000cc8:	f003 fce5 	bl	8004696 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000ccc:	783b      	ldrb	r3, [r7, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	787b      	ldrb	r3, [r7, #1]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	78bb      	ldrb	r3, [r7, #2]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	490b      	ldr	r1, [pc, #44]	; (8000d08 <get_time+0x5c>)
 8000cdc:	480b      	ldr	r0, [pc, #44]	; (8000d0c <get_time+0x60>)
 8000cde:	f009 ff09 	bl	800aaf4 <siprintf>

  /* Display date Format: mm-dd-yy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 8000ce2:	7dbb      	ldrb	r3, [r7, #22]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	7d7b      	ldrb	r3, [r7, #21]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	7dfb      	ldrb	r3, [r7, #23]
 8000cec:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4906      	ldr	r1, [pc, #24]	; (8000d10 <get_time+0x64>)
 8000cf6:	4807      	ldr	r0, [pc, #28]	; (8000d14 <get_time+0x68>)
 8000cf8:	f009 fefc 	bl	800aaf4 <siprintf>
}
 8000cfc:	bf00      	nop
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200005b4 	.word	0x200005b4
 8000d08:	0800b424 	.word	0x0800b424
 8000d0c:	200005d8 	.word	0x200005d8
 8000d10:	0800b434 	.word	0x0800b434
 8000d14:	200005e4 	.word	0x200005e4

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1c:	f001 f9be 	bl	800209c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d20:	f000 f8c0 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d24:	f000 fb9a 	bl	800145c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d28:	f000 fb62 	bl	80013f0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d2c:	f000 f924 	bl	8000f78 <MX_ADC1_Init>

  MX_USART2_UART_Init();
 8000d30:	f000 fb34 	bl	800139c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d34:	f000 fa36 	bl	80011a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d38:	f000 fa82 	bl	8001240 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d3c:	f000 fad4 	bl	80012e8 <MX_TIM4_Init>
  MX_SPI2_Init();
 8000d40:	f000 f9fa 	bl	8001138 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000d44:	f006 f9f4 	bl	8007130 <MX_FATFS_Init>
  MX_RTC_Init();
 8000d48:	f000 f96a 	bl	8001020 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* Démarre les périphériques */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000d4c:	213c      	movs	r1, #60	; 0x3c
 8000d4e:	483d      	ldr	r0, [pc, #244]	; (8000e44 <main+0x12c>)
 8000d50:	f004 fc18 	bl	8005584 <HAL_TIM_Encoder_Start>
  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	493c      	ldr	r1, [pc, #240]	; (8000e48 <main+0x130>)
 8000d58:	483c      	ldr	r0, [pc, #240]	; (8000e4c <main+0x134>)
 8000d5a:	f001 fa79 	bl	8002250 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d5e:	483c      	ldr	r0, [pc, #240]	; (8000e50 <main+0x138>)
 8000d60:	f004 fa08 	bl	8005174 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000d64:	2104      	movs	r1, #4
 8000d66:	483b      	ldr	r0, [pc, #236]	; (8000e54 <main+0x13c>)
 8000d68:	f004 fab6 	bl	80052d8 <HAL_TIM_PWM_Start>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rxbuff, RXBUFF_SIZE);
 8000d6c:	2208      	movs	r2, #8
 8000d6e:	493a      	ldr	r1, [pc, #232]	; (8000e58 <main+0x140>)
 8000d70:	483a      	ldr	r0, [pc, #232]	; (8000e5c <main+0x144>)
 8000d72:	f005 f9a6 	bl	80060c2 <HAL_UARTEx_ReceiveToIdle_DMA>

  /* Initialise l'affichage du LCD */
  initLCD();
 8000d76:	f7ff fc4d 	bl	8000614 <initLCD>
  strcpy(state,"ferme");
 8000d7a:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <main+0x148>)
 8000d7c:	4a39      	ldr	r2, [pc, #228]	; (8000e64 <main+0x14c>)
 8000d7e:	6810      	ldr	r0, [r2, #0]
 8000d80:	6018      	str	r0, [r3, #0]
 8000d82:	8892      	ldrh	r2, [r2, #4]
 8000d84:	809a      	strh	r2, [r3, #4]

  /* Initialise une date et une heure dans la rtc */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8000d86:	2101      	movs	r1, #1
 8000d88:	4837      	ldr	r0, [pc, #220]	; (8000e68 <main+0x150>)
 8000d8a:	f003 fe95 	bl	8004ab8 <HAL_RTCEx_BKUPRead>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d001      	beq.n	8000d9c <main+0x84>
  {
   	set_time();
 8000d98:	f7ff ff5a 	bl	8000c50 <set_time>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	// Nouvelle combinaison reçu par uart
  	if(changeUart==1)
 8000d9c:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <main+0x154>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d11e      	bne.n	8000de2 <main+0xca>
  	{
  		changeCombiUart(Rxbuff, combinaisonCorrect);
 8000da4:	4932      	ldr	r1, [pc, #200]	; (8000e70 <main+0x158>)
 8000da6:	482c      	ldr	r0, [pc, #176]	; (8000e58 <main+0x140>)
 8000da8:	f7ff fca8 	bl	80006fc <changeCombiUart>
  		get_time();
 8000dac:	f7ff ff7e 	bl	8000cac <get_time>
  		write_log(date);
 8000db0:	4830      	ldr	r0, [pc, #192]	; (8000e74 <main+0x15c>)
 8000db2:	f7ff fedb 	bl	8000b6c <write_log>
  		write_log(" ");
 8000db6:	4830      	ldr	r0, [pc, #192]	; (8000e78 <main+0x160>)
 8000db8:	f7ff fed8 	bl	8000b6c <write_log>
  		write_log(time);
 8000dbc:	482f      	ldr	r0, [pc, #188]	; (8000e7c <main+0x164>)
 8000dbe:	f7ff fed5 	bl	8000b6c <write_log>
  		write_log(" ");
 8000dc2:	482d      	ldr	r0, [pc, #180]	; (8000e78 <main+0x160>)
 8000dc4:	f7ff fed2 	bl	8000b6c <write_log>
  		write_log("Nouvelle combinaison part uart: ");
 8000dc8:	482d      	ldr	r0, [pc, #180]	; (8000e80 <main+0x168>)
 8000dca:	f7ff fecf 	bl	8000b6c <write_log>
  		write_log(Rxbuff+4);
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <main+0x16c>)
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fecb 	bl	8000b6c <write_log>
  		write_log("\n");
 8000dd6:	482c      	ldr	r0, [pc, #176]	; (8000e88 <main+0x170>)
 8000dd8:	f7ff fec8 	bl	8000b6c <write_log>
  		changeUart = 0;
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <main+0x154>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	801a      	strh	r2, [r3, #0]
  	}

  	// Nouvelle valeur de l'encodeur
	  encodeur = TIM3->CNT;
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <main+0x174>)
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	4a2a      	ldr	r2, [pc, #168]	; (8000e90 <main+0x178>)
 8000de8:	6013      	str	r3, [r2, #0]

	  // Gestion des boutons poussoirs
	  if(adc_val_verif == adcVal)
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <main+0x17c>)
 8000dec:	881a      	ldrh	r2, [r3, #0]
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <main+0x130>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d104      	bne.n	8000e00 <main+0xe8>
	  {
	  	buttonManager();
 8000df6:	f7ff fca3 	bl	8000740 <buttonManager>
	  	debounce = 0;
 8000dfa:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <main+0x180>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
	  }

	  // Affichage des valeurs des digits
	  HD44780_Puts(cursorVal, 0, &numberBuffDisplay[cursorVal]);
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <main+0x184>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4a25      	ldr	r2, [pc, #148]	; (8000e9c <main+0x184>)
 8000e08:	8812      	ldrh	r2, [r2, #0]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4a24      	ldr	r2, [pc, #144]	; (8000ea0 <main+0x188>)
 8000e0e:	440a      	add	r2, r1
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fc9e 	bl	8001754 <HD44780_Puts>
	  HD44780_Puts(0, 1, state);
 8000e18:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <main+0x148>)
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f000 fc99 	bl	8001754 <HD44780_Puts>

	  // Mise en évidence du digit selectionné
	  HD44780_CursorSet(cursorVal,0);
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <main+0x184>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 fd9e 	bl	800196c <HD44780_CursorSet>

	  // Correction du problème d'alimentation en 5V
	  adc_val_verif = adcVal;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <main+0x130>)
 8000e32:	881a      	ldrh	r2, [r3, #0]
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <main+0x17c>)
 8000e36:	801a      	strh	r2, [r3, #0]

	  // Attente de 500ms
	  HAL_Delay(500);
 8000e38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e3c:	f001 f9a0 	bl	8002180 <HAL_Delay>
  	if(changeUart==1)
 8000e40:	e7ac      	b.n	8000d9c <main+0x84>
 8000e42:	bf00      	nop
 8000e44:	200006f0 	.word	0x200006f0
 8000e48:	200005d4 	.word	0x200005d4
 8000e4c:	20000738 	.word	0x20000738
 8000e50:	200007e0 	.word	0x200007e0
 8000e54:	200006a8 	.word	0x200006a8
 8000e58:	20000368 	.word	0x20000368
 8000e5c:	20000828 	.word	0x20000828
 8000e60:	200005a4 	.word	0x200005a4
 8000e64:	0800b444 	.word	0x0800b444
 8000e68:	200005b4 	.word	0x200005b4
 8000e6c:	200000c8 	.word	0x200000c8
 8000e70:	200000b4 	.word	0x200000b4
 8000e74:	200005e4 	.word	0x200005e4
 8000e78:	0800b44c 	.word	0x0800b44c
 8000e7c:	200005d8 	.word	0x200005d8
 8000e80:	0800b450 	.word	0x0800b450
 8000e84:	2000036c 	.word	0x2000036c
 8000e88:	0800b474 	.word	0x0800b474
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	200000c4 	.word	0x200000c4
 8000e94:	200005ae 	.word	0x200005ae
 8000e98:	200000c0 	.word	0x200000c0
 8000e9c:	200000b0 	.word	0x200000b0
 8000ea0:	20000000 	.word	0x20000000

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	; 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0320 	add.w	r3, r7, #32
 8000eae:	2230      	movs	r2, #48	; 0x30
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f009 fe16 	bl	800aae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <SystemClock_Config+0xcc>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	4a27      	ldr	r2, [pc, #156]	; (8000f70 <SystemClock_Config+0xcc>)
 8000ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <SystemClock_Config+0xcc>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <SystemClock_Config+0xd0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a21      	ldr	r2, [pc, #132]	; (8000f74 <SystemClock_Config+0xd0>)
 8000eee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <SystemClock_Config+0xd0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000f00:	230a      	movs	r3, #10
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f04:	2301      	movs	r3, #1
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f10:	2302      	movs	r3, #2
 8000f12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000f1c:	2354      	movs	r3, #84	; 0x54
 8000f1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f24:	2304      	movs	r3, #4
 8000f26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	f107 0320 	add.w	r3, r7, #32
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 fc27 	bl	8003780 <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f38:	f000 fb9a 	bl	8001670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f40:	2302      	movs	r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	2102      	movs	r1, #2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f002 fe89 	bl	8003c70 <HAL_RCC_ClockConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f64:	f000 fb84 	bl	8001670 <Error_Handler>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3750      	adds	r7, #80	; 0x50
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40007000 	.word	0x40007000

08000f78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <MX_ADC1_Init+0xa0>)
 8000f8c:	4a23      	ldr	r2, [pc, #140]	; (800101c <MX_ADC1_Init+0xa4>)
 8000f8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <MX_ADC1_Init+0xa0>)
 8000f92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <MX_ADC1_Init+0xa0>)
 8000f9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <MX_ADC1_Init+0xa0>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <MX_ADC1_Init+0xa0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_ADC1_Init+0xa0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fb4:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_ADC1_Init+0xa0>)
 8000fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MX_ADC1_Init+0xa0>)
 8000fbe:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_ADC1_Init+0xa0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_ADC1_Init+0xa0>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_ADC1_Init+0xa0>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_ADC1_Init+0xa0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fde:	480e      	ldr	r0, [pc, #56]	; (8001018 <MX_ADC1_Init+0xa0>)
 8000fe0:	f001 f8f2 	bl	80021c8 <HAL_ADC_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8000fea:	f000 fb41 	bl	8001670 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <MX_ADC1_Init+0xa0>)
 8001000:	f001 fa2a 	bl	8002458 <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800100a:	f000 fb31 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000738 	.word	0x20000738
 800101c:	40012000 	.word	0x40012000

08001020 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b090      	sub	sp, #64	; 0x40
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2228      	movs	r2, #40	; 0x28
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f009 fd4f 	bl	800aae4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001046:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <MX_RTC_Init+0x110>)
 8001048:	4a3a      	ldr	r2, [pc, #232]	; (8001134 <MX_RTC_Init+0x114>)
 800104a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800104c:	4b38      	ldr	r3, [pc, #224]	; (8001130 <MX_RTC_Init+0x110>)
 800104e:	2200      	movs	r2, #0
 8001050:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001052:	4b37      	ldr	r3, [pc, #220]	; (8001130 <MX_RTC_Init+0x110>)
 8001054:	227f      	movs	r2, #127	; 0x7f
 8001056:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001058:	4b35      	ldr	r3, [pc, #212]	; (8001130 <MX_RTC_Init+0x110>)
 800105a:	22ff      	movs	r2, #255	; 0xff
 800105c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800105e:	4b34      	ldr	r3, [pc, #208]	; (8001130 <MX_RTC_Init+0x110>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001064:	4b32      	ldr	r3, [pc, #200]	; (8001130 <MX_RTC_Init+0x110>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800106a:	4b31      	ldr	r3, [pc, #196]	; (8001130 <MX_RTC_Init+0x110>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001070:	482f      	ldr	r0, [pc, #188]	; (8001130 <MX_RTC_Init+0x110>)
 8001072:	f003 f8bd 	bl	80041f0 <HAL_RTC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800107c:	f000 faf8 	bl	8001670 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001080:	2300      	movs	r3, #0
 8001082:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001086:	2300      	movs	r3, #0
 8001088:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800108c:	2300      	movs	r3, #0
 800108e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001092:	2300      	movs	r3, #0
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800109a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109e:	2201      	movs	r2, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	4823      	ldr	r0, [pc, #140]	; (8001130 <MX_RTC_Init+0x110>)
 80010a4:	f003 f935 	bl	8004312 <HAL_RTC_SetTime>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80010ae:	f000 fadf 	bl	8001670 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010b2:	2301      	movs	r3, #1
 80010b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80010b8:	2301      	movs	r3, #1
 80010ba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80010be:	2301      	movs	r3, #1
 80010c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ce:	2201      	movs	r2, #1
 80010d0:	4619      	mov	r1, r3
 80010d2:	4817      	ldr	r0, [pc, #92]	; (8001130 <MX_RTC_Init+0x110>)
 80010d4:	f003 fa38 	bl	8004548 <HAL_RTC_SetDate>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80010de:	f000 fac7 	bl	8001670 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001106:	2301      	movs	r3, #1
 8001108:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800110c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_RTC_Init+0x110>)
 800111a:	f003 fb0b 	bl	8004734 <HAL_RTC_SetAlarm>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001124:	f000 faa4 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3740      	adds	r7, #64	; 0x40
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200005b4 	.word	0x200005b4
 8001134:	40002800 	.word	0x40002800

08001138 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_SPI2_Init+0x64>)
 800113e:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <MX_SPI2_Init+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_SPI2_Init+0x64>)
 8001144:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001148:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_SPI2_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_SPI2_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_SPI2_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_SPI2_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_SPI2_Init+0x64>)
 8001164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001168:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_SPI2_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <MX_SPI2_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_SPI2_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <MX_SPI2_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_SPI2_Init+0x64>)
 8001184:	220a      	movs	r2, #10
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_SPI2_Init+0x64>)
 800118a:	f003 fcad 	bl	8004ae8 <HAL_SPI_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001194:	f000 fa6c 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000650 	.word	0x20000650
 80011a0:	40003800 	.word	0x40003800

080011a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <MX_TIM2_Init+0x98>)
 80011c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_TIM2_Init+0x98>)
 80011ca:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80011ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_TIM2_Init+0x98>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_TIM2_Init+0x98>)
 80011d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_TIM2_Init+0x98>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_TIM2_Init+0x98>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ea:	4814      	ldr	r0, [pc, #80]	; (800123c <MX_TIM2_Init+0x98>)
 80011ec:	f003 ff72 	bl	80050d4 <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011f6:	f000 fa3b 	bl	8001670 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	4619      	mov	r1, r3
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_TIM2_Init+0x98>)
 8001208:	f004 fb0c 	bl	8005824 <HAL_TIM_ConfigClockSource>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001212:	f000 fa2d 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001216:	2320      	movs	r3, #32
 8001218:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800121e:	463b      	mov	r3, r7
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_TIM2_Init+0x98>)
 8001224:	f004 fe92 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800122e:	f000 fa1f 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200007e0 	.word	0x200007e0

08001240 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2224      	movs	r2, #36	; 0x24
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f009 fc48 	bl	800aae4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800125c:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <MX_TIM3_Init+0xa0>)
 800125e:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <MX_TIM3_Init+0xa4>)
 8001260:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <MX_TIM3_Init+0xa0>)
 8001264:	2205      	movs	r2, #5
 8001266:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_TIM3_Init+0xa0>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <MX_TIM3_Init+0xa0>)
 8001270:	2263      	movs	r2, #99	; 0x63
 8001272:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_TIM3_Init+0xa0>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_TIM3_Init+0xa0>)
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001280:	2303      	movs	r3, #3
 8001282:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001288:	2301      	movs	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001290:	230a      	movs	r3, #10
 8001292:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001298:	2301      	movs	r3, #1
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_TIM3_Init+0xa0>)
 80012ac:	f004 f8c4 	bl	8005438 <HAL_TIM_Encoder_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80012b6:	f000 f9db 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <MX_TIM3_Init+0xa0>)
 80012c8:	f004 fe40 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80012d2:	f000 f9cd 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	3730      	adds	r7, #48	; 0x30
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200006f0 	.word	0x200006f0
 80012e4:	40000400 	.word	0x40000400

080012e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <MX_TIM4_Init+0xac>)
 800130c:	4a22      	ldr	r2, [pc, #136]	; (8001398 <MX_TIM4_Init+0xb0>)
 800130e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1680;
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <MX_TIM4_Init+0xac>)
 8001312:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8001316:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <MX_TIM4_Init+0xac>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_TIM4_Init+0xac>)
 8001320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001324:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_TIM4_Init+0xac>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <MX_TIM4_Init+0xac>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001332:	4818      	ldr	r0, [pc, #96]	; (8001394 <MX_TIM4_Init+0xac>)
 8001334:	f003 ff80 	bl	8005238 <HAL_TIM_PWM_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800133e:	f000 f997 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	4619      	mov	r1, r3
 8001350:	4810      	ldr	r0, [pc, #64]	; (8001394 <MX_TIM4_Init+0xac>)
 8001352:	f004 fdfb 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800135c:	f000 f988 	bl	8001670 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001360:	2360      	movs	r3, #96	; 0x60
 8001362:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2204      	movs	r2, #4
 8001374:	4619      	mov	r1, r3
 8001376:	4807      	ldr	r0, [pc, #28]	; (8001394 <MX_TIM4_Init+0xac>)
 8001378:	f004 f992 	bl	80056a0 <HAL_TIM_PWM_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001382:	f000 f975 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001386:	4803      	ldr	r0, [pc, #12]	; (8001394 <MX_TIM4_Init+0xac>)
 8001388:	f000 fd0a 	bl	8001da0 <HAL_TIM_MspPostInit>

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200006a8 	.word	0x200006a8
 8001398:	40000800 	.word	0x40000800

0800139c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <MX_USART2_UART_Init+0x50>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f004 fe28 	bl	8006028 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013de:	f000 f947 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000828 	.word	0x20000828
 80013ec:	40004400 	.word	0x40004400

080013f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <MX_DMA_Init+0x68>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a16      	ldr	r2, [pc, #88]	; (8001458 <MX_DMA_Init+0x68>)
 8001400:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_DMA_Init+0x68>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <MX_DMA_Init+0x68>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <MX_DMA_Init+0x68>)
 800141c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <MX_DMA_Init+0x68>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2010      	movs	r0, #16
 8001434:	f001 fb9b 	bl	8002b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001438:	2010      	movs	r0, #16
 800143a:	f001 fbb4 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	2038      	movs	r0, #56	; 0x38
 8001444:	f001 fb93 	bl	8002b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001448:	2038      	movs	r0, #56	; 0x38
 800144a:	f001 fbac 	bl	8002ba6 <HAL_NVIC_EnableIRQ>

}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b46      	ldr	r3, [pc, #280]	; (8001590 <MX_GPIO_Init+0x134>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a45      	ldr	r2, [pc, #276]	; (8001590 <MX_GPIO_Init+0x134>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b43      	ldr	r3, [pc, #268]	; (8001590 <MX_GPIO_Init+0x134>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <MX_GPIO_Init+0x134>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a3e      	ldr	r2, [pc, #248]	; (8001590 <MX_GPIO_Init+0x134>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <MX_GPIO_Init+0x134>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <MX_GPIO_Init+0x134>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a37      	ldr	r2, [pc, #220]	; (8001590 <MX_GPIO_Init+0x134>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b35      	ldr	r3, [pc, #212]	; (8001590 <MX_GPIO_Init+0x134>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b31      	ldr	r3, [pc, #196]	; (8001590 <MX_GPIO_Init+0x134>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a30      	ldr	r2, [pc, #192]	; (8001590 <MX_GPIO_Init+0x134>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <MX_GPIO_Init+0x134>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2182      	movs	r1, #130	; 0x82
 80014e6:	482b      	ldr	r0, [pc, #172]	; (8001594 <MX_GPIO_Init+0x138>)
 80014e8:	f002 f8fe 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 7148 	mov.w	r1, #800	; 0x320
 80014f2:	4829      	ldr	r0, [pc, #164]	; (8001598 <MX_GPIO_Init+0x13c>)
 80014f4:	f002 f8f8 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80014fe:	4827      	ldr	r0, [pc, #156]	; (800159c <MX_GPIO_Init+0x140>)
 8001500:	f002 f8f2 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_CS_Pin PC7 */
  GPIO_InitStruct.Pin = SD_CS_Pin|GPIO_PIN_7;
 8001504:	2382      	movs	r3, #130	; 0x82
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	481e      	ldr	r0, [pc, #120]	; (8001594 <MX_GPIO_Init+0x138>)
 800151c:	f001 ff60 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8001520:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4817      	ldr	r0, [pc, #92]	; (8001598 <MX_GPIO_Init+0x13c>)
 800153a:	f001 ff51 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 800153e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <MX_GPIO_Init+0x140>)
 8001558:	f001 ff42 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800155c:	2340      	movs	r3, #64	; 0x40
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001560:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4808      	ldr	r0, [pc, #32]	; (8001594 <MX_GPIO_Init+0x138>)
 8001572:	f001 ff35 	bl	80033e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2017      	movs	r0, #23
 800157c:	f001 faf7 	bl	8002b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001580:	2017      	movs	r0, #23
 8001582:	f001 fb10 	bl	8002ba6 <HAL_NVIC_EnableIRQ>

}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40020800 	.word	0x40020800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400

080015a0 <HAL_ADC_ConvCpltCallback>:
{
	alarm = 1;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80015a8:	2120      	movs	r1, #32
 80015aa:	4803      	ldr	r0, [pc, #12]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x18>)
 80015ac:	f002 f8b5 	bl	800371a <HAL_GPIO_TogglePin>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40020000 	.word	0x40020000

080015bc <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
	// Relancement du périphérique
	if(huart->Instance == USART2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_UARTEx_RxEventCallback+0x3c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d104      	bne.n	80015dc <HAL_UARTEx_RxEventCallback+0x20>
	{
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rxbuff, RXBUFF_SIZE);
 80015d2:	2208      	movs	r2, #8
 80015d4:	4909      	ldr	r1, [pc, #36]	; (80015fc <HAL_UARTEx_RxEventCallback+0x40>)
 80015d6:	480a      	ldr	r0, [pc, #40]	; (8001600 <HAL_UARTEx_RxEventCallback+0x44>)
 80015d8:	f004 fd73 	bl	80060c2 <HAL_UARTEx_ReceiveToIdle_DMA>
	}

	// Si les 4 premiers digits sont égaux à la combinaison pour ouvrir le cadenas
	if(verifCombiUart(Rxbuff,numberDisplay)){
 80015dc:	4909      	ldr	r1, [pc, #36]	; (8001604 <HAL_UARTEx_RxEventCallback+0x48>)
 80015de:	4807      	ldr	r0, [pc, #28]	; (80015fc <HAL_UARTEx_RxEventCallback+0x40>)
 80015e0:	f7ff f866 	bl	80006b0 <verifCombiUart>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <HAL_UARTEx_RxEventCallback+0x34>
		changeUart = 1;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <HAL_UARTEx_RxEventCallback+0x4c>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	801a      	strh	r2, [r3, #0]
	}
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40004400 	.word	0x40004400
 80015fc:	20000368 	.word	0x20000368
 8001600:	20000828 	.word	0x20000828
 8001604:	200000a8 	.word	0x200000a8
 8001608:	200000c8 	.word	0x200000c8

0800160c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
	if(debounce == 0)
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_GPIO_EXTI_Callback+0x54>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d119      	bne.n	8001652 <HAL_GPIO_EXTI_Callback+0x46>
	{
		// Décale vers la droite le digit selectionné
		if(cursorVal<3)
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_GPIO_EXTI_Callback+0x58>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d80b      	bhi.n	800163e <HAL_GPIO_EXTI_Callback+0x32>
		{
			cursorVal++;
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_GPIO_EXTI_Callback+0x58>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_GPIO_EXTI_Callback+0x58>)
 8001630:	801a      	strh	r2, [r3, #0]
			debounce++;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_GPIO_EXTI_Callback+0x54>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	4a09      	ldr	r2, [pc, #36]	; (8001660 <HAL_GPIO_EXTI_Callback+0x54>)
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	e009      	b.n	8001652 <HAL_GPIO_EXTI_Callback+0x46>
		}

		// Teste la combinaison
		else if(cursorVal == 3)
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_GPIO_EXTI_Callback+0x58>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d105      	bne.n	8001652 <HAL_GPIO_EXTI_Callback+0x46>
		{
			copy(numberDisplay,combinaisonCorrect);
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001648:	4808      	ldr	r0, [pc, #32]	; (800166c <HAL_GPIO_EXTI_Callback+0x60>)
 800164a:	f7fe ff9d 	bl	8000588 <copy>
			selectManager();
 800164e:	f7ff f995 	bl	800097c <selectManager>
		}
	}
	debounce = 0;
 8001652:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_GPIO_EXTI_Callback+0x54>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200000c0 	.word	0x200000c0
 8001664:	200000b0 	.word	0x200000b0
 8001668:	200000b4 	.word	0x200000b4
 800166c:	200000a8 	.word	0x200000a8

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	e7fe      	b.n	8001678 <Error_Handler+0x8>
	...

0800167c <HD44780_Init>:
#define HD44780_1LINE               0x00
#define HD44780_5x10DOTS            0x04
#define HD44780_5x8DOTS             0x00


void HD44780_Init(uint8_t cols, uint8_t rows) {//uint8_t
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	460a      	mov	r2, r1
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	4613      	mov	r3, r2
 800168a:	71bb      	strb	r3, [r7, #6]

	
	/* Init pinout */
	HD44780_InitPins();
 800168c:	f000 f99e 	bl	80019cc <HD44780_InitPins>
	
	/* At least 40ms */
	HAL_Delay(40);
 8001690:	2028      	movs	r0, #40	; 0x28
 8001692:	f000 fd75 	bl	8002180 <HAL_Delay>
	
	/* Set LCD width and height */
	HD44780_Opts.Rows = rows;
 8001696:	4a29      	ldr	r2, [pc, #164]	; (800173c <HD44780_Init+0xc0>)
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	70d3      	strb	r3, [r2, #3]
	HD44780_Opts.Cols = cols;
 800169c:	4a27      	ldr	r2, [pc, #156]	; (800173c <HD44780_Init+0xc0>)
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	7113      	strb	r3, [r2, #4]
	
	/* Set cursor pointer to beginning for LCD */
	HD44780_Opts.currentX = 0;
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <HD44780_Init+0xc0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	715a      	strb	r2, [r3, #5]
	HD44780_Opts.currentY = 0;
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <HD44780_Init+0xc0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	719a      	strb	r2, [r3, #6]
	
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <HD44780_Init+0xc0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d906      	bls.n	80016c8 <HD44780_Init+0x4c>
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <HD44780_Init+0xc0>)
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HD44780_Init+0xc0>)
 80016c6:	705a      	strb	r2, [r3, #1]
	}
	
	/* Try to set 4bit mode */
	HD44780_Cmd4bit(0x03);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 f909 	bl	80018e0 <HD44780_Cmd4bit>
	HAL_Delay(10);
 80016ce:	200a      	movs	r0, #10
 80016d0:	f000 fd56 	bl	8002180 <HAL_Delay>
	
	/* Second try */
	HD44780_Cmd4bit(0x03);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 f903 	bl	80018e0 <HD44780_Cmd4bit>
	HAL_Delay(10);
 80016da:	200a      	movs	r0, #10
 80016dc:	f000 fd50 	bl	8002180 <HAL_Delay>
	
	/* Third goo! */
	HD44780_Cmd4bit(0x03);
 80016e0:	2003      	movs	r0, #3
 80016e2:	f000 f8fd 	bl	80018e0 <HD44780_Cmd4bit>
	HAL_Delay(10);
 80016e6:	200a      	movs	r0, #10
 80016e8:	f000 fd4a 	bl	8002180 <HAL_Delay>
	
	/* Set 4-bit interface */
	HD44780_Cmd4bit(0x02);
 80016ec:	2002      	movs	r0, #2
 80016ee:	f000 f8f7 	bl	80018e0 <HD44780_Cmd4bit>
	HAL_Delay(10);
 80016f2:	200a      	movs	r0, #10
 80016f4:	f000 fd44 	bl	8002180 <HAL_Delay>
	
	/* Set # lines, font size, etc. */
	HD44780_Cmd(HD44780_FUNCTIONSET | HD44780_Opts.DisplayFunction);
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <HD44780_Init+0xc0>)
 80016fa:	785b      	ldrb	r3, [r3, #1]
 80016fc:	f043 0320 	orr.w	r3, r3, #32
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f8b0 	bl	8001868 <HD44780_Cmd>

	/* Turn the display on with no cursor or blinking default */
	HD44780_Opts.DisplayControl = HD44780_DISPLAYON;
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HD44780_Init+0xc0>)
 800170a:	2204      	movs	r2, #4
 800170c:	701a      	strb	r2, [r3, #0]
	HD44780_DisplayOn();
 800170e:	f000 f87f 	bl	8001810 <HD44780_DisplayOn>

	/* Clear lcd */
	HD44780_Clear();
 8001712:	f000 f815 	bl	8001740 <HD44780_Clear>

	/* Default font directions */
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HD44780_Init+0xc0>)
 8001718:	2202      	movs	r2, #2
 800171a:	709a      	strb	r2, [r3, #2]
	HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <HD44780_Init+0xc0>)
 800171e:	789b      	ldrb	r3, [r3, #2]
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	b2db      	uxtb	r3, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f89e 	bl	8001868 <HD44780_Cmd>

	/* Delay */
	HAL_Delay(10);
 800172c:	200a      	movs	r0, #10
 800172e:	f000 fd27 	bl	8002180 <HAL_Delay>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200000cc 	.word	0x200000cc

08001740 <HD44780_Clear>:

void HD44780_Clear(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	HD44780_Cmd(HD44780_CLEARDISPLAY);
 8001744:	2001      	movs	r0, #1
 8001746:	f000 f88f 	bl	8001868 <HD44780_Cmd>
	HAL_Delay(10);
 800174a:	200a      	movs	r0, #10
 800174c:	f000 fd18 	bl	8002180 <HAL_Delay>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <HD44780_Puts>:

void HD44780_Puts(uint8_t x, uint8_t y, char* str) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	603a      	str	r2, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
 8001760:	460b      	mov	r3, r1
 8001762:	71bb      	strb	r3, [r7, #6]
	HD44780_CursorSet(x, y);
 8001764:	79ba      	ldrb	r2, [r7, #6]
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f8fe 	bl	800196c <HD44780_CursorSet>
	while (*str) {
 8001770:	e042      	b.n	80017f8 <HD44780_Puts+0xa4>
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
 8001772:	4b26      	ldr	r3, [pc, #152]	; (800180c <HD44780_Puts+0xb8>)
 8001774:	795a      	ldrb	r2, [r3, #5]
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <HD44780_Puts+0xb8>)
 8001778:	791b      	ldrb	r3, [r3, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	d310      	bcc.n	80017a0 <HD44780_Puts+0x4c>
			HD44780_Opts.currentX = 0;
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <HD44780_Puts+0xb8>)
 8001780:	2200      	movs	r2, #0
 8001782:	715a      	strb	r2, [r3, #5]
			HD44780_Opts.currentY++;
 8001784:	4b21      	ldr	r3, [pc, #132]	; (800180c <HD44780_Puts+0xb8>)
 8001786:	799b      	ldrb	r3, [r3, #6]
 8001788:	3301      	adds	r3, #1
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HD44780_Puts+0xb8>)
 800178e:	719a      	strb	r2, [r3, #6]
			HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <HD44780_Puts+0xb8>)
 8001792:	795b      	ldrb	r3, [r3, #5]
 8001794:	4a1d      	ldr	r2, [pc, #116]	; (800180c <HD44780_Puts+0xb8>)
 8001796:	7992      	ldrb	r2, [r2, #6]
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f8e6 	bl	800196c <HD44780_CursorSet>
		}
		if (*str == '\n') {
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b0a      	cmp	r3, #10
 80017a6:	d10e      	bne.n	80017c6 <HD44780_Puts+0x72>
			HD44780_Opts.currentY++;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <HD44780_Puts+0xb8>)
 80017aa:	799b      	ldrb	r3, [r3, #6]
 80017ac:	3301      	adds	r3, #1
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <HD44780_Puts+0xb8>)
 80017b2:	719a      	strb	r2, [r3, #6]
			HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <HD44780_Puts+0xb8>)
 80017b6:	795b      	ldrb	r3, [r3, #5]
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <HD44780_Puts+0xb8>)
 80017ba:	7992      	ldrb	r2, [r2, #6]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f8d4 	bl	800196c <HD44780_CursorSet>
 80017c4:	e015      	b.n	80017f2 <HD44780_Puts+0x9e>
		} else if (*str == '\r') {
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b0d      	cmp	r3, #13
 80017cc:	d106      	bne.n	80017dc <HD44780_Puts+0x88>
			HD44780_CursorSet(0, HD44780_Opts.currentY);
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HD44780_Puts+0xb8>)
 80017d0:	799b      	ldrb	r3, [r3, #6]
 80017d2:	4619      	mov	r1, r3
 80017d4:	2000      	movs	r0, #0
 80017d6:	f000 f8c9 	bl	800196c <HD44780_CursorSet>
 80017da:	e00a      	b.n	80017f2 <HD44780_Puts+0x9e>
		} else {
			HD44780_Data(*str);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 f85f 	bl	80018a4 <HD44780_Data>
			HD44780_Opts.currentX++;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HD44780_Puts+0xb8>)
 80017e8:	795b      	ldrb	r3, [r3, #5]
 80017ea:	3301      	adds	r3, #1
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <HD44780_Puts+0xb8>)
 80017f0:	715a      	strb	r2, [r3, #5]
		}
		str++;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	603b      	str	r3, [r7, #0]
	while (*str) {
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1b8      	bne.n	8001772 <HD44780_Puts+0x1e>
	}
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200000cc 	.word	0x200000cc

08001810 <HD44780_DisplayOn>:

void HD44780_DisplayOn(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	HD44780_Opts.DisplayControl |= HD44780_DISPLAYON;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HD44780_DisplayOn+0x28>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HD44780_DisplayOn+0x28>)
 8001820:	701a      	strb	r2, [r3, #0]
	HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HD44780_DisplayOn+0x28>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	b2db      	uxtb	r3, r3
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f81b 	bl	8001868 <HD44780_Cmd>
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200000cc 	.word	0x200000cc

0800183c <HD44780_CursorOn>:
void HD44780_BlinkOff(void) {
	HD44780_Opts.DisplayControl &= ~HD44780_BLINKON;
	HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
}

void HD44780_CursorOn(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	HD44780_Opts.DisplayControl |= HD44780_CURSORON;
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HD44780_CursorOn+0x28>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HD44780_CursorOn+0x28>)
 800184c:	701a      	strb	r2, [r3, #0]
	HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HD44780_CursorOn+0x28>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	f043 0308 	orr.w	r3, r3, #8
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f805 	bl	8001868 <HD44780_Cmd>
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200000cc 	.word	0x200000cc

08001868 <HD44780_Cmd>:
	HD44780_CursorSet(x, y);
	HD44780_Data(location);
}

/* Private functions */
static void HD44780_Cmd(uint8_t cmd) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	/* Command mode */
	HD44780_RS_LOW;
 8001872:	2200      	movs	r2, #0
 8001874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001878:	4809      	ldr	r0, [pc, #36]	; (80018a0 <HD44780_Cmd+0x38>)
 800187a:	f001 ff35 	bl	80036e8 <HAL_GPIO_WritePin>
	
	/* High nibble */
	HD44780_Cmd4bit(cmd >> 4);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	b2db      	uxtb	r3, r3
 8001884:	4618      	mov	r0, r3
 8001886:	f000 f82b 	bl	80018e0 <HD44780_Cmd4bit>
	/* Low nibble */
	HD44780_Cmd4bit(cmd & 0x0F);
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f824 	bl	80018e0 <HD44780_Cmd4bit>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40020000 	.word	0x40020000

080018a4 <HD44780_Data>:

static void HD44780_Data(uint8_t data) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
	/* Data mode */
	HD44780_RS_HIGH;
 80018ae:	2201      	movs	r2, #1
 80018b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b4:	4809      	ldr	r0, [pc, #36]	; (80018dc <HD44780_Data+0x38>)
 80018b6:	f001 ff17 	bl	80036e8 <HAL_GPIO_WritePin>
	
	/* High nibble */
	HD44780_Cmd4bit(data >> 4);
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 f80d 	bl	80018e0 <HD44780_Cmd4bit>
	/* Low nibble */
	HD44780_Cmd4bit(data & 0x0F);
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f806 	bl	80018e0 <HD44780_Cmd4bit>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40020000 	.word	0x40020000

080018e0 <HD44780_Cmd4bit>:

static void HD44780_Cmd4bit(uint8_t cmd) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	/* Set output port */
	HAL_GPIO_WritePin(D7_LCD_GPIO_Port, D7_LCD_Pin, (cmd & 0x08));
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	461a      	mov	r2, r3
 80018f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f8:	4819      	ldr	r0, [pc, #100]	; (8001960 <HD44780_Cmd4bit+0x80>)
 80018fa:	f001 fef5 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_LCD_GPIO_Port, D6_LCD_Pin, (cmd & 0x04));
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800190c:	4815      	ldr	r0, [pc, #84]	; (8001964 <HD44780_Cmd4bit+0x84>)
 800190e:	f001 feeb 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_LCD_GPIO_Port, D5_LCD_Pin, (cmd & 0x02));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	2110      	movs	r1, #16
 800191e:	4811      	ldr	r0, [pc, #68]	; (8001964 <HD44780_Cmd4bit+0x84>)
 8001920:	f001 fee2 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LCD_GPIO_Port, D4_LCD_Pin, (cmd & 0x01));
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	2120      	movs	r1, #32
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <HD44780_Cmd4bit+0x84>)
 8001932:	f001 fed9 	bl	80036e8 <HAL_GPIO_WritePin>
	HD44780_E_BLINK;
 8001936:	2201      	movs	r2, #1
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	480b      	ldr	r0, [pc, #44]	; (8001968 <HD44780_Cmd4bit+0x88>)
 800193c:	f001 fed4 	bl	80036e8 <HAL_GPIO_WritePin>
 8001940:	2001      	movs	r0, #1
 8001942:	f000 fc1d 	bl	8002180 <HAL_Delay>
 8001946:	2200      	movs	r2, #0
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <HD44780_Cmd4bit+0x88>)
 800194c:	f001 fecc 	bl	80036e8 <HAL_GPIO_WritePin>
 8001950:	2001      	movs	r0, #1
 8001952:	f000 fc15 	bl	8002180 <HAL_Delay>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40020000 	.word	0x40020000
 8001964:	40020400 	.word	0x40020400
 8001968:	40020800 	.word	0x40020800

0800196c <HD44780_CursorSet>:

void HD44780_CursorSet(uint8_t col, uint8_t row) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	460a      	mov	r2, r1
 8001976:	71fb      	strb	r3, [r7, #7]
 8001978:	4613      	mov	r3, r2
 800197a:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HD44780_CursorSet+0x58>)
 800197e:	60fb      	str	r3, [r7, #12]
	
	/* Go to beginning */
	if (row >= HD44780_Opts.Rows) {
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HD44780_CursorSet+0x5c>)
 8001982:	78db      	ldrb	r3, [r3, #3]
 8001984:	79ba      	ldrb	r2, [r7, #6]
 8001986:	429a      	cmp	r2, r3
 8001988:	d301      	bcc.n	800198e <HD44780_CursorSet+0x22>
		row = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	71bb      	strb	r3, [r7, #6]
	}
	
	/* Set current column and row */
	HD44780_Opts.currentX = col;
 800198e:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <HD44780_CursorSet+0x5c>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	7153      	strb	r3, [r2, #5]
	HD44780_Opts.currentY = row;
 8001994:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <HD44780_CursorSet+0x5c>)
 8001996:	79bb      	ldrb	r3, [r7, #6]
 8001998:	7193      	strb	r3, [r2, #6]
	
	/* Set location address */
	HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	f107 0210 	add.w	r2, r7, #16
 80019a0:	4413      	add	r3, r2
 80019a2:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	4413      	add	r3, r2
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019b2:	b25b      	sxtb	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ff56 	bl	8001868 <HD44780_Cmd>
}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	54144000 	.word	0x54144000
 80019c8:	200000cc 	.word	0x200000cc

080019cc <HD44780_InitPins>:

static void HD44780_InitPins(void) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0

	/* Set pins low */
	HAL_GPIO_WritePin(RS_LCD_GPIO_Port, RS_LCD_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d6:	4810      	ldr	r0, [pc, #64]	; (8001a18 <HD44780_InitPins+0x4c>)
 80019d8:	f001 fe86 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_LCD_GPIO_Port, E_LCD_Pin,GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	480e      	ldr	r0, [pc, #56]	; (8001a1c <HD44780_InitPins+0x50>)
 80019e2:	f001 fe81 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LCD_GPIO_Port, D4_LCD_Pin,GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2120      	movs	r1, #32
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <HD44780_InitPins+0x54>)
 80019ec:	f001 fe7c 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_LCD_GPIO_Port, D5_LCD_Pin,GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2110      	movs	r1, #16
 80019f4:	480a      	ldr	r0, [pc, #40]	; (8001a20 <HD44780_InitPins+0x54>)
 80019f6:	f001 fe77 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_LCD_GPIO_Port, D6_LCD_Pin,GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a00:	4807      	ldr	r0, [pc, #28]	; (8001a20 <HD44780_InitPins+0x54>)
 8001a02:	f001 fe71 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_LCD_GPIO_Port, D7_LCD_Pin,GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <HD44780_InitPins+0x4c>)
 8001a0e:	f001 fe6b 	bl	80036e8 <HAL_GPIO_WritePin>
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020400 	.word	0x40020400

08001a24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_MspInit+0x4c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <HAL_MspInit+0x4c>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_MspInit+0x4c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_MspInit+0x4c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <HAL_MspInit+0x4c>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_MspInit+0x4c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a2f      	ldr	r2, [pc, #188]	; (8001b50 <HAL_ADC_MspInit+0xdc>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d157      	bne.n	8001b46 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <HAL_ADC_MspInit+0xe0>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a2d      	ldr	r2, [pc, #180]	; (8001b54 <HAL_ADC_MspInit+0xe0>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <HAL_ADC_MspInit+0xe0>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <HAL_ADC_MspInit+0xe0>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <HAL_ADC_MspInit+0xe0>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_ADC_MspInit+0xe0>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	481d      	ldr	r0, [pc, #116]	; (8001b58 <HAL_ADC_MspInit+0xe4>)
 8001ae2:	f001 fc7d 	bl	80033e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <HAL_ADC_MspInit+0xe8>)
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_ADC_MspInit+0xec>)
 8001aea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_ADC_MspInit+0xe8>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <HAL_ADC_MspInit+0xe8>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_ADC_MspInit+0xe8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <HAL_ADC_MspInit+0xe8>)
 8001b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b04:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_ADC_MspInit+0xe8>)
 8001b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b0c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <HAL_ADC_MspInit+0xe8>)
 8001b10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_ADC_MspInit+0xe8>)
 8001b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b1c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_ADC_MspInit+0xe8>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <HAL_ADC_MspInit+0xe8>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b2a:	480c      	ldr	r0, [pc, #48]	; (8001b5c <HAL_ADC_MspInit+0xe8>)
 8001b2c:	f001 f856 	bl	8002bdc <HAL_DMA_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001b36:	f7ff fd9b 	bl	8001670 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <HAL_ADC_MspInit+0xe8>)
 8001b3e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b40:	4a06      	ldr	r2, [pc, #24]	; (8001b5c <HAL_ADC_MspInit+0xe8>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40012000 	.word	0x40012000
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	20000780 	.word	0x20000780
 8001b60:	40026410 	.word	0x40026410

08001b64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
 8001b7c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <HAL_RTC_MspInit+0x50>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d111      	bne.n	8001bac <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b90:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 fa3a 	bl	8004010 <HAL_RCCEx_PeriphCLKConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001ba2:	f7ff fd65 	bl	8001670 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <HAL_RTC_MspInit+0x54>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bac:	bf00      	nop
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40002800 	.word	0x40002800
 8001bb8:	42470e3c 	.word	0x42470e3c

08001bbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a28      	ldr	r2, [pc, #160]	; (8001c7c <HAL_SPI_MspInit+0xc0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d14a      	bne.n	8001c74 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_SPI_MspInit+0xc4>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a26      	ldr	r2, [pc, #152]	; (8001c80 <HAL_SPI_MspInit+0xc4>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_SPI_MspInit+0xc4>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_SPI_MspInit+0xc4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a1f      	ldr	r2, [pc, #124]	; (8001c80 <HAL_SPI_MspInit+0xc4>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HAL_SPI_MspInit+0xc4>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_SPI_MspInit+0xc4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <HAL_SPI_MspInit+0xc4>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_SPI_MspInit+0xc4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c32:	230c      	movs	r3, #12
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c42:	2305      	movs	r3, #5
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480d      	ldr	r0, [pc, #52]	; (8001c84 <HAL_SPI_MspInit+0xc8>)
 8001c4e:	f001 fbc7 	bl	80033e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c64:	2305      	movs	r3, #5
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4806      	ldr	r0, [pc, #24]	; (8001c88 <HAL_SPI_MspInit+0xcc>)
 8001c70:	f001 fbb6 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c74:	bf00      	nop
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40003800 	.word	0x40003800
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020800 	.word	0x40020800
 8001c88:	40020400 	.word	0x40020400

08001c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c9c:	d10d      	bne.n	8001cba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800

08001ccc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <HAL_TIM_Encoder_MspInit+0x84>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d12b      	bne.n	8001d46 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <HAL_TIM_Encoder_MspInit+0x88>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <HAL_TIM_Encoder_MspInit+0x88>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d26:	23c0      	movs	r3, #192	; 0xc0
 8001d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d36:	2302      	movs	r3, #2
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d42:	f001 fb4d 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40000400 	.word	0x40000400
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020000 	.word	0x40020000

08001d5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d10d      	bne.n	8001d8a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_TIM_PWM_MspInit+0x40>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a09      	ldr	r2, [pc, #36]	; (8001d9c <HAL_TIM_PWM_MspInit+0x40>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <HAL_TIM_PWM_MspInit+0x40>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40000800 	.word	0x40000800
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_TIM_MspPostInit+0x68>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d11d      	bne.n	8001dfe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_TIM_MspPostInit+0x6c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a10      	ldr	r2, [pc, #64]	; (8001e0c <HAL_TIM_MspPostInit+0x6c>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_TIM_MspPostInit+0x6c>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	4619      	mov	r1, r3
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <HAL_TIM_MspPostInit+0x70>)
 8001dfa:	f001 faf1 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001dfe:	bf00      	nop
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40000800 	.word	0x40000800
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020400 	.word	0x40020400

08001e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a34      	ldr	r2, [pc, #208]	; (8001f04 <HAL_UART_MspInit+0xf0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d161      	bne.n	8001efa <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4b33      	ldr	r3, [pc, #204]	; (8001f08 <HAL_UART_MspInit+0xf4>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a32      	ldr	r2, [pc, #200]	; (8001f08 <HAL_UART_MspInit+0xf4>)
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <HAL_UART_MspInit+0xf4>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <HAL_UART_MspInit+0xf4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a2b      	ldr	r2, [pc, #172]	; (8001f08 <HAL_UART_MspInit+0xf4>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <HAL_UART_MspInit+0xf4>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e6e:	230c      	movs	r3, #12
 8001e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e7e:	2307      	movs	r3, #7
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	4820      	ldr	r0, [pc, #128]	; (8001f0c <HAL_UART_MspInit+0xf8>)
 8001e8a:	f001 faa9 	bl	80033e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001e90:	4a20      	ldr	r2, [pc, #128]	; (8001f14 <HAL_UART_MspInit+0x100>)
 8001e92:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e94:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001e96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e9a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e9c:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ece:	4810      	ldr	r0, [pc, #64]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001ed0:	f000 fe84 	bl	8002bdc <HAL_DMA_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001eda:	f7ff fbc9 	bl	8001670 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001ee2:	639a      	str	r2, [r3, #56]	; 0x38
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	2026      	movs	r0, #38	; 0x26
 8001ef0:	f000 fe3d 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ef4:	2026      	movs	r0, #38	; 0x26
 8001ef6:	f000 fe56 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001efa:	bf00      	nop
 8001efc:	3728      	adds	r7, #40	; 0x28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40004400 	.word	0x40004400
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	200005f0 	.word	0x200005f0
 8001f14:	40026088 	.word	0x40026088

08001f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <NMI_Handler+0x4>

08001f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <HardFault_Handler+0x4>

08001f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <MemManage_Handler+0x4>

08001f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <BusFault_Handler+0x4>

08001f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <UsageFault_Handler+0x4>

08001f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f64:	f000 f8ec 	bl	8002140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <DMA1_Stream5_IRQHandler+0x10>)
 8001f72:	f000 ffcb 	bl	8002f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200005f0 	.word	0x200005f0

08001f80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001f84:	2040      	movs	r0, #64	; 0x40
 8001f86:	f001 fbe3 	bl	8003750 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <USART2_IRQHandler+0x10>)
 8001f96:	f004 f8f9 	bl	800618c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000828 	.word	0x20000828

08001fa4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <DMA2_Stream0_IRQHandler+0x10>)
 8001faa:	f000 ffaf 	bl	8002f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000780 	.word	0x20000780

08001fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc0:	4a14      	ldr	r2, [pc, #80]	; (8002014 <_sbrk+0x5c>)
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <_sbrk+0x60>)
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <_sbrk+0x64>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <_sbrk+0x68>)
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <_sbrk+0x64>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d207      	bcs.n	8001ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe8:	f008 fd52 	bl	800aa90 <__errno>
 8001fec:	4603      	mov	r3, r0
 8001fee:	220c      	movs	r2, #12
 8001ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	e009      	b.n	800200c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <_sbrk+0x64>)
 8002008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20020000 	.word	0x20020000
 8002018:	00000400 	.word	0x00000400
 800201c:	200000d4 	.word	0x200000d4
 8002020:	20000cf8 	.word	0x20000cf8

08002024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <SystemInit+0x20>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <SystemInit+0x20>)
 8002030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002080 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800204e:	490e      	ldr	r1, [pc, #56]	; (8002088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002054:	e002      	b.n	800205c <LoopCopyDataInit>

08002056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205a:	3304      	adds	r3, #4

0800205c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800205c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002060:	d3f9      	bcc.n	8002056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002062:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002064:	4c0b      	ldr	r4, [pc, #44]	; (8002094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002068:	e001      	b.n	800206e <LoopFillZerobss>

0800206a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800206c:	3204      	adds	r2, #4

0800206e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002070:	d3fb      	bcc.n	800206a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002072:	f7ff ffd7 	bl	8002024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002076:	f008 fd11 	bl	800aa9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800207a:	f7fe fe4d 	bl	8000d18 <main>
  bx  lr    
 800207e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002088:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800208c:	0800b964 	.word	0x0800b964
  ldr r2, =_sbss
 8002090:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002094:	20000cf4 	.word	0x20000cf4

08002098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002098:	e7fe      	b.n	8002098 <ADC_IRQHandler>
	...

0800209c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <HAL_Init+0x40>)
 80020a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <HAL_Init+0x40>)
 80020b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a07      	ldr	r2, [pc, #28]	; (80020dc <HAL_Init+0x40>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c4:	2003      	movs	r0, #3
 80020c6:	f000 fd47 	bl	8002b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ca:	200f      	movs	r0, #15
 80020cc:	f000 f808 	bl	80020e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d0:	f7ff fca8 	bl	8001a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023c00 	.word	0x40023c00

080020e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_InitTick+0x54>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_InitTick+0x58>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fd5f 	bl	8002bc2 <HAL_SYSTICK_Config>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e00e      	b.n	800212c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b0f      	cmp	r3, #15
 8002112:	d80a      	bhi.n	800212a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002114:	2200      	movs	r2, #0
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f000 fd27 	bl	8002b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002120:	4a06      	ldr	r2, [pc, #24]	; (800213c <HAL_InitTick+0x5c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000004 	.word	0x20000004
 8002138:	2000000c 	.word	0x2000000c
 800213c:	20000008 	.word	0x20000008

08002140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_IncTick+0x20>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_IncTick+0x24>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4413      	add	r3, r2
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_IncTick+0x24>)
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	2000000c 	.word	0x2000000c
 8002164:	2000086c 	.word	0x2000086c

08002168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_GetTick+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	2000086c 	.word	0x2000086c

08002180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff ffee 	bl	8002168 <HAL_GetTick>
 800218c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d005      	beq.n	80021a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_Delay+0x44>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021a6:	bf00      	nop
 80021a8:	f7ff ffde 	bl	8002168 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d8f7      	bhi.n	80021a8 <HAL_Delay+0x28>
  {
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2000000c 	.word	0x2000000c

080021c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e033      	b.n	8002246 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d109      	bne.n	80021fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fc44 	bl	8001a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d118      	bne.n	8002238 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800220e:	f023 0302 	bic.w	r3, r3, #2
 8002212:	f043 0202 	orr.w	r2, r3, #2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fa4e 	bl	80026bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f023 0303 	bic.w	r3, r3, #3
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	641a      	str	r2, [r3, #64]	; 0x40
 8002236:	e001      	b.n	800223c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_ADC_Start_DMA+0x1e>
 800226a:	2302      	movs	r3, #2
 800226c:	e0ce      	b.n	800240c <HAL_ADC_Start_DMA+0x1bc>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	d018      	beq.n	80022b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002294:	4b5f      	ldr	r3, [pc, #380]	; (8002414 <HAL_ADC_Start_DMA+0x1c4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a5f      	ldr	r2, [pc, #380]	; (8002418 <HAL_ADC_Start_DMA+0x1c8>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	0c9a      	lsrs	r2, r3, #18
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80022a8:	e002      	b.n	80022b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f9      	bne.n	80022aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c4:	d107      	bne.n	80022d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	f040 8086 	bne.w	80023f2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002310:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002324:	d106      	bne.n	8002334 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f023 0206 	bic.w	r2, r3, #6
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	645a      	str	r2, [r3, #68]	; 0x44
 8002332:	e002      	b.n	800233a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_ADC_Start_DMA+0x1cc>)
 8002344:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	4a35      	ldr	r2, [pc, #212]	; (8002420 <HAL_ADC_Start_DMA+0x1d0>)
 800234c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	4a34      	ldr	r2, [pc, #208]	; (8002424 <HAL_ADC_Start_DMA+0x1d4>)
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235a:	4a33      	ldr	r2, [pc, #204]	; (8002428 <HAL_ADC_Start_DMA+0x1d8>)
 800235c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002366:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002376:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002386:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	334c      	adds	r3, #76	; 0x4c
 8002392:	4619      	mov	r1, r3
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f000 fcce 	bl	8002d38 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10f      	bne.n	80023c8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d129      	bne.n	800240a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	e020      	b.n	800240a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a17      	ldr	r2, [pc, #92]	; (800242c <HAL_ADC_Start_DMA+0x1dc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d11b      	bne.n	800240a <HAL_ADC_Start_DMA+0x1ba>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d114      	bne.n	800240a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	e00b      	b.n	800240a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f043 0210 	orr.w	r2, r3, #16
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f043 0201 	orr.w	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000004 	.word	0x20000004
 8002418:	431bde83 	.word	0x431bde83
 800241c:	40012300 	.word	0x40012300
 8002420:	080028b5 	.word	0x080028b5
 8002424:	0800296f 	.word	0x0800296f
 8002428:	0800298b 	.word	0x0800298b
 800242c:	40012000 	.word	0x40012000

08002430 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1c>
 8002470:	2302      	movs	r3, #2
 8002472:	e113      	b.n	800269c <HAL_ADC_ConfigChannel+0x244>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b09      	cmp	r3, #9
 8002482:	d925      	bls.n	80024d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68d9      	ldr	r1, [r3, #12]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	3b1e      	subs	r3, #30
 800249a:	2207      	movs	r2, #7
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43da      	mvns	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	400a      	ands	r2, r1
 80024a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68d9      	ldr	r1, [r3, #12]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	4603      	mov	r3, r0
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4403      	add	r3, r0
 80024c2:	3b1e      	subs	r3, #30
 80024c4:	409a      	lsls	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	e022      	b.n	8002516 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6919      	ldr	r1, [r3, #16]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	2207      	movs	r2, #7
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	400a      	ands	r2, r1
 80024f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6919      	ldr	r1, [r3, #16]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	4618      	mov	r0, r3
 8002506:	4603      	mov	r3, r0
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4403      	add	r3, r0
 800250c:	409a      	lsls	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b06      	cmp	r3, #6
 800251c:	d824      	bhi.n	8002568 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3b05      	subs	r3, #5
 8002530:	221f      	movs	r2, #31
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	400a      	ands	r2, r1
 800253e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	4618      	mov	r0, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	3b05      	subs	r3, #5
 800255a:	fa00 f203 	lsl.w	r2, r0, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	635a      	str	r2, [r3, #52]	; 0x34
 8002566:	e04c      	b.n	8002602 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b0c      	cmp	r3, #12
 800256e:	d824      	bhi.n	80025ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b23      	subs	r3, #35	; 0x23
 8002582:	221f      	movs	r2, #31
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43da      	mvns	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	400a      	ands	r2, r1
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	3b23      	subs	r3, #35	; 0x23
 80025ac:	fa00 f203 	lsl.w	r2, r0, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
 80025b8:	e023      	b.n	8002602 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	3b41      	subs	r3, #65	; 0x41
 80025cc:	221f      	movs	r2, #31
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43da      	mvns	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	400a      	ands	r2, r1
 80025da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4618      	mov	r0, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	3b41      	subs	r3, #65	; 0x41
 80025f6:	fa00 f203 	lsl.w	r2, r0, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002602:	4b29      	ldr	r3, [pc, #164]	; (80026a8 <HAL_ADC_ConfigChannel+0x250>)
 8002604:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a28      	ldr	r2, [pc, #160]	; (80026ac <HAL_ADC_ConfigChannel+0x254>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d10f      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1d8>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b12      	cmp	r3, #18
 8002616:	d10b      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <HAL_ADC_ConfigChannel+0x254>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d12b      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x23a>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1c      	ldr	r2, [pc, #112]	; (80026b0 <HAL_ADC_ConfigChannel+0x258>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d003      	beq.n	800264c <HAL_ADC_ConfigChannel+0x1f4>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b11      	cmp	r3, #17
 800264a:	d122      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a11      	ldr	r2, [pc, #68]	; (80026b0 <HAL_ADC_ConfigChannel+0x258>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d111      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_ADC_ConfigChannel+0x25c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <HAL_ADC_ConfigChannel+0x260>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	0c9a      	lsrs	r2, r3, #18
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002684:	e002      	b.n	800268c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	3b01      	subs	r3, #1
 800268a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f9      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40012300 	.word	0x40012300
 80026ac:	40012000 	.word	0x40012000
 80026b0:	10000012 	.word	0x10000012
 80026b4:	20000004 	.word	0x20000004
 80026b8:	431bde83 	.word	0x431bde83

080026bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c4:	4b79      	ldr	r3, [pc, #484]	; (80028ac <ADC_Init+0x1f0>)
 80026c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	021a      	lsls	r2, r3, #8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002714:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6899      	ldr	r1, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	4a58      	ldr	r2, [pc, #352]	; (80028b0 <ADC_Init+0x1f4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d022      	beq.n	800279a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002762:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6899      	ldr	r1, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6899      	ldr	r1, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	e00f      	b.n	80027ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0202 	bic.w	r2, r2, #2
 80027c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7e1b      	ldrb	r3, [r3, #24]
 80027d4:	005a      	lsls	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01b      	beq.n	8002820 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002806:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	3b01      	subs	r3, #1
 8002814:	035a      	lsls	r2, r3, #13
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	e007      	b.n	8002830 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	3b01      	subs	r3, #1
 800284c:	051a      	lsls	r2, r3, #20
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6899      	ldr	r1, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002872:	025a      	lsls	r2, r3, #9
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800288a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6899      	ldr	r1, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	029a      	lsls	r2, r3, #10
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	609a      	str	r2, [r3, #8]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40012300 	.word	0x40012300
 80028b0:	0f000001 	.word	0x0f000001

080028b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d13c      	bne.n	8002948 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d12b      	bne.n	8002940 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d127      	bne.n	8002940 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002908:	2b00      	cmp	r3, #0
 800290a:	d119      	bne.n	8002940 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0220 	bic.w	r2, r2, #32
 800291a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d105      	bne.n	8002940 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f7fe fe2d 	bl	80015a0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002946:	e00e      	b.n	8002966 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f7ff fd75 	bl	8002444 <HAL_ADC_ErrorCallback>
}
 800295a:	e004      	b.n	8002966 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	4798      	blx	r3
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fd57 	bl	8002430 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2240      	movs	r2, #64	; 0x40
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f043 0204 	orr.w	r2, r3, #4
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7ff fd4a 	bl	8002444 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <__NVIC_SetPriorityGrouping+0x44>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029d4:	4013      	ands	r3, r2
 80029d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ea:	4a04      	ldr	r2, [pc, #16]	; (80029fc <__NVIC_SetPriorityGrouping+0x44>)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	60d3      	str	r3, [r2, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a04:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <__NVIC_GetPriorityGrouping+0x18>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	f003 0307 	and.w	r3, r3, #7
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	db0b      	blt.n	8002a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	4907      	ldr	r1, [pc, #28]	; (8002a54 <__NVIC_EnableIRQ+0x38>)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000e100 	.word	0xe000e100

08002a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db0a      	blt.n	8002a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	490c      	ldr	r1, [pc, #48]	; (8002aa4 <__NVIC_SetPriority+0x4c>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a80:	e00a      	b.n	8002a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4908      	ldr	r1, [pc, #32]	; (8002aa8 <__NVIC_SetPriority+0x50>)
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	3b04      	subs	r3, #4
 8002a90:	0112      	lsls	r2, r2, #4
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	440b      	add	r3, r1
 8002a96:	761a      	strb	r2, [r3, #24]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000e100 	.word	0xe000e100
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	; 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f1c3 0307 	rsb	r3, r3, #7
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	bf28      	it	cs
 8002aca:	2304      	movcs	r3, #4
 8002acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d902      	bls.n	8002adc <NVIC_EncodePriority+0x30>
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3b03      	subs	r3, #3
 8002ada:	e000      	b.n	8002ade <NVIC_EncodePriority+0x32>
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	401a      	ands	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af4:	f04f 31ff 	mov.w	r1, #4294967295
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	43d9      	mvns	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	4313      	orrs	r3, r2
         );
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3724      	adds	r7, #36	; 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b24:	d301      	bcc.n	8002b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00f      	b.n	8002b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <SysTick_Config+0x40>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b32:	210f      	movs	r1, #15
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295
 8002b38:	f7ff ff8e 	bl	8002a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <SysTick_Config+0x40>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b42:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <SysTick_Config+0x40>)
 8002b44:	2207      	movs	r2, #7
 8002b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	e000e010 	.word	0xe000e010

08002b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ff29 	bl	80029b8 <__NVIC_SetPriorityGrouping>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b80:	f7ff ff3e 	bl	8002a00 <__NVIC_GetPriorityGrouping>
 8002b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	6978      	ldr	r0, [r7, #20]
 8002b8c:	f7ff ff8e 	bl	8002aac <NVIC_EncodePriority>
 8002b90:	4602      	mov	r2, r0
 8002b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff5d 	bl	8002a58 <__NVIC_SetPriority>
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff31 	bl	8002a1c <__NVIC_EnableIRQ>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff ffa2 	bl	8002b14 <SysTick_Config>
 8002bd0:	4603      	mov	r3, r0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002be8:	f7ff fabe 	bl	8002168 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e099      	b.n	8002d2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c18:	e00f      	b.n	8002c3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c1a:	f7ff faa5 	bl	8002168 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b05      	cmp	r3, #5
 8002c26:	d908      	bls.n	8002c3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2203      	movs	r2, #3
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e078      	b.n	8002d2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e8      	bne.n	8002c1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	4b38      	ldr	r3, [pc, #224]	; (8002d34 <HAL_DMA_Init+0x158>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d107      	bne.n	8002ca4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f023 0307 	bic.w	r3, r3, #7
 8002cba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d117      	bne.n	8002cfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00e      	beq.n	8002cfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fb01 	bl	80032e8 <DMA_CheckFifoParam>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2240      	movs	r2, #64	; 0x40
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e016      	b.n	8002d2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fab8 	bl	800327c <DMA_CalcBaseAndBitshift>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d14:	223f      	movs	r2, #63	; 0x3f
 8002d16:	409a      	lsls	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	f010803f 	.word	0xf010803f

08002d38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_DMA_Start_IT+0x26>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e040      	b.n	8002de0 <HAL_DMA_Start_IT+0xa8>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d12f      	bne.n	8002dd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 fa4a 	bl	8003220 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	223f      	movs	r2, #63	; 0x3f
 8002d92:	409a      	lsls	r2, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0216 	orr.w	r2, r2, #22
 8002da6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d007      	beq.n	8002dc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0208 	orr.w	r2, r2, #8
 8002dbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e005      	b.n	8002dde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002df6:	f7ff f9b7 	bl	8002168 <HAL_GetTick>
 8002dfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d008      	beq.n	8002e1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2280      	movs	r2, #128	; 0x80
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e052      	b.n	8002ec0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0216 	bic.w	r2, r2, #22
 8002e28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <HAL_DMA_Abort+0x62>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0208 	bic.w	r2, r2, #8
 8002e58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6a:	e013      	b.n	8002e94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6c:	f7ff f97c 	bl	8002168 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d90c      	bls.n	8002e94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2203      	movs	r2, #3
 8002e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e015      	b.n	8002ec0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e4      	bne.n	8002e6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	223f      	movs	r2, #63	; 0x3f
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d004      	beq.n	8002ee6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00c      	b.n	8002f00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2205      	movs	r2, #5
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f18:	4b92      	ldr	r3, [pc, #584]	; (8003164 <HAL_DMA_IRQHandler+0x258>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a92      	ldr	r2, [pc, #584]	; (8003168 <HAL_DMA_IRQHandler+0x25c>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	0a9b      	lsrs	r3, r3, #10
 8002f24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	2208      	movs	r2, #8
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01a      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0204 	bic.w	r2, r2, #4
 8002f5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	2208      	movs	r2, #8
 8002f66:	409a      	lsls	r2, r3
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d012      	beq.n	8002fae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa6:	f043 0202 	orr.w	r2, r3, #2
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d012      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	f043 0204 	orr.w	r2, r3, #4
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	2210      	movs	r2, #16
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d043      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d03c      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	2210      	movs	r2, #16
 8003008:	409a      	lsls	r2, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d018      	beq.n	800304e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d024      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
 800303a:	e01f      	b.n	800307c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e016      	b.n	800307c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0208 	bic.w	r2, r2, #8
 800306a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	2220      	movs	r2, #32
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 808e 	beq.w	80031aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8086 	beq.w	80031aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a2:	2220      	movs	r2, #32
 80030a4:	409a      	lsls	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b05      	cmp	r3, #5
 80030b4:	d136      	bne.n	8003124 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0216 	bic.w	r2, r2, #22
 80030c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <HAL_DMA_IRQHandler+0x1da>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0208 	bic.w	r2, r2, #8
 80030f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	223f      	movs	r2, #63	; 0x3f
 80030fc:	409a      	lsls	r2, r3
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003116:	2b00      	cmp	r3, #0
 8003118:	d07d      	beq.n	8003216 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
        }
        return;
 8003122:	e078      	b.n	8003216 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01c      	beq.n	800316c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d108      	bne.n	8003152 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	2b00      	cmp	r3, #0
 8003146:	d030      	beq.n	80031aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
 8003150:	e02b      	b.n	80031aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d027      	beq.n	80031aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
 8003162:	e022      	b.n	80031aa <HAL_DMA_IRQHandler+0x29e>
 8003164:	20000004 	.word	0x20000004
 8003168:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0210 	bic.w	r2, r2, #16
 8003188:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d032      	beq.n	8003218 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d022      	beq.n	8003204 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2205      	movs	r2, #5
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	3301      	adds	r3, #1
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d307      	bcc.n	80031f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f2      	bne.n	80031d6 <HAL_DMA_IRQHandler+0x2ca>
 80031f0:	e000      	b.n	80031f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031f2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
 8003214:	e000      	b.n	8003218 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003216:	bf00      	nop
    }
  }
}
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop

08003220 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800323c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b40      	cmp	r3, #64	; 0x40
 800324c:	d108      	bne.n	8003260 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800325e:	e007      	b.n	8003270 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	3b10      	subs	r3, #16
 800328c:	4a14      	ldr	r2, [pc, #80]	; (80032e0 <DMA_CalcBaseAndBitshift+0x64>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003296:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d909      	bls.n	80032be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032b2:	f023 0303 	bic.w	r3, r3, #3
 80032b6:	1d1a      	adds	r2, r3, #4
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	659a      	str	r2, [r3, #88]	; 0x58
 80032bc:	e007      	b.n	80032ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	aaaaaaab 	.word	0xaaaaaaab
 80032e4:	0800b4d8 	.word	0x0800b4d8

080032e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d11f      	bne.n	8003342 <DMA_CheckFifoParam+0x5a>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d856      	bhi.n	80033b6 <DMA_CheckFifoParam+0xce>
 8003308:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <DMA_CheckFifoParam+0x28>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	08003321 	.word	0x08003321
 8003314:	08003333 	.word	0x08003333
 8003318:	08003321 	.word	0x08003321
 800331c:	080033b7 	.word	0x080033b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d046      	beq.n	80033ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003330:	e043      	b.n	80033ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800333a:	d140      	bne.n	80033be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003340:	e03d      	b.n	80033be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334a:	d121      	bne.n	8003390 <DMA_CheckFifoParam+0xa8>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d837      	bhi.n	80033c2 <DMA_CheckFifoParam+0xda>
 8003352:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <DMA_CheckFifoParam+0x70>)
 8003354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003358:	08003369 	.word	0x08003369
 800335c:	0800336f 	.word	0x0800336f
 8003360:	08003369 	.word	0x08003369
 8003364:	08003381 	.word	0x08003381
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      break;
 800336c:	e030      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d025      	beq.n	80033c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337e:	e022      	b.n	80033c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003388:	d11f      	bne.n	80033ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800338e:	e01c      	b.n	80033ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d903      	bls.n	800339e <DMA_CheckFifoParam+0xb6>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d003      	beq.n	80033a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800339c:	e018      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
      break;
 80033a2:	e015      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00e      	beq.n	80033ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      break;
 80033b4:	e00b      	b.n	80033ce <DMA_CheckFifoParam+0xe6>
      break;
 80033b6:	bf00      	nop
 80033b8:	e00a      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033ba:	bf00      	nop
 80033bc:	e008      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033be:	bf00      	nop
 80033c0:	e006      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033c2:	bf00      	nop
 80033c4:	e004      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033c6:	bf00      	nop
 80033c8:	e002      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80033ca:	bf00      	nop
 80033cc:	e000      	b.n	80033d0 <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
    }
  } 
  
  return status; 
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop

080033e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	e159      	b.n	80036b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033fc:	2201      	movs	r2, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	429a      	cmp	r2, r3
 8003416:	f040 8148 	bne.w	80036aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b01      	cmp	r3, #1
 8003424:	d005      	beq.n	8003432 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800342e:	2b02      	cmp	r3, #2
 8003430:	d130      	bne.n	8003494 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2203      	movs	r2, #3
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003468:	2201      	movs	r2, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 0201 	and.w	r2, r3, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b03      	cmp	r3, #3
 800349e:	d017      	beq.n	80034d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	2203      	movs	r2, #3
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d123      	bne.n	8003524 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	08da      	lsrs	r2, r3, #3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3208      	adds	r2, #8
 80034e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	220f      	movs	r2, #15
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	08da      	lsrs	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3208      	adds	r2, #8
 800351e:	69b9      	ldr	r1, [r7, #24]
 8003520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	2203      	movs	r2, #3
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0203 	and.w	r2, r3, #3
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80a2 	beq.w	80036aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	4b57      	ldr	r3, [pc, #348]	; (80036c8 <HAL_GPIO_Init+0x2e8>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	4a56      	ldr	r2, [pc, #344]	; (80036c8 <HAL_GPIO_Init+0x2e8>)
 8003570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003574:	6453      	str	r3, [r2, #68]	; 0x44
 8003576:	4b54      	ldr	r3, [pc, #336]	; (80036c8 <HAL_GPIO_Init+0x2e8>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003582:	4a52      	ldr	r2, [pc, #328]	; (80036cc <HAL_GPIO_Init+0x2ec>)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	3302      	adds	r3, #2
 800358a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	220f      	movs	r2, #15
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4013      	ands	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a49      	ldr	r2, [pc, #292]	; (80036d0 <HAL_GPIO_Init+0x2f0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d019      	beq.n	80035e2 <HAL_GPIO_Init+0x202>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a48      	ldr	r2, [pc, #288]	; (80036d4 <HAL_GPIO_Init+0x2f4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_GPIO_Init+0x1fe>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a47      	ldr	r2, [pc, #284]	; (80036d8 <HAL_GPIO_Init+0x2f8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00d      	beq.n	80035da <HAL_GPIO_Init+0x1fa>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a46      	ldr	r2, [pc, #280]	; (80036dc <HAL_GPIO_Init+0x2fc>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <HAL_GPIO_Init+0x1f6>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a45      	ldr	r2, [pc, #276]	; (80036e0 <HAL_GPIO_Init+0x300>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_GPIO_Init+0x1f2>
 80035ce:	2304      	movs	r3, #4
 80035d0:	e008      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035d2:	2307      	movs	r3, #7
 80035d4:	e006      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035d6:	2303      	movs	r3, #3
 80035d8:	e004      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035da:	2302      	movs	r3, #2
 80035dc:	e002      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035e2:	2300      	movs	r3, #0
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	f002 0203 	and.w	r2, r2, #3
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	4093      	lsls	r3, r2
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035f4:	4935      	ldr	r1, [pc, #212]	; (80036cc <HAL_GPIO_Init+0x2ec>)
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	3302      	adds	r3, #2
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003602:	4b38      	ldr	r3, [pc, #224]	; (80036e4 <HAL_GPIO_Init+0x304>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003626:	4a2f      	ldr	r2, [pc, #188]	; (80036e4 <HAL_GPIO_Init+0x304>)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800362c:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <HAL_GPIO_Init+0x304>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003650:	4a24      	ldr	r2, [pc, #144]	; (80036e4 <HAL_GPIO_Init+0x304>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003656:	4b23      	ldr	r3, [pc, #140]	; (80036e4 <HAL_GPIO_Init+0x304>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800367a:	4a1a      	ldr	r2, [pc, #104]	; (80036e4 <HAL_GPIO_Init+0x304>)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003680:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <HAL_GPIO_Init+0x304>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a4:	4a0f      	ldr	r2, [pc, #60]	; (80036e4 <HAL_GPIO_Init+0x304>)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3301      	adds	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b0f      	cmp	r3, #15
 80036b4:	f67f aea2 	bls.w	80033fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	3724      	adds	r7, #36	; 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40013800 	.word	0x40013800
 80036d0:	40020000 	.word	0x40020000
 80036d4:	40020400 	.word	0x40020400
 80036d8:	40020800 	.word	0x40020800
 80036dc:	40020c00 	.word	0x40020c00
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40013c00 	.word	0x40013c00

080036e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
 80036f4:	4613      	mov	r3, r2
 80036f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f8:	787b      	ldrb	r3, [r7, #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003704:	e003      	b.n	800370e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003706:	887b      	ldrh	r3, [r7, #2]
 8003708:	041a      	lsls	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	619a      	str	r2, [r3, #24]
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	460b      	mov	r3, r1
 8003724:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800372c:	887a      	ldrh	r2, [r7, #2]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4013      	ands	r3, r2
 8003732:	041a      	lsls	r2, r3, #16
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	43d9      	mvns	r1, r3
 8003738:	887b      	ldrh	r3, [r7, #2]
 800373a:	400b      	ands	r3, r1
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	619a      	str	r2, [r3, #24]
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800375a:	4b08      	ldr	r3, [pc, #32]	; (800377c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d006      	beq.n	8003774 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003766:	4a05      	ldr	r2, [pc, #20]	; (800377c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fd ff4c 	bl	800160c <HAL_GPIO_EXTI_Callback>
  }
}
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40013c00 	.word	0x40013c00

08003780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e264      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d075      	beq.n	800388a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800379e:	4ba3      	ldr	r3, [pc, #652]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d00c      	beq.n	80037c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037aa:	4ba0      	ldr	r3, [pc, #640]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d112      	bne.n	80037dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b6:	4b9d      	ldr	r3, [pc, #628]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c2:	d10b      	bne.n	80037dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c4:	4b99      	ldr	r3, [pc, #612]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d05b      	beq.n	8003888 <HAL_RCC_OscConfig+0x108>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d157      	bne.n	8003888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e23f      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e4:	d106      	bne.n	80037f4 <HAL_RCC_OscConfig+0x74>
 80037e6:	4b91      	ldr	r3, [pc, #580]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a90      	ldr	r2, [pc, #576]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e01d      	b.n	8003830 <HAL_RCC_OscConfig+0xb0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x98>
 80037fe:	4b8b      	ldr	r3, [pc, #556]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a8a      	ldr	r2, [pc, #552]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b88      	ldr	r3, [pc, #544]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a87      	ldr	r2, [pc, #540]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0xb0>
 8003818:	4b84      	ldr	r3, [pc, #528]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a83      	ldr	r2, [pc, #524]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b81      	ldr	r3, [pc, #516]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a80      	ldr	r2, [pc, #512]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fe fc96 	bl	8002168 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003840:	f7fe fc92 	bl	8002168 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e204      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b76      	ldr	r3, [pc, #472]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0xc0>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe fc82 	bl	8002168 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003868:	f7fe fc7e 	bl	8002168 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e1f0      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	4b6c      	ldr	r3, [pc, #432]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0xe8>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d063      	beq.n	800395e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003896:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a2:	4b62      	ldr	r3, [pc, #392]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d11c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ae:	4b5f      	ldr	r3, [pc, #380]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d116      	bne.n	80038e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ba:	4b5c      	ldr	r3, [pc, #368]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_RCC_OscConfig+0x152>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e1c4      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d2:	4b56      	ldr	r3, [pc, #344]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4952      	ldr	r1, [pc, #328]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	e03a      	b.n	800395e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f0:	4b4f      	ldr	r3, [pc, #316]	; (8003a30 <HAL_RCC_OscConfig+0x2b0>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fe fc37 	bl	8002168 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038fe:	f7fe fc33 	bl	8002168 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e1a5      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	4b46      	ldr	r3, [pc, #280]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391c:	4b43      	ldr	r3, [pc, #268]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4940      	ldr	r1, [pc, #256]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]
 8003930:	e015      	b.n	800395e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003932:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <HAL_RCC_OscConfig+0x2b0>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe fc16 	bl	8002168 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003940:	f7fe fc12 	bl	8002168 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e184      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d030      	beq.n	80039cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003972:	4b30      	ldr	r3, [pc, #192]	; (8003a34 <HAL_RCC_OscConfig+0x2b4>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fe fbf6 	bl	8002168 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003980:	f7fe fbf2 	bl	8002168 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e164      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	4b26      	ldr	r3, [pc, #152]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x200>
 800399e:	e015      	b.n	80039cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a0:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RCC_OscConfig+0x2b4>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a6:	f7fe fbdf 	bl	8002168 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ae:	f7fe fbdb 	bl	8002168 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e14d      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80039c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f0      	bne.n	80039ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80a0 	beq.w	8003b1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039de:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	4a0e      	ldr	r2, [pc, #56]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f8:	6413      	str	r3, [r2, #64]	; 0x40
 80039fa:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCC_OscConfig+0x2b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d121      	bne.n	8003a5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <HAL_RCC_OscConfig+0x2b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <HAL_RCC_OscConfig+0x2b8>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a22:	f7fe fba1 	bl	8002168 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	e011      	b.n	8003a4e <HAL_RCC_OscConfig+0x2ce>
 8003a2a:	bf00      	nop
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	42470000 	.word	0x42470000
 8003a34:	42470e80 	.word	0x42470e80
 8003a38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3c:	f7fe fb94 	bl	8002168 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e106      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4e:	4b85      	ldr	r3, [pc, #532]	; (8003c64 <HAL_RCC_OscConfig+0x4e4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d106      	bne.n	8003a70 <HAL_RCC_OscConfig+0x2f0>
 8003a62:	4b81      	ldr	r3, [pc, #516]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	4a80      	ldr	r2, [pc, #512]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6e:	e01c      	b.n	8003aaa <HAL_RCC_OscConfig+0x32a>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d10c      	bne.n	8003a92 <HAL_RCC_OscConfig+0x312>
 8003a78:	4b7b      	ldr	r3, [pc, #492]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	4a7a      	ldr	r2, [pc, #488]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003a7e:	f043 0304 	orr.w	r3, r3, #4
 8003a82:	6713      	str	r3, [r2, #112]	; 0x70
 8003a84:	4b78      	ldr	r3, [pc, #480]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	4a77      	ldr	r2, [pc, #476]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a90:	e00b      	b.n	8003aaa <HAL_RCC_OscConfig+0x32a>
 8003a92:	4b75      	ldr	r3, [pc, #468]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	4a74      	ldr	r2, [pc, #464]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9e:	4b72      	ldr	r3, [pc, #456]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	4a71      	ldr	r2, [pc, #452]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003aa4:	f023 0304 	bic.w	r3, r3, #4
 8003aa8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d015      	beq.n	8003ade <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab2:	f7fe fb59 	bl	8002168 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab8:	e00a      	b.n	8003ad0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aba:	f7fe fb55 	bl	8002168 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e0c5      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad0:	4b65      	ldr	r3, [pc, #404]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ee      	beq.n	8003aba <HAL_RCC_OscConfig+0x33a>
 8003adc:	e014      	b.n	8003b08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ade:	f7fe fb43 	bl	8002168 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fe fb3f 	bl	8002168 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e0af      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afc:	4b5a      	ldr	r3, [pc, #360]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ee      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0e:	4b56      	ldr	r3, [pc, #344]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	4a55      	ldr	r2, [pc, #340]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 809b 	beq.w	8003c5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b24:	4b50      	ldr	r3, [pc, #320]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d05c      	beq.n	8003bea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d141      	bne.n	8003bbc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b38:	4b4c      	ldr	r3, [pc, #304]	; (8003c6c <HAL_RCC_OscConfig+0x4ec>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7fe fb13 	bl	8002168 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b46:	f7fe fb0f 	bl	8002168 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e081      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b58:	4b43      	ldr	r3, [pc, #268]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	019b      	lsls	r3, r3, #6
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	041b      	lsls	r3, r3, #16
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	061b      	lsls	r3, r3, #24
 8003b88:	4937      	ldr	r1, [pc, #220]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b8e:	4b37      	ldr	r3, [pc, #220]	; (8003c6c <HAL_RCC_OscConfig+0x4ec>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fe fae8 	bl	8002168 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fe fae4 	bl	8002168 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e056      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bae:	4b2e      	ldr	r3, [pc, #184]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x41c>
 8003bba:	e04e      	b.n	8003c5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	; (8003c6c <HAL_RCC_OscConfig+0x4ec>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc2:	f7fe fad1 	bl	8002168 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bca:	f7fe facd 	bl	8002168 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e03f      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bdc:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f0      	bne.n	8003bca <HAL_RCC_OscConfig+0x44a>
 8003be8:	e037      	b.n	8003c5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e032      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bf6:	4b1c      	ldr	r3, [pc, #112]	; (8003c68 <HAL_RCC_OscConfig+0x4e8>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d028      	beq.n	8003c56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d121      	bne.n	8003c56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d11a      	bne.n	8003c56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c26:	4013      	ands	r3, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d111      	bne.n	8003c56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d001      	beq.n	8003c5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40007000 	.word	0x40007000
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	42470060 	.word	0x42470060

08003c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0cc      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c84:	4b68      	ldr	r3, [pc, #416]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d90c      	bls.n	8003cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b65      	ldr	r3, [pc, #404]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b63      	ldr	r3, [pc, #396]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0b8      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d020      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc4:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a58      	ldr	r2, [pc, #352]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cdc:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a52      	ldr	r2, [pc, #328]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce8:	4b50      	ldr	r3, [pc, #320]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	494d      	ldr	r1, [pc, #308]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d044      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	4b47      	ldr	r3, [pc, #284]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d119      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e07f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d003      	beq.n	8003d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	4b3f      	ldr	r3, [pc, #252]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e06f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3e:	4b3b      	ldr	r3, [pc, #236]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e067      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d4e:	4b37      	ldr	r3, [pc, #220]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f023 0203 	bic.w	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4934      	ldr	r1, [pc, #208]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d60:	f7fe fa02 	bl	8002168 <HAL_GetTick>
 8003d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d68:	f7fe f9fe 	bl	8002168 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e04f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 020c 	and.w	r2, r3, #12
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d1eb      	bne.n	8003d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d20c      	bcs.n	8003db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e032      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc4:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4916      	ldr	r1, [pc, #88]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	490e      	ldr	r1, [pc, #56]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003df6:	f000 f821 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	490a      	ldr	r1, [pc, #40]	; (8003e30 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	5ccb      	ldrb	r3, [r1, r3]
 8003e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe f962 	bl	80020e0 <HAL_InitTick>

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023c00 	.word	0x40023c00
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	0800b4c0 	.word	0x0800b4c0
 8003e34:	20000004 	.word	0x20000004
 8003e38:	20000008 	.word	0x20000008

08003e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e3c:	b5b0      	push	{r4, r5, r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e42:	2100      	movs	r1, #0
 8003e44:	6079      	str	r1, [r7, #4]
 8003e46:	2100      	movs	r1, #0
 8003e48:	60f9      	str	r1, [r7, #12]
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e4e:	2100      	movs	r1, #0
 8003e50:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e52:	4952      	ldr	r1, [pc, #328]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e54:	6889      	ldr	r1, [r1, #8]
 8003e56:	f001 010c 	and.w	r1, r1, #12
 8003e5a:	2908      	cmp	r1, #8
 8003e5c:	d00d      	beq.n	8003e7a <HAL_RCC_GetSysClockFreq+0x3e>
 8003e5e:	2908      	cmp	r1, #8
 8003e60:	f200 8094 	bhi.w	8003f8c <HAL_RCC_GetSysClockFreq+0x150>
 8003e64:	2900      	cmp	r1, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_RCC_GetSysClockFreq+0x32>
 8003e68:	2904      	cmp	r1, #4
 8003e6a:	d003      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x38>
 8003e6c:	e08e      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e6e:	4b4c      	ldr	r3, [pc, #304]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e70:	60bb      	str	r3, [r7, #8]
       break;
 8003e72:	e08e      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e74:	4b4b      	ldr	r3, [pc, #300]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e76:	60bb      	str	r3, [r7, #8]
      break;
 8003e78:	e08b      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e7a:	4948      	ldr	r1, [pc, #288]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e7c:	6849      	ldr	r1, [r1, #4]
 8003e7e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003e82:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e84:	4945      	ldr	r1, [pc, #276]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e86:	6849      	ldr	r1, [r1, #4]
 8003e88:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003e8c:	2900      	cmp	r1, #0
 8003e8e:	d024      	beq.n	8003eda <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e90:	4942      	ldr	r1, [pc, #264]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e92:	6849      	ldr	r1, [r1, #4]
 8003e94:	0989      	lsrs	r1, r1, #6
 8003e96:	4608      	mov	r0, r1
 8003e98:	f04f 0100 	mov.w	r1, #0
 8003e9c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003ea0:	f04f 0500 	mov.w	r5, #0
 8003ea4:	ea00 0204 	and.w	r2, r0, r4
 8003ea8:	ea01 0305 	and.w	r3, r1, r5
 8003eac:	493d      	ldr	r1, [pc, #244]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003eae:	fb01 f003 	mul.w	r0, r1, r3
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	fb01 f102 	mul.w	r1, r1, r2
 8003eb8:	1844      	adds	r4, r0, r1
 8003eba:	493a      	ldr	r1, [pc, #232]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ebc:	fba2 0101 	umull	r0, r1, r2, r1
 8003ec0:	1863      	adds	r3, r4, r1
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	f7fc f9e0 	bl	8000290 <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e04a      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eda:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	099b      	lsrs	r3, r3, #6
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003eea:	f04f 0100 	mov.w	r1, #0
 8003eee:	ea02 0400 	and.w	r4, r2, r0
 8003ef2:	ea03 0501 	and.w	r5, r3, r1
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	4629      	mov	r1, r5
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	014b      	lsls	r3, r1, #5
 8003f04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f08:	0142      	lsls	r2, r0, #5
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	1b00      	subs	r0, r0, r4
 8003f10:	eb61 0105 	sbc.w	r1, r1, r5
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	018b      	lsls	r3, r1, #6
 8003f1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f22:	0182      	lsls	r2, r0, #6
 8003f24:	1a12      	subs	r2, r2, r0
 8003f26:	eb63 0301 	sbc.w	r3, r3, r1
 8003f2a:	f04f 0000 	mov.w	r0, #0
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	00d9      	lsls	r1, r3, #3
 8003f34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f38:	00d0      	lsls	r0, r2, #3
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	1912      	adds	r2, r2, r4
 8003f40:	eb45 0303 	adc.w	r3, r5, r3
 8003f44:	f04f 0000 	mov.w	r0, #0
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	0299      	lsls	r1, r3, #10
 8003f4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f52:	0290      	lsls	r0, r2, #10
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	f7fc f994 	bl	8000290 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	60bb      	str	r3, [r7, #8]
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f8e:	60bb      	str	r3, [r7, #8]
      break;
 8003f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f92:	68bb      	ldr	r3, [r7, #8]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	00f42400 	.word	0x00f42400
 8003fa4:	017d7840 	.word	0x017d7840

08003fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000004 	.word	0x20000004

08003fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fc4:	f7ff fff0 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	0a9b      	lsrs	r3, r3, #10
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	4903      	ldr	r1, [pc, #12]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd6:	5ccb      	ldrb	r3, [r1, r3]
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	0800b4d0 	.word	0x0800b4d0

08003fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fec:	f7ff ffdc 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	0b5b      	lsrs	r3, r3, #13
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	4903      	ldr	r1, [pc, #12]	; (800400c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40023800 	.word	0x40023800
 800400c:	0800b4d0 	.word	0x0800b4d0

08004010 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d105      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004034:	2b00      	cmp	r3, #0
 8004036:	d038      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004038:	4b68      	ldr	r3, [pc, #416]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800403e:	f7fe f893 	bl	8002168 <HAL_GetTick>
 8004042:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004046:	f7fe f88f 	bl	8002168 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e0bd      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004058:	4b61      	ldr	r3, [pc, #388]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f0      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	019b      	lsls	r3, r3, #6
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	071b      	lsls	r3, r3, #28
 8004076:	495a      	ldr	r1, [pc, #360]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800407e:	4b57      	ldr	r3, [pc, #348]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004084:	f7fe f870 	bl	8002168 <HAL_GetTick>
 8004088:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800408c:	f7fe f86c 	bl	8002168 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e09a      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800409e:	4b50      	ldr	r3, [pc, #320]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 8083 	beq.w	80041be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	4b48      	ldr	r3, [pc, #288]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	4a47      	ldr	r2, [pc, #284]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c6:	6413      	str	r3, [r2, #64]	; 0x40
 80040c8:	4b45      	ldr	r3, [pc, #276]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80040d4:	4b43      	ldr	r3, [pc, #268]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a42      	ldr	r2, [pc, #264]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040de:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040e0:	f7fe f842 	bl	8002168 <HAL_GetTick>
 80040e4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040e8:	f7fe f83e 	bl	8002168 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e06c      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040fa:	4b3a      	ldr	r3, [pc, #232]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004106:	4b36      	ldr	r3, [pc, #216]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d02f      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	429a      	cmp	r2, r3
 8004122:	d028      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004124:	4b2e      	ldr	r3, [pc, #184]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800412e:	4b2e      	ldr	r3, [pc, #184]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004130:	2201      	movs	r2, #1
 8004132:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004134:	4b2c      	ldr	r3, [pc, #176]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800413a:	4a29      	ldr	r2, [pc, #164]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004140:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b01      	cmp	r3, #1
 800414a:	d114      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800414c:	f7fe f80c 	bl	8002168 <HAL_GetTick>
 8004150:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004152:	e00a      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004154:	f7fe f808 	bl	8002168 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e034      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416a:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0ee      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004182:	d10d      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004184:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004198:	4911      	ldr	r1, [pc, #68]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]
 800419e:	e005      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80041a0:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a0e      	ldr	r2, [pc, #56]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041aa:	6093      	str	r3, [r2, #8]
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b8:	4909      	ldr	r1, [pc, #36]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	7d1a      	ldrb	r2, [r3, #20]
 80041ce:	4b07      	ldr	r3, [pc, #28]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80041d0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	42470068 	.word	0x42470068
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40007000 	.word	0x40007000
 80041e8:	42470e40 	.word	0x42470e40
 80041ec:	424711e0 	.word	0x424711e0

080041f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e083      	b.n	800430a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	7f5b      	ldrb	r3, [r3, #29]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d105      	bne.n	8004218 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fd fca6 	bl	8001b64 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	22ca      	movs	r2, #202	; 0xca
 8004224:	625a      	str	r2, [r3, #36]	; 0x24
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2253      	movs	r2, #83	; 0x53
 800422c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fbc0 	bl	80049b4 <RTC_EnterInitMode>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	22ff      	movs	r2, #255	; 0xff
 8004240:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2204      	movs	r2, #4
 8004246:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e05e      	b.n	800430a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800425a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800425e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6899      	ldr	r1, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68d2      	ldr	r2, [r2, #12]
 8004286:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6919      	ldr	r1, [r3, #16]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	041a      	lsls	r2, r3, #16
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042aa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10e      	bne.n	80042d8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fb52 	bl	8004964 <HAL_RTC_WaitForSynchro>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	22ff      	movs	r2, #255	; 0xff
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2204      	movs	r2, #4
 80042d2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e018      	b.n	800430a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	22ff      	movs	r2, #255	; 0xff
 8004300:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004308:	2300      	movs	r3, #0
  }
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004312:	b590      	push	{r4, r7, lr}
 8004314:	b087      	sub	sp, #28
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	7f1b      	ldrb	r3, [r3, #28]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_RTC_SetTime+0x1c>
 800432a:	2302      	movs	r3, #2
 800432c:	e0aa      	b.n	8004484 <HAL_RTC_SetTime+0x172>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2202      	movs	r2, #2
 8004338:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d126      	bne.n	800438e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2200      	movs	r2, #0
 8004352:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fb57 	bl	8004a0c <RTC_ByteToBcd2>
 800435e:	4603      	mov	r3, r0
 8004360:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	785b      	ldrb	r3, [r3, #1]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fb50 	bl	8004a0c <RTC_ByteToBcd2>
 800436c:	4603      	mov	r3, r0
 800436e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004370:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	789b      	ldrb	r3, [r3, #2]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fb48 	bl	8004a0c <RTC_ByteToBcd2>
 800437c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800437e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	78db      	ldrb	r3, [r3, #3]
 8004386:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	e018      	b.n	80043c0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2200      	movs	r2, #0
 80043a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80043ae:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80043b4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	78db      	ldrb	r3, [r3, #3]
 80043ba:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	22ca      	movs	r2, #202	; 0xca
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2253      	movs	r2, #83	; 0x53
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 faef 	bl	80049b4 <RTC_EnterInitMode>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00b      	beq.n	80043f4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	22ff      	movs	r2, #255	; 0xff
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2204      	movs	r2, #4
 80043e8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e047      	b.n	8004484 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80043fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004402:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004412:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6899      	ldr	r1, [r3, #8]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	431a      	orrs	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800443a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d111      	bne.n	800446e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fa8a 	bl	8004964 <HAL_RTC_WaitForSynchro>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	22ff      	movs	r2, #255	; 0xff
 800445c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2204      	movs	r2, #4
 8004462:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e00a      	b.n	8004484 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	22ff      	movs	r2, #255	; 0xff
 8004474:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004482:	2300      	movs	r3, #0
  }
}
 8004484:	4618      	mov	r0, r3
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	bd90      	pop	{r4, r7, pc}

0800448c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80044be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	0c1b      	lsrs	r3, r3, #16
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	0c1b      	lsrs	r3, r3, #16
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d11a      	bne.n	800453e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fa9b 	bl	8004a48 <RTC_Bcd2ToByte>
 8004512:	4603      	mov	r3, r0
 8004514:	461a      	mov	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	785b      	ldrb	r3, [r3, #1]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fa92 	bl	8004a48 <RTC_Bcd2ToByte>
 8004524:	4603      	mov	r3, r0
 8004526:	461a      	mov	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	789b      	ldrb	r3, [r3, #2]
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fa89 	bl	8004a48 <RTC_Bcd2ToByte>
 8004536:	4603      	mov	r3, r0
 8004538:	461a      	mov	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004548:	b590      	push	{r4, r7, lr}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	7f1b      	ldrb	r3, [r3, #28]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_RTC_SetDate+0x1c>
 8004560:	2302      	movs	r3, #2
 8004562:	e094      	b.n	800468e <HAL_RTC_SetDate+0x146>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2202      	movs	r2, #2
 800456e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10e      	bne.n	8004594 <HAL_RTC_SetDate+0x4c>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	785b      	ldrb	r3, [r3, #1]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	f023 0310 	bic.w	r3, r3, #16
 800458a:	b2db      	uxtb	r3, r3
 800458c:	330a      	adds	r3, #10
 800458e:	b2da      	uxtb	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d11c      	bne.n	80045d4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	78db      	ldrb	r3, [r3, #3]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fa34 	bl	8004a0c <RTC_ByteToBcd2>
 80045a4:	4603      	mov	r3, r0
 80045a6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fa2d 	bl	8004a0c <RTC_ByteToBcd2>
 80045b2:	4603      	mov	r3, r0
 80045b4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80045b6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	789b      	ldrb	r3, [r3, #2]
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fa25 	bl	8004a0c <RTC_ByteToBcd2>
 80045c2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80045c4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	e00e      	b.n	80045f2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	78db      	ldrb	r3, [r3, #3]
 80045d8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	785b      	ldrb	r3, [r3, #1]
 80045de:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80045e0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80045e6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	22ca      	movs	r2, #202	; 0xca
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2253      	movs	r2, #83	; 0x53
 8004600:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f9d6 	bl	80049b4 <RTC_EnterInitMode>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	22ff      	movs	r2, #255	; 0xff
 8004614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2204      	movs	r2, #4
 800461a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e033      	b.n	800468e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004630:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004634:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004644:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d111      	bne.n	8004678 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f985 	bl	8004964 <HAL_RTC_WaitForSynchro>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00b      	beq.n	8004678 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	22ff      	movs	r2, #255	; 0xff
 8004666:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2204      	movs	r2, #4
 800466c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e00a      	b.n	800468e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	22ff      	movs	r2, #255	; 0xff
 800467e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2201      	movs	r2, #1
 8004684:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800468c:	2300      	movs	r3, #0
  }
}
 800468e:	4618      	mov	r0, r3
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	bd90      	pop	{r4, r7, pc}

08004696 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b086      	sub	sp, #24
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046b4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	0a1b      	lsrs	r3, r3, #8
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f003 031f 	and.w	r3, r3, #31
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	0b5b      	lsrs	r3, r3, #13
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d11a      	bne.n	800472a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	78db      	ldrb	r3, [r3, #3]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 f9a5 	bl	8004a48 <RTC_Bcd2ToByte>
 80046fe:	4603      	mov	r3, r0
 8004700:	461a      	mov	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	785b      	ldrb	r3, [r3, #1]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f99c 	bl	8004a48 <RTC_Bcd2ToByte>
 8004710:	4603      	mov	r3, r0
 8004712:	461a      	mov	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	789b      	ldrb	r3, [r3, #2]
 800471c:	4618      	mov	r0, r3
 800471e:	f000 f993 	bl	8004a48 <RTC_Bcd2ToByte>
 8004722:	4603      	mov	r3, r0
 8004724:	461a      	mov	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004734:	b590      	push	{r4, r7, lr}
 8004736:	b089      	sub	sp, #36	; 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	7f1b      	ldrb	r3, [r3, #28]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_RTC_SetAlarm+0x24>
 8004754:	2302      	movs	r3, #2
 8004756:	e101      	b.n	800495c <HAL_RTC_SetAlarm+0x228>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2202      	movs	r2, #2
 8004762:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d137      	bne.n	80047da <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2200      	movs	r2, #0
 800477c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f942 	bl	8004a0c <RTC_ByteToBcd2>
 8004788:	4603      	mov	r3, r0
 800478a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 f93b 	bl	8004a0c <RTC_ByteToBcd2>
 8004796:	4603      	mov	r3, r0
 8004798:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800479a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	789b      	ldrb	r3, [r3, #2]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 f933 	bl	8004a0c <RTC_ByteToBcd2>
 80047a6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80047a8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	78db      	ldrb	r3, [r3, #3]
 80047b0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80047b2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 f925 	bl	8004a0c <RTC_ByteToBcd2>
 80047c2:	4603      	mov	r3, r0
 80047c4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80047c6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80047ce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	e023      	b.n	8004822 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2200      	movs	r2, #0
 80047ec:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	785b      	ldrb	r3, [r3, #1]
 80047f8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80047fa:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004800:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	78db      	ldrb	r3, [r3, #3]
 8004806:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004808:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004810:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004812:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004818:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800481e:	4313      	orrs	r3, r2
 8004820:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	22ca      	movs	r2, #202	; 0xca
 8004834:	625a      	str	r2, [r3, #36]	; 0x24
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2253      	movs	r2, #83	; 0x53
 800483c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004846:	d13f      	bne.n	80048c8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004856:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004866:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004868:	f7fd fc7e 	bl	8002168 <HAL_GetTick>
 800486c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800486e:	e013      	b.n	8004898 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004870:	f7fd fc7a 	bl	8002168 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800487e:	d90b      	bls.n	8004898 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	22ff      	movs	r2, #255	; 0xff
 8004886:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2203      	movs	r2, #3
 800488c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e061      	b.n	800495c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0e4      	beq.n	8004870 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c4:	609a      	str	r2, [r3, #8]
 80048c6:	e03e      	b.n	8004946 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048d6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048e6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048e8:	f7fd fc3e 	bl	8002168 <HAL_GetTick>
 80048ec:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80048ee:	e013      	b.n	8004918 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80048f0:	f7fd fc3a 	bl	8002168 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048fe:	d90b      	bls.n	8004918 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	22ff      	movs	r2, #255	; 0xff
 8004906:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2203      	movs	r2, #3
 800490c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e021      	b.n	800495c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0e4      	beq.n	80048f0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004944:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	22ff      	movs	r2, #255	; 0xff
 800494c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3724      	adds	r7, #36	; 0x24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd90      	pop	{r4, r7, pc}

08004964 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800497e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004980:	f7fd fbf2 	bl	8002168 <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004986:	e009      	b.n	800499c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004988:	f7fd fbee 	bl	8002168 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004996:	d901      	bls.n	800499c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e007      	b.n	80049ac <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0ee      	beq.n	8004988 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d119      	bne.n	8004a02 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f04f 32ff 	mov.w	r2, #4294967295
 80049d6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049d8:	f7fd fbc6 	bl	8002168 <HAL_GetTick>
 80049dc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80049de:	e009      	b.n	80049f4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80049e0:	f7fd fbc2 	bl	8002168 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ee:	d901      	bls.n	80049f4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e007      	b.n	8004a04 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0ee      	beq.n	80049e0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004a1a:	e005      	b.n	8004a28 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	3b0a      	subs	r3, #10
 8004a26:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	2b09      	cmp	r3, #9
 8004a2c:	d8f6      	bhi.n	8004a1c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	b2db      	uxtb	r3, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	4413      	add	r3, r2
 8004a76:	b2db      	uxtb	r3, r3
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3350      	adds	r3, #80	; 0x50
 8004a9a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	601a      	str	r2, [r3, #0]
}
 8004aac:	bf00      	nop
 8004aae:	371c      	adds	r7, #28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3350      	adds	r3, #80	; 0x50
 8004acc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e07b      	b.n	8004bf2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d108      	bne.n	8004b14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b0a:	d009      	beq.n	8004b20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	61da      	str	r2, [r3, #28]
 8004b12:	e005      	b.n	8004b20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fd f83e 	bl	8001bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba4:	ea42 0103 	orr.w	r1, r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	0c1b      	lsrs	r3, r3, #16
 8004bbe:	f003 0104 	and.w	r1, r3, #4
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	f003 0210 	and.w	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004be0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b08c      	sub	sp, #48	; 0x30
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	60f8      	str	r0, [r7, #12]
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	607a      	str	r2, [r7, #4]
 8004c06:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_SPI_TransmitReceive+0x26>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e18a      	b.n	8004f36 <HAL_SPI_TransmitReceive+0x33c>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c28:	f7fd fa9e 	bl	8002168 <HAL_GetTick>
 8004c2c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c3e:	887b      	ldrh	r3, [r7, #2]
 8004c40:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d00f      	beq.n	8004c6a <HAL_SPI_TransmitReceive+0x70>
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c50:	d107      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d103      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x68>
 8004c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d003      	beq.n	8004c6a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c62:	2302      	movs	r3, #2
 8004c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c68:	e15b      	b.n	8004f22 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_SPI_TransmitReceive+0x82>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <HAL_SPI_TransmitReceive+0x82>
 8004c76:	887b      	ldrh	r3, [r7, #2]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d103      	bne.n	8004c84 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c82:	e14e      	b.n	8004f22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d003      	beq.n	8004c98 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2205      	movs	r2, #5
 8004c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	887a      	ldrh	r2, [r7, #2]
 8004ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	887a      	ldrh	r2, [r7, #2]
 8004cae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	887a      	ldrh	r2, [r7, #2]
 8004cba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	887a      	ldrh	r2, [r7, #2]
 8004cc0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d007      	beq.n	8004cec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf4:	d178      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_SPI_TransmitReceive+0x10a>
 8004cfe:	8b7b      	ldrh	r3, [r7, #26]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d166      	bne.n	8004dd2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	881a      	ldrh	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	1c9a      	adds	r2, r3, #2
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d28:	e053      	b.n	8004dd2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d11b      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x176>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d016      	beq.n	8004d70 <HAL_SPI_TransmitReceive+0x176>
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d113      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	1c9a      	adds	r2, r3, #2
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d119      	bne.n	8004db2 <HAL_SPI_TransmitReceive+0x1b8>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d014      	beq.n	8004db2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	b292      	uxth	r2, r2
 8004d94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	1c9a      	adds	r2, r3, #2
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dae:	2301      	movs	r3, #1
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004db2:	f7fd f9d9 	bl	8002168 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d807      	bhi.n	8004dd2 <HAL_SPI_TransmitReceive+0x1d8>
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d003      	beq.n	8004dd2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004dd0:	e0a7      	b.n	8004f22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1a6      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x130>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1a1      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x130>
 8004de6:	e07c      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_SPI_TransmitReceive+0x1fc>
 8004df0:	8b7b      	ldrh	r3, [r7, #26]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d16b      	bne.n	8004ece <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	7812      	ldrb	r2, [r2, #0]
 8004e02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e1c:	e057      	b.n	8004ece <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d11c      	bne.n	8004e66 <HAL_SPI_TransmitReceive+0x26c>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d017      	beq.n	8004e66 <HAL_SPI_TransmitReceive+0x26c>
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d114      	bne.n	8004e66 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	7812      	ldrb	r2, [r2, #0]
 8004e48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d119      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x2ae>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d014      	beq.n	8004ea8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ea8:	f7fd f95e 	bl	8002168 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d803      	bhi.n	8004ec0 <HAL_SPI_TransmitReceive+0x2c6>
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	d102      	bne.n	8004ec6 <HAL_SPI_TransmitReceive+0x2cc>
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d103      	bne.n	8004ece <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ecc:	e029      	b.n	8004f22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1a2      	bne.n	8004e1e <HAL_SPI_TransmitReceive+0x224>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d19d      	bne.n	8004e1e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f8b2 	bl	8005050 <SPI_EndRxTxTransaction>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d006      	beq.n	8004f00 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004efe:	e010      	b.n	8004f22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	e000      	b.n	8004f22 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3730      	adds	r7, #48	; 0x30
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f50:	f7fd f90a 	bl	8002168 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f60:	f7fd f902 	bl	8002168 <HAL_GetTick>
 8004f64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f66:	4b39      	ldr	r3, [pc, #228]	; (800504c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	015b      	lsls	r3, r3, #5
 8004f6c:	0d1b      	lsrs	r3, r3, #20
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	fb02 f303 	mul.w	r3, r2, r3
 8004f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f76:	e054      	b.n	8005022 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	d050      	beq.n	8005022 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f80:	f7fd f8f2 	bl	8002168 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d902      	bls.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d13d      	bne.n	8005012 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fae:	d111      	bne.n	8004fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb8:	d004      	beq.n	8004fc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc2:	d107      	bne.n	8004fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fdc:	d10f      	bne.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ffc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e017      	b.n	8005042 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	3b01      	subs	r3, #1
 8005020:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4013      	ands	r3, r2
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	429a      	cmp	r2, r3
 8005030:	bf0c      	ite	eq
 8005032:	2301      	moveq	r3, #1
 8005034:	2300      	movne	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	429a      	cmp	r2, r3
 800503e:	d19b      	bne.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000004 	.word	0x20000004

08005050 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800505c:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <SPI_EndRxTxTransaction+0x7c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <SPI_EndRxTxTransaction+0x80>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	0d5b      	lsrs	r3, r3, #21
 8005068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800506c:	fb02 f303 	mul.w	r3, r2, r3
 8005070:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800507a:	d112      	bne.n	80050a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2200      	movs	r2, #0
 8005084:	2180      	movs	r1, #128	; 0x80
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff ff5a 	bl	8004f40 <SPI_WaitFlagStateUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d016      	beq.n	80050c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	f043 0220 	orr.w	r2, r3, #32
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e00f      	b.n	80050c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b8:	2b80      	cmp	r3, #128	; 0x80
 80050ba:	d0f2      	beq.n	80050a2 <SPI_EndRxTxTransaction+0x52>
 80050bc:	e000      	b.n	80050c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80050be:	bf00      	nop
  }

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000004 	.word	0x20000004
 80050d0:	165e9f81 	.word	0x165e9f81

080050d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e041      	b.n	800516a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fc fdc6 	bl	8001c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3304      	adds	r3, #4
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f000 fc4e 	bl	80059b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	d001      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e044      	b.n	8005216 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1e      	ldr	r2, [pc, #120]	; (8005224 <HAL_TIM_Base_Start_IT+0xb0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d018      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x6c>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b6:	d013      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x6c>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1a      	ldr	r2, [pc, #104]	; (8005228 <HAL_TIM_Base_Start_IT+0xb4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00e      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x6c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a19      	ldr	r2, [pc, #100]	; (800522c <HAL_TIM_Base_Start_IT+0xb8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d009      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x6c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a17      	ldr	r2, [pc, #92]	; (8005230 <HAL_TIM_Base_Start_IT+0xbc>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x6c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a16      	ldr	r2, [pc, #88]	; (8005234 <HAL_TIM_Base_Start_IT+0xc0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d111      	bne.n	8005204 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b06      	cmp	r3, #6
 80051f0:	d010      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0201 	orr.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005202:	e007      	b.n	8005214 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40010000 	.word	0x40010000
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40014000 	.word	0x40014000

08005238 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e041      	b.n	80052ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fc fd7c 	bl	8001d5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f000 fb9c 	bl	80059b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d109      	bne.n	80052fc <HAL_TIM_PWM_Start+0x24>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	bf14      	ite	ne
 80052f4:	2301      	movne	r3, #1
 80052f6:	2300      	moveq	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	e022      	b.n	8005342 <HAL_TIM_PWM_Start+0x6a>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d109      	bne.n	8005316 <HAL_TIM_PWM_Start+0x3e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b01      	cmp	r3, #1
 800530c:	bf14      	ite	ne
 800530e:	2301      	movne	r3, #1
 8005310:	2300      	moveq	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	e015      	b.n	8005342 <HAL_TIM_PWM_Start+0x6a>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d109      	bne.n	8005330 <HAL_TIM_PWM_Start+0x58>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	bf14      	ite	ne
 8005328:	2301      	movne	r3, #1
 800532a:	2300      	moveq	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	e008      	b.n	8005342 <HAL_TIM_PWM_Start+0x6a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	bf14      	ite	ne
 800533c:	2301      	movne	r3, #1
 800533e:	2300      	moveq	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e068      	b.n	800541c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d104      	bne.n	800535a <HAL_TIM_PWM_Start+0x82>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005358:	e013      	b.n	8005382 <HAL_TIM_PWM_Start+0xaa>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b04      	cmp	r3, #4
 800535e:	d104      	bne.n	800536a <HAL_TIM_PWM_Start+0x92>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005368:	e00b      	b.n	8005382 <HAL_TIM_PWM_Start+0xaa>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d104      	bne.n	800537a <HAL_TIM_PWM_Start+0xa2>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005378:	e003      	b.n	8005382 <HAL_TIM_PWM_Start+0xaa>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2201      	movs	r2, #1
 8005388:	6839      	ldr	r1, [r7, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fdb8 	bl	8005f00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a23      	ldr	r2, [pc, #140]	; (8005424 <HAL_TIM_PWM_Start+0x14c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d107      	bne.n	80053aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1d      	ldr	r2, [pc, #116]	; (8005424 <HAL_TIM_PWM_Start+0x14c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d018      	beq.n	80053e6 <HAL_TIM_PWM_Start+0x10e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d013      	beq.n	80053e6 <HAL_TIM_PWM_Start+0x10e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a19      	ldr	r2, [pc, #100]	; (8005428 <HAL_TIM_PWM_Start+0x150>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00e      	beq.n	80053e6 <HAL_TIM_PWM_Start+0x10e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a17      	ldr	r2, [pc, #92]	; (800542c <HAL_TIM_PWM_Start+0x154>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d009      	beq.n	80053e6 <HAL_TIM_PWM_Start+0x10e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a16      	ldr	r2, [pc, #88]	; (8005430 <HAL_TIM_PWM_Start+0x158>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_TIM_PWM_Start+0x10e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a14      	ldr	r2, [pc, #80]	; (8005434 <HAL_TIM_PWM_Start+0x15c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d111      	bne.n	800540a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b06      	cmp	r3, #6
 80053f6:	d010      	beq.n	800541a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005408:	e007      	b.n	800541a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40010000 	.word	0x40010000
 8005428:	40000400 	.word	0x40000400
 800542c:	40000800 	.word	0x40000800
 8005430:	40000c00 	.word	0x40000c00
 8005434:	40014000 	.word	0x40014000

08005438 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e097      	b.n	800557c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d106      	bne.n	8005466 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7fc fc33 	bl	8001ccc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2202      	movs	r2, #2
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6812      	ldr	r2, [r2, #0]
 8005478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800547c:	f023 0307 	bic.w	r3, r3, #7
 8005480:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f000 fa91 	bl	80059b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ba:	f023 0303 	bic.w	r3, r3, #3
 80054be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	4313      	orrs	r3, r2
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80054d8:	f023 030c 	bic.w	r3, r3, #12
 80054dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	4313      	orrs	r3, r2
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	011a      	lsls	r2, r3, #4
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	031b      	lsls	r3, r3, #12
 8005508:	4313      	orrs	r3, r2
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005516:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800551e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	4313      	orrs	r3, r2
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005594:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800559c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d110      	bne.n	80055d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d102      	bne.n	80055c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80055ba:	7b7b      	ldrb	r3, [r7, #13]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d001      	beq.n	80055c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e069      	b.n	8005698 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055d4:	e031      	b.n	800563a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d110      	bne.n	80055fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055dc:	7bbb      	ldrb	r3, [r7, #14]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d102      	bne.n	80055e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055e2:	7b3b      	ldrb	r3, [r7, #12]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d001      	beq.n	80055ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e055      	b.n	8005698 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055fc:	e01d      	b.n	800563a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d108      	bne.n	8005616 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005604:	7bbb      	ldrb	r3, [r7, #14]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d105      	bne.n	8005616 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800560a:	7b7b      	ldrb	r3, [r7, #13]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d102      	bne.n	8005616 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005610:	7b3b      	ldrb	r3, [r7, #12]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d001      	beq.n	800561a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e03e      	b.n	8005698 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2202      	movs	r2, #2
 800561e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2202      	movs	r2, #2
 800562e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2202      	movs	r2, #2
 8005636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <HAL_TIM_Encoder_Start+0xc4>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b04      	cmp	r3, #4
 8005644:	d008      	beq.n	8005658 <HAL_TIM_Encoder_Start+0xd4>
 8005646:	e00f      	b.n	8005668 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2201      	movs	r2, #1
 800564e:	2100      	movs	r1, #0
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fc55 	bl	8005f00 <TIM_CCxChannelCmd>
      break;
 8005656:	e016      	b.n	8005686 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2201      	movs	r2, #1
 800565e:	2104      	movs	r1, #4
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fc4d 	bl	8005f00 <TIM_CCxChannelCmd>
      break;
 8005666:	e00e      	b.n	8005686 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2201      	movs	r2, #1
 800566e:	2100      	movs	r1, #0
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fc45 	bl	8005f00 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2201      	movs	r2, #1
 800567c:	2104      	movs	r1, #4
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fc3e 	bl	8005f00 <TIM_CCxChannelCmd>
      break;
 8005684:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0201 	orr.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e0ae      	b.n	800581c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b0c      	cmp	r3, #12
 80056ca:	f200 809f 	bhi.w	800580c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056ce:	a201      	add	r2, pc, #4	; (adr r2, 80056d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d4:	08005709 	.word	0x08005709
 80056d8:	0800580d 	.word	0x0800580d
 80056dc:	0800580d 	.word	0x0800580d
 80056e0:	0800580d 	.word	0x0800580d
 80056e4:	08005749 	.word	0x08005749
 80056e8:	0800580d 	.word	0x0800580d
 80056ec:	0800580d 	.word	0x0800580d
 80056f0:	0800580d 	.word	0x0800580d
 80056f4:	0800578b 	.word	0x0800578b
 80056f8:	0800580d 	.word	0x0800580d
 80056fc:	0800580d 	.word	0x0800580d
 8005700:	0800580d 	.word	0x0800580d
 8005704:	080057cb 	.word	0x080057cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 f9d0 	bl	8005ab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0208 	orr.w	r2, r2, #8
 8005722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0204 	bic.w	r2, r2, #4
 8005732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6999      	ldr	r1, [r3, #24]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	619a      	str	r2, [r3, #24]
      break;
 8005746:	e064      	b.n	8005812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fa16 	bl	8005b80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6999      	ldr	r1, [r3, #24]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	021a      	lsls	r2, r3, #8
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	619a      	str	r2, [r3, #24]
      break;
 8005788:	e043      	b.n	8005812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fa61 	bl	8005c58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0208 	orr.w	r2, r2, #8
 80057a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0204 	bic.w	r2, r2, #4
 80057b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69d9      	ldr	r1, [r3, #28]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	61da      	str	r2, [r3, #28]
      break;
 80057c8:	e023      	b.n	8005812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68b9      	ldr	r1, [r7, #8]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 faab 	bl	8005d2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69d9      	ldr	r1, [r3, #28]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	021a      	lsls	r2, r3, #8
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	61da      	str	r2, [r3, #28]
      break;
 800580a:	e002      	b.n	8005812 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	75fb      	strb	r3, [r7, #23]
      break;
 8005810:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800581a:	7dfb      	ldrb	r3, [r7, #23]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_TIM_ConfigClockSource+0x1c>
 800583c:	2302      	movs	r3, #2
 800583e:	e0b4      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x186>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800585e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005878:	d03e      	beq.n	80058f8 <HAL_TIM_ConfigClockSource+0xd4>
 800587a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587e:	f200 8087 	bhi.w	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005886:	f000 8086 	beq.w	8005996 <HAL_TIM_ConfigClockSource+0x172>
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588e:	d87f      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 8005890:	2b70      	cmp	r3, #112	; 0x70
 8005892:	d01a      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0xa6>
 8005894:	2b70      	cmp	r3, #112	; 0x70
 8005896:	d87b      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 8005898:	2b60      	cmp	r3, #96	; 0x60
 800589a:	d050      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x11a>
 800589c:	2b60      	cmp	r3, #96	; 0x60
 800589e:	d877      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058a0:	2b50      	cmp	r3, #80	; 0x50
 80058a2:	d03c      	beq.n	800591e <HAL_TIM_ConfigClockSource+0xfa>
 80058a4:	2b50      	cmp	r3, #80	; 0x50
 80058a6:	d873      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d058      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x13a>
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d86f      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b30      	cmp	r3, #48	; 0x30
 80058b2:	d064      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058b4:	2b30      	cmp	r3, #48	; 0x30
 80058b6:	d86b      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d060      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d867      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d05c      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d05a      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058c8:	e062      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6899      	ldr	r1, [r3, #8]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f000 faf1 	bl	8005ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	609a      	str	r2, [r3, #8]
      break;
 80058f6:	e04f      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6899      	ldr	r1, [r3, #8]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f000 fada 	bl	8005ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800591a:	609a      	str	r2, [r3, #8]
      break;
 800591c:	e03c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6859      	ldr	r1, [r3, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	461a      	mov	r2, r3
 800592c:	f000 fa4e 	bl	8005dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2150      	movs	r1, #80	; 0x50
 8005936:	4618      	mov	r0, r3
 8005938:	f000 faa7 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 800593c:	e02c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	461a      	mov	r2, r3
 800594c:	f000 fa6d 	bl	8005e2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2160      	movs	r1, #96	; 0x60
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fa97 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 800595c:	e01c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	461a      	mov	r2, r3
 800596c:	f000 fa2e 	bl	8005dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2140      	movs	r1, #64	; 0x40
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fa87 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 800597c:	e00c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f000 fa7e 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 800598e:	e003      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
      break;
 8005994:	e000      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a34      	ldr	r2, [pc, #208]	; (8005a98 <TIM_Base_SetConfig+0xe4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00f      	beq.n	80059ec <TIM_Base_SetConfig+0x38>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d2:	d00b      	beq.n	80059ec <TIM_Base_SetConfig+0x38>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a31      	ldr	r2, [pc, #196]	; (8005a9c <TIM_Base_SetConfig+0xe8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d007      	beq.n	80059ec <TIM_Base_SetConfig+0x38>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a30      	ldr	r2, [pc, #192]	; (8005aa0 <TIM_Base_SetConfig+0xec>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d003      	beq.n	80059ec <TIM_Base_SetConfig+0x38>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a2f      	ldr	r2, [pc, #188]	; (8005aa4 <TIM_Base_SetConfig+0xf0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d108      	bne.n	80059fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a25      	ldr	r2, [pc, #148]	; (8005a98 <TIM_Base_SetConfig+0xe4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d01b      	beq.n	8005a3e <TIM_Base_SetConfig+0x8a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0c:	d017      	beq.n	8005a3e <TIM_Base_SetConfig+0x8a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a22      	ldr	r2, [pc, #136]	; (8005a9c <TIM_Base_SetConfig+0xe8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <TIM_Base_SetConfig+0x8a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a21      	ldr	r2, [pc, #132]	; (8005aa0 <TIM_Base_SetConfig+0xec>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00f      	beq.n	8005a3e <TIM_Base_SetConfig+0x8a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a20      	ldr	r2, [pc, #128]	; (8005aa4 <TIM_Base_SetConfig+0xf0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00b      	beq.n	8005a3e <TIM_Base_SetConfig+0x8a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1f      	ldr	r2, [pc, #124]	; (8005aa8 <TIM_Base_SetConfig+0xf4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d007      	beq.n	8005a3e <TIM_Base_SetConfig+0x8a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <TIM_Base_SetConfig+0xf8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d003      	beq.n	8005a3e <TIM_Base_SetConfig+0x8a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1d      	ldr	r2, [pc, #116]	; (8005ab0 <TIM_Base_SetConfig+0xfc>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d108      	bne.n	8005a50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a08      	ldr	r2, [pc, #32]	; (8005a98 <TIM_Base_SetConfig+0xe4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d103      	bne.n	8005a84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	615a      	str	r2, [r3, #20]
}
 8005a8a:	bf00      	nop
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40010000 	.word	0x40010000
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	40000800 	.word	0x40000800
 8005aa4:	40000c00 	.word	0x40000c00
 8005aa8:	40014000 	.word	0x40014000
 8005aac:	40014400 	.word	0x40014400
 8005ab0:	40014800 	.word	0x40014800

08005ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f023 0201 	bic.w	r2, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0303 	bic.w	r3, r3, #3
 8005aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f023 0302 	bic.w	r3, r3, #2
 8005afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a1c      	ldr	r2, [pc, #112]	; (8005b7c <TIM_OC1_SetConfig+0xc8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d10c      	bne.n	8005b2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 0308 	bic.w	r3, r3, #8
 8005b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f023 0304 	bic.w	r3, r3, #4
 8005b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a13      	ldr	r2, [pc, #76]	; (8005b7c <TIM_OC1_SetConfig+0xc8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d111      	bne.n	8005b56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	621a      	str	r2, [r3, #32]
}
 8005b70:	bf00      	nop
 8005b72:	371c      	adds	r7, #28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	40010000 	.word	0x40010000

08005b80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f023 0210 	bic.w	r2, r3, #16
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 0320 	bic.w	r3, r3, #32
 8005bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a1e      	ldr	r2, [pc, #120]	; (8005c54 <TIM_OC2_SetConfig+0xd4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10d      	bne.n	8005bfc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a15      	ldr	r2, [pc, #84]	; (8005c54 <TIM_OC2_SetConfig+0xd4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d113      	bne.n	8005c2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	621a      	str	r2, [r3, #32]
}
 8005c46:	bf00      	nop
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	40010000 	.word	0x40010000

08005c58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	021b      	lsls	r3, r3, #8
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <TIM_OC3_SetConfig+0xd0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d10d      	bne.n	8005cd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a14      	ldr	r2, [pc, #80]	; (8005d28 <TIM_OC3_SetConfig+0xd0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d113      	bne.n	8005d02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	621a      	str	r2, [r3, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40010000 	.word	0x40010000

08005d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	021b      	lsls	r3, r3, #8
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	031b      	lsls	r3, r3, #12
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a10      	ldr	r2, [pc, #64]	; (8005dc8 <TIM_OC4_SetConfig+0x9c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d109      	bne.n	8005da0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	019b      	lsls	r3, r3, #6
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40010000 	.word	0x40010000

08005dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f023 0201 	bic.w	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f023 030a 	bic.w	r3, r3, #10
 8005e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	621a      	str	r2, [r3, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b087      	sub	sp, #28
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f023 0210 	bic.w	r2, r3, #16
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	031b      	lsls	r3, r3, #12
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f043 0307 	orr.w	r3, r3, #7
 8005eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	609a      	str	r2, [r3, #8]
}
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	021a      	lsls	r2, r3, #8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	609a      	str	r2, [r3, #8]
}
 8005ef4:	bf00      	nop
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 031f 	and.w	r3, r3, #31
 8005f12:	2201      	movs	r2, #1
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a1a      	ldr	r2, [r3, #32]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	43db      	mvns	r3, r3
 8005f22:	401a      	ands	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a1a      	ldr	r2, [r3, #32]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	fa01 f303 	lsl.w	r3, r1, r3
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
	...

08005f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e050      	b.n	8006006 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1c      	ldr	r2, [pc, #112]	; (8006014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d018      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb0:	d013      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a18      	ldr	r2, [pc, #96]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00e      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a16      	ldr	r2, [pc, #88]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d009      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a15      	ldr	r2, [pc, #84]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d004      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a13      	ldr	r2, [pc, #76]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d10c      	bne.n	8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	40010000 	.word	0x40010000
 8006018:	40000400 	.word	0x40000400
 800601c:	40000800 	.word	0x40000800
 8006020:	40000c00 	.word	0x40000c00
 8006024:	40014000 	.word	0x40014000

08006028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e03f      	b.n	80060ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d106      	bne.n	8006054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fb fee0 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2224      	movs	r2, #36	; 0x24
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800606a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fe97 	bl	8006da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	695a      	ldr	r2, [r3, #20]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b08c      	sub	sp, #48	; 0x30
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	4613      	mov	r3, r2
 80060ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d152      	bne.n	8006182 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d002      	beq.n	80060e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80060e2:	88fb      	ldrh	r3, [r7, #6]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e04b      	b.n	8006184 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e044      	b.n	8006184 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006108:	88fb      	ldrh	r3, [r7, #6]
 800610a:	461a      	mov	r2, r3
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 fbea 	bl	80068e8 <UART_Start_Receive_DMA>
 8006114:	4603      	mov	r3, r0
 8006116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800611a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800611e:	2b00      	cmp	r3, #0
 8006120:	d12c      	bne.n	800617c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	2b01      	cmp	r3, #1
 8006128:	d125      	bne.n	8006176 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800612a:	2300      	movs	r3, #0
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	613b      	str	r3, [r7, #16]
 800613e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	330c      	adds	r3, #12
 8006146:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	617b      	str	r3, [r7, #20]
   return(result);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f043 0310 	orr.w	r3, r3, #16
 8006156:	62bb      	str	r3, [r7, #40]	; 0x28
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006160:	627a      	str	r2, [r7, #36]	; 0x24
 8006162:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6a39      	ldr	r1, [r7, #32]
 8006166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	61fb      	str	r3, [r7, #28]
   return(result);
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e5      	bne.n	8006140 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006174:	e002      	b.n	800617c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800617c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006180:	e000      	b.n	8006184 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006182:	2302      	movs	r3, #2
  }
}
 8006184:	4618      	mov	r0, r3
 8006186:	3730      	adds	r7, #48	; 0x30
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b0ba      	sub	sp, #232	; 0xe8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10f      	bne.n	80061f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d009      	beq.n	80061f2 <HAL_UART_IRQHandler+0x66>
 80061de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fd1d 	bl	8006c2a <UART_Receive_IT>
      return;
 80061f0:	e256      	b.n	80066a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 80de 	beq.w	80063b8 <HAL_UART_IRQHandler+0x22c>
 80061fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d106      	bne.n	8006216 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 80d1 	beq.w	80063b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00b      	beq.n	800623a <HAL_UART_IRQHandler+0xae>
 8006222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622a:	2b00      	cmp	r3, #0
 800622c:	d005      	beq.n	800623a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	f043 0201 	orr.w	r2, r3, #1
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800623a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <HAL_UART_IRQHandler+0xd2>
 8006246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	f043 0202 	orr.w	r2, r3, #2
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00b      	beq.n	8006282 <HAL_UART_IRQHandler+0xf6>
 800626a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f043 0204 	orr.w	r2, r3, #4
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b00      	cmp	r3, #0
 800628c:	d011      	beq.n	80062b2 <HAL_UART_IRQHandler+0x126>
 800628e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b00      	cmp	r3, #0
 8006298:	d105      	bne.n	80062a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800629a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d005      	beq.n	80062b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	f043 0208 	orr.w	r2, r3, #8
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 81ed 	beq.w	8006696 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d008      	beq.n	80062da <HAL_UART_IRQHandler+0x14e>
 80062c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062cc:	f003 0320 	and.w	r3, r3, #32
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fca8 	bl	8006c2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e4:	2b40      	cmp	r3, #64	; 0x40
 80062e6:	bf0c      	ite	eq
 80062e8:	2301      	moveq	r3, #1
 80062ea:	2300      	movne	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	f003 0308 	and.w	r3, r3, #8
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d103      	bne.n	8006306 <HAL_UART_IRQHandler+0x17a>
 80062fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006302:	2b00      	cmp	r3, #0
 8006304:	d04f      	beq.n	80063a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fbb0 	bl	8006a6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d141      	bne.n	800639e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3314      	adds	r3, #20
 8006320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3314      	adds	r3, #20
 8006342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006346:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800634a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006352:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800635e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1d9      	bne.n	800631a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	2b00      	cmp	r3, #0
 800636c:	d013      	beq.n	8006396 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	4a7d      	ldr	r2, [pc, #500]	; (8006568 <HAL_UART_IRQHandler+0x3dc>)
 8006374:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637a:	4618      	mov	r0, r3
 800637c:	f7fc fda4 	bl	8002ec8 <HAL_DMA_Abort_IT>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d016      	beq.n	80063b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006390:	4610      	mov	r0, r2
 8006392:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006394:	e00e      	b.n	80063b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f9a4 	bl	80066e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800639c:	e00a      	b.n	80063b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f9a0 	bl	80066e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a4:	e006      	b.n	80063b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f99c 	bl	80066e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063b2:	e170      	b.n	8006696 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b4:	bf00      	nop
    return;
 80063b6:	e16e      	b.n	8006696 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063bc:	2b01      	cmp	r3, #1
 80063be:	f040 814a 	bne.w	8006656 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c6:	f003 0310 	and.w	r3, r3, #16
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 8143 	beq.w	8006656 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d4:	f003 0310 	and.w	r3, r3, #16
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 813c 	beq.w	8006656 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063de:	2300      	movs	r3, #0
 80063e0:	60bb      	str	r3, [r7, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	60bb      	str	r3, [r7, #8]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	60bb      	str	r3, [r7, #8]
 80063f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b40      	cmp	r3, #64	; 0x40
 8006400:	f040 80b4 	bne.w	800656c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006410:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8140 	beq.w	800669a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800641e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006422:	429a      	cmp	r2, r3
 8006424:	f080 8139 	bcs.w	800669a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800642e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800643a:	f000 8088 	beq.w	800654e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	330c      	adds	r3, #12
 8006444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800645c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	330c      	adds	r3, #12
 8006466:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800646a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800646e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006472:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006476:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1d9      	bne.n	800643e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3314      	adds	r3, #20
 8006490:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800649a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800649c:	f023 0301 	bic.w	r3, r3, #1
 80064a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3314      	adds	r3, #20
 80064aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e1      	bne.n	800648a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3314      	adds	r3, #20
 80064cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064d0:	e853 3f00 	ldrex	r3, [r3]
 80064d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3314      	adds	r3, #20
 80064e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e3      	bne.n	80064c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	330c      	adds	r3, #12
 8006512:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800651c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800651e:	f023 0310 	bic.w	r3, r3, #16
 8006522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	330c      	adds	r3, #12
 800652c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006530:	65ba      	str	r2, [r7, #88]	; 0x58
 8006532:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006536:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006538:	e841 2300 	strex	r3, r2, [r1]
 800653c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800653e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e3      	bne.n	800650c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006548:	4618      	mov	r0, r3
 800654a:	f7fc fc4d 	bl	8002de8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006556:	b29b      	uxth	r3, r3
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	b29b      	uxth	r3, r3
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fb f82c 	bl	80015bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006564:	e099      	b.n	800669a <HAL_UART_IRQHandler+0x50e>
 8006566:	bf00      	nop
 8006568:	08006b33 	.word	0x08006b33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006574:	b29b      	uxth	r3, r3
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 808b 	beq.w	800669e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 8086 	beq.w	800669e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	330c      	adds	r3, #12
 8006598:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065b6:	647a      	str	r2, [r7, #68]	; 0x44
 80065b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e3      	bne.n	8006592 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3314      	adds	r3, #20
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	623b      	str	r3, [r7, #32]
   return(result);
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	f023 0301 	bic.w	r3, r3, #1
 80065e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3314      	adds	r3, #20
 80065ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065ee:	633a      	str	r2, [r7, #48]	; 0x30
 80065f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e3      	bne.n	80065ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2220      	movs	r2, #32
 8006606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	330c      	adds	r3, #12
 8006616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 0310 	bic.w	r3, r3, #16
 8006626:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	330c      	adds	r3, #12
 8006630:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006634:	61fa      	str	r2, [r7, #28]
 8006636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	69b9      	ldr	r1, [r7, #24]
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	617b      	str	r3, [r7, #20]
   return(result);
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e3      	bne.n	8006610 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fa ffb4 	bl	80015bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006654:	e023      	b.n	800669e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665e:	2b00      	cmp	r3, #0
 8006660:	d009      	beq.n	8006676 <HAL_UART_IRQHandler+0x4ea>
 8006662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fa73 	bl	8006b5a <UART_Transmit_IT>
    return;
 8006674:	e014      	b.n	80066a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00e      	beq.n	80066a0 <HAL_UART_IRQHandler+0x514>
 8006682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d008      	beq.n	80066a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fab3 	bl	8006bfa <UART_EndTransmit_IT>
    return;
 8006694:	e004      	b.n	80066a0 <HAL_UART_IRQHandler+0x514>
    return;
 8006696:	bf00      	nop
 8006698:	e002      	b.n	80066a0 <HAL_UART_IRQHandler+0x514>
      return;
 800669a:	bf00      	nop
 800669c:	e000      	b.n	80066a0 <HAL_UART_IRQHandler+0x514>
      return;
 800669e:	bf00      	nop
  }
}
 80066a0:	37e8      	adds	r7, #232	; 0xe8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop

080066a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b09c      	sub	sp, #112	; 0x70
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006710:	2b00      	cmp	r3, #0
 8006712:	d172      	bne.n	80067fa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006716:	2200      	movs	r2, #0
 8006718:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800671a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	330c      	adds	r3, #12
 8006720:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800672a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800672c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006730:	66bb      	str	r3, [r7, #104]	; 0x68
 8006732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800673a:	65ba      	str	r2, [r7, #88]	; 0x58
 800673c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e5      	bne.n	800671a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3314      	adds	r3, #20
 8006754:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800675e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	667b      	str	r3, [r7, #100]	; 0x64
 8006766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3314      	adds	r3, #20
 800676c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800676e:	647a      	str	r2, [r7, #68]	; 0x44
 8006770:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800677c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e5      	bne.n	800674e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3314      	adds	r3, #20
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	623b      	str	r3, [r7, #32]
   return(result);
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006798:	663b      	str	r3, [r7, #96]	; 0x60
 800679a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3314      	adds	r3, #20
 80067a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067a2:	633a      	str	r2, [r7, #48]	; 0x30
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e5      	bne.n	8006782 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d119      	bne.n	80067fa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	330c      	adds	r3, #12
 80067cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f023 0310 	bic.w	r3, r3, #16
 80067dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	330c      	adds	r3, #12
 80067e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067e6:	61fa      	str	r2, [r7, #28]
 80067e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	69b9      	ldr	r1, [r7, #24]
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	617b      	str	r3, [r7, #20]
   return(result);
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e5      	bne.n	80067c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d106      	bne.n	8006810 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006804:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006806:	4619      	mov	r1, r3
 8006808:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800680a:	f7fa fed7 	bl	80015bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800680e:	e002      	b.n	8006816 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006810:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006812:	f7ff ff53 	bl	80066bc <HAL_UART_RxCpltCallback>
}
 8006816:	bf00      	nop
 8006818:	3770      	adds	r7, #112	; 0x70
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	2b01      	cmp	r3, #1
 8006832:	d108      	bne.n	8006846 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006838:	085b      	lsrs	r3, r3, #1
 800683a:	b29b      	uxth	r3, r3
 800683c:	4619      	mov	r1, r3
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f7fa febc 	bl	80015bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006844:	e002      	b.n	800684c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f7ff ff42 	bl	80066d0 <HAL_UART_RxHalfCpltCallback>
}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006870:	2b80      	cmp	r3, #128	; 0x80
 8006872:	bf0c      	ite	eq
 8006874:	2301      	moveq	r3, #1
 8006876:	2300      	movne	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b21      	cmp	r3, #33	; 0x21
 8006886:	d108      	bne.n	800689a <UART_DMAError+0x46>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d005      	beq.n	800689a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2200      	movs	r2, #0
 8006892:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006894:	68b8      	ldr	r0, [r7, #8]
 8006896:	f000 f8c1 	bl	8006a1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a4:	2b40      	cmp	r3, #64	; 0x40
 80068a6:	bf0c      	ite	eq
 80068a8:	2301      	moveq	r3, #1
 80068aa:	2300      	movne	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b22      	cmp	r3, #34	; 0x22
 80068ba:	d108      	bne.n	80068ce <UART_DMAError+0x7a>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2200      	movs	r2, #0
 80068c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80068c8:	68b8      	ldr	r0, [r7, #8]
 80068ca:	f000 f8cf 	bl	8006a6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	f043 0210 	orr.w	r2, r3, #16
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068da:	68b8      	ldr	r0, [r7, #8]
 80068dc:	f7ff ff02 	bl	80066e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068e0:	bf00      	nop
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b098      	sub	sp, #96	; 0x60
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	88fa      	ldrh	r2, [r7, #6]
 8006900:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2222      	movs	r2, #34	; 0x22
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	4a3e      	ldr	r2, [pc, #248]	; (8006a10 <UART_Start_Receive_DMA+0x128>)
 8006916:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	4a3d      	ldr	r2, [pc, #244]	; (8006a14 <UART_Start_Receive_DMA+0x12c>)
 800691e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	4a3c      	ldr	r2, [pc, #240]	; (8006a18 <UART_Start_Receive_DMA+0x130>)
 8006926:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	2200      	movs	r2, #0
 800692e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006930:	f107 0308 	add.w	r3, r7, #8
 8006934:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3304      	adds	r3, #4
 8006940:	4619      	mov	r1, r3
 8006942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	88fb      	ldrh	r3, [r7, #6]
 8006948:	f7fc f9f6 	bl	8002d38 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	330c      	adds	r3, #12
 8006970:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800697a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800697c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006980:	65bb      	str	r3, [r7, #88]	; 0x58
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	330c      	adds	r3, #12
 8006988:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800698a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800698c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006990:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e5      	bne.n	800696a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3314      	adds	r3, #20
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	e853 3f00 	ldrex	r3, [r3]
 80069ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	f043 0301 	orr.w	r3, r3, #1
 80069b4:	657b      	str	r3, [r7, #84]	; 0x54
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3314      	adds	r3, #20
 80069bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069be:	63ba      	str	r2, [r7, #56]	; 0x38
 80069c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1e5      	bne.n	800699e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3314      	adds	r3, #20
 80069d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	617b      	str	r3, [r7, #20]
   return(result);
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069e8:	653b      	str	r3, [r7, #80]	; 0x50
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3314      	adds	r3, #20
 80069f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069f2:	627a      	str	r2, [r7, #36]	; 0x24
 80069f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	6a39      	ldr	r1, [r7, #32]
 80069f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e5      	bne.n	80069d2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3760      	adds	r7, #96	; 0x60
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	080066f9 	.word	0x080066f9
 8006a14:	0800681f 	.word	0x0800681f
 8006a18:	08006855 	.word	0x08006855

08006a1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b089      	sub	sp, #36	; 0x24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a3a:	61fb      	str	r3, [r7, #28]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	330c      	adds	r3, #12
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	61ba      	str	r2, [r7, #24]
 8006a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	6979      	ldr	r1, [r7, #20]
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	613b      	str	r3, [r7, #16]
   return(result);
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e5      	bne.n	8006a24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006a60:	bf00      	nop
 8006a62:	3724      	adds	r7, #36	; 0x24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b095      	sub	sp, #84	; 0x54
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	330c      	adds	r3, #12
 8006a7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a94:	643a      	str	r2, [r7, #64]	; 0x40
 8006a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e5      	bne.n	8006a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3314      	adds	r3, #20
 8006aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f023 0301 	bic.w	r3, r3, #1
 8006abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3314      	adds	r3, #20
 8006ac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ac8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e5      	bne.n	8006aa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d119      	bne.n	8006b18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	330c      	adds	r3, #12
 8006aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f023 0310 	bic.w	r3, r3, #16
 8006afa:	647b      	str	r3, [r7, #68]	; 0x44
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	330c      	adds	r3, #12
 8006b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b04:	61ba      	str	r2, [r7, #24]
 8006b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6979      	ldr	r1, [r7, #20]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	613b      	str	r3, [r7, #16]
   return(result);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e5      	bne.n	8006ae4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b26:	bf00      	nop
 8006b28:	3754      	adds	r7, #84	; 0x54
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7ff fdc9 	bl	80066e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b52:	bf00      	nop
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b21      	cmp	r3, #33	; 0x21
 8006b6c:	d13e      	bne.n	8006bec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b76:	d114      	bne.n	8006ba2 <UART_Transmit_IT+0x48>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d110      	bne.n	8006ba2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	1c9a      	adds	r2, r3, #2
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	621a      	str	r2, [r3, #32]
 8006ba0:	e008      	b.n	8006bb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	1c59      	adds	r1, r3, #1
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	6211      	str	r1, [r2, #32]
 8006bac:	781a      	ldrb	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10f      	bne.n	8006be8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006be6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	e000      	b.n	8006bee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bec:	2302      	movs	r3, #2
  }
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68da      	ldr	r2, [r3, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff fd44 	bl	80066a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b08c      	sub	sp, #48	; 0x30
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b22      	cmp	r3, #34	; 0x22
 8006c3c:	f040 80ab 	bne.w	8006d96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c48:	d117      	bne.n	8006c7a <UART_Receive_IT+0x50>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d113      	bne.n	8006c7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	1c9a      	adds	r2, r3, #2
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	629a      	str	r2, [r3, #40]	; 0x28
 8006c78:	e026      	b.n	8006cc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c80:	2300      	movs	r3, #0
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8c:	d007      	beq.n	8006c9e <UART_Receive_IT+0x74>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <UART_Receive_IT+0x82>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	e008      	b.n	8006cbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d15a      	bne.n	8006d92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0220 	bic.w	r2, r2, #32
 8006cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695a      	ldr	r2, [r3, #20]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0201 	bic.w	r2, r2, #1
 8006d0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d135      	bne.n	8006d88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	613b      	str	r3, [r7, #16]
   return(result);
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f023 0310 	bic.w	r3, r3, #16
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	330c      	adds	r3, #12
 8006d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d42:	623a      	str	r2, [r7, #32]
 8006d44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	69f9      	ldr	r1, [r7, #28]
 8006d48:	6a3a      	ldr	r2, [r7, #32]
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e5      	bne.n	8006d22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b10      	cmp	r3, #16
 8006d62:	d10a      	bne.n	8006d7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7fa fc1b 	bl	80015bc <HAL_UARTEx_RxEventCallback>
 8006d86:	e002      	b.n	8006d8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff fc97 	bl	80066bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e002      	b.n	8006d98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e000      	b.n	8006d98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d96:	2302      	movs	r3, #2
  }
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3730      	adds	r7, #48	; 0x30
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	b09f      	sub	sp, #124	; 0x7c
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db6:	68d9      	ldr	r1, [r3, #12]
 8006db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	ea40 0301 	orr.w	r3, r0, r1
 8006dc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006de4:	f021 010c 	bic.w	r1, r1, #12
 8006de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dee:	430b      	orrs	r3, r1
 8006df0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dfe:	6999      	ldr	r1, [r3, #24]
 8006e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	ea40 0301 	orr.w	r3, r0, r1
 8006e08:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	4bc5      	ldr	r3, [pc, #788]	; (8007124 <UART_SetConfig+0x384>)
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d004      	beq.n	8006e1e <UART_SetConfig+0x7e>
 8006e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	4bc3      	ldr	r3, [pc, #780]	; (8007128 <UART_SetConfig+0x388>)
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d103      	bne.n	8006e26 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e1e:	f7fd f8e3 	bl	8003fe8 <HAL_RCC_GetPCLK2Freq>
 8006e22:	6778      	str	r0, [r7, #116]	; 0x74
 8006e24:	e002      	b.n	8006e2c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e26:	f7fd f8cb 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8006e2a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e34:	f040 80b6 	bne.w	8006fa4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e3a:	461c      	mov	r4, r3
 8006e3c:	f04f 0500 	mov.w	r5, #0
 8006e40:	4622      	mov	r2, r4
 8006e42:	462b      	mov	r3, r5
 8006e44:	1891      	adds	r1, r2, r2
 8006e46:	6439      	str	r1, [r7, #64]	; 0x40
 8006e48:	415b      	adcs	r3, r3
 8006e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e50:	1912      	adds	r2, r2, r4
 8006e52:	eb45 0303 	adc.w	r3, r5, r3
 8006e56:	f04f 0000 	mov.w	r0, #0
 8006e5a:	f04f 0100 	mov.w	r1, #0
 8006e5e:	00d9      	lsls	r1, r3, #3
 8006e60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e64:	00d0      	lsls	r0, r2, #3
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	1911      	adds	r1, r2, r4
 8006e6c:	6639      	str	r1, [r7, #96]	; 0x60
 8006e6e:	416b      	adcs	r3, r5
 8006e70:	667b      	str	r3, [r7, #100]	; 0x64
 8006e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	461a      	mov	r2, r3
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	1891      	adds	r1, r2, r2
 8006e7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e80:	415b      	adcs	r3, r3
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e88:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006e8c:	f7f9 fa00 	bl	8000290 <__aeabi_uldivmod>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4ba5      	ldr	r3, [pc, #660]	; (800712c <UART_SetConfig+0x38c>)
 8006e96:	fba3 2302 	umull	r2, r3, r3, r2
 8006e9a:	095b      	lsrs	r3, r3, #5
 8006e9c:	011e      	lsls	r6, r3, #4
 8006e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea0:	461c      	mov	r4, r3
 8006ea2:	f04f 0500 	mov.w	r5, #0
 8006ea6:	4622      	mov	r2, r4
 8006ea8:	462b      	mov	r3, r5
 8006eaa:	1891      	adds	r1, r2, r2
 8006eac:	6339      	str	r1, [r7, #48]	; 0x30
 8006eae:	415b      	adcs	r3, r3
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006eb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006eb6:	1912      	adds	r2, r2, r4
 8006eb8:	eb45 0303 	adc.w	r3, r5, r3
 8006ebc:	f04f 0000 	mov.w	r0, #0
 8006ec0:	f04f 0100 	mov.w	r1, #0
 8006ec4:	00d9      	lsls	r1, r3, #3
 8006ec6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006eca:	00d0      	lsls	r0, r2, #3
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	1911      	adds	r1, r2, r4
 8006ed2:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ed4:	416b      	adcs	r3, r5
 8006ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	461a      	mov	r2, r3
 8006ede:	f04f 0300 	mov.w	r3, #0
 8006ee2:	1891      	adds	r1, r2, r2
 8006ee4:	62b9      	str	r1, [r7, #40]	; 0x28
 8006ee6:	415b      	adcs	r3, r3
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006eee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006ef2:	f7f9 f9cd 	bl	8000290 <__aeabi_uldivmod>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4b8c      	ldr	r3, [pc, #560]	; (800712c <UART_SetConfig+0x38c>)
 8006efc:	fba3 1302 	umull	r1, r3, r3, r2
 8006f00:	095b      	lsrs	r3, r3, #5
 8006f02:	2164      	movs	r1, #100	; 0x64
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	3332      	adds	r3, #50	; 0x32
 8006f0e:	4a87      	ldr	r2, [pc, #540]	; (800712c <UART_SetConfig+0x38c>)
 8006f10:	fba2 2303 	umull	r2, r3, r2, r3
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f1c:	441e      	add	r6, r3
 8006f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f20:	4618      	mov	r0, r3
 8006f22:	f04f 0100 	mov.w	r1, #0
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	1894      	adds	r4, r2, r2
 8006f2c:	623c      	str	r4, [r7, #32]
 8006f2e:	415b      	adcs	r3, r3
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
 8006f32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f36:	1812      	adds	r2, r2, r0
 8006f38:	eb41 0303 	adc.w	r3, r1, r3
 8006f3c:	f04f 0400 	mov.w	r4, #0
 8006f40:	f04f 0500 	mov.w	r5, #0
 8006f44:	00dd      	lsls	r5, r3, #3
 8006f46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f4a:	00d4      	lsls	r4, r2, #3
 8006f4c:	4622      	mov	r2, r4
 8006f4e:	462b      	mov	r3, r5
 8006f50:	1814      	adds	r4, r2, r0
 8006f52:	653c      	str	r4, [r7, #80]	; 0x50
 8006f54:	414b      	adcs	r3, r1
 8006f56:	657b      	str	r3, [r7, #84]	; 0x54
 8006f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	1891      	adds	r1, r2, r2
 8006f64:	61b9      	str	r1, [r7, #24]
 8006f66:	415b      	adcs	r3, r3
 8006f68:	61fb      	str	r3, [r7, #28]
 8006f6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f6e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f72:	f7f9 f98d 	bl	8000290 <__aeabi_uldivmod>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4b6c      	ldr	r3, [pc, #432]	; (800712c <UART_SetConfig+0x38c>)
 8006f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f80:	095b      	lsrs	r3, r3, #5
 8006f82:	2164      	movs	r1, #100	; 0x64
 8006f84:	fb01 f303 	mul.w	r3, r1, r3
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	3332      	adds	r3, #50	; 0x32
 8006f8e:	4a67      	ldr	r2, [pc, #412]	; (800712c <UART_SetConfig+0x38c>)
 8006f90:	fba2 2303 	umull	r2, r3, r2, r3
 8006f94:	095b      	lsrs	r3, r3, #5
 8006f96:	f003 0207 	and.w	r2, r3, #7
 8006f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4432      	add	r2, r6
 8006fa0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fa2:	e0b9      	b.n	8007118 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa6:	461c      	mov	r4, r3
 8006fa8:	f04f 0500 	mov.w	r5, #0
 8006fac:	4622      	mov	r2, r4
 8006fae:	462b      	mov	r3, r5
 8006fb0:	1891      	adds	r1, r2, r2
 8006fb2:	6139      	str	r1, [r7, #16]
 8006fb4:	415b      	adcs	r3, r3
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006fbc:	1912      	adds	r2, r2, r4
 8006fbe:	eb45 0303 	adc.w	r3, r5, r3
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f04f 0100 	mov.w	r1, #0
 8006fca:	00d9      	lsls	r1, r3, #3
 8006fcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fd0:	00d0      	lsls	r0, r2, #3
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	eb12 0804 	adds.w	r8, r2, r4
 8006fda:	eb43 0905 	adc.w	r9, r3, r5
 8006fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f04f 0100 	mov.w	r1, #0
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	008b      	lsls	r3, r1, #2
 8006ff2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ff6:	0082      	lsls	r2, r0, #2
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	f7f9 f948 	bl	8000290 <__aeabi_uldivmod>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4b49      	ldr	r3, [pc, #292]	; (800712c <UART_SetConfig+0x38c>)
 8007006:	fba3 2302 	umull	r2, r3, r3, r2
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	011e      	lsls	r6, r3, #4
 800700e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007010:	4618      	mov	r0, r3
 8007012:	f04f 0100 	mov.w	r1, #0
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	1894      	adds	r4, r2, r2
 800701c:	60bc      	str	r4, [r7, #8]
 800701e:	415b      	adcs	r3, r3
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007026:	1812      	adds	r2, r2, r0
 8007028:	eb41 0303 	adc.w	r3, r1, r3
 800702c:	f04f 0400 	mov.w	r4, #0
 8007030:	f04f 0500 	mov.w	r5, #0
 8007034:	00dd      	lsls	r5, r3, #3
 8007036:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800703a:	00d4      	lsls	r4, r2, #3
 800703c:	4622      	mov	r2, r4
 800703e:	462b      	mov	r3, r5
 8007040:	1814      	adds	r4, r2, r0
 8007042:	64bc      	str	r4, [r7, #72]	; 0x48
 8007044:	414b      	adcs	r3, r1
 8007046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	4618      	mov	r0, r3
 800704e:	f04f 0100 	mov.w	r1, #0
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	f04f 0300 	mov.w	r3, #0
 800705a:	008b      	lsls	r3, r1, #2
 800705c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007060:	0082      	lsls	r2, r0, #2
 8007062:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007066:	f7f9 f913 	bl	8000290 <__aeabi_uldivmod>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4b2f      	ldr	r3, [pc, #188]	; (800712c <UART_SetConfig+0x38c>)
 8007070:	fba3 1302 	umull	r1, r3, r3, r2
 8007074:	095b      	lsrs	r3, r3, #5
 8007076:	2164      	movs	r1, #100	; 0x64
 8007078:	fb01 f303 	mul.w	r3, r1, r3
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	3332      	adds	r3, #50	; 0x32
 8007082:	4a2a      	ldr	r2, [pc, #168]	; (800712c <UART_SetConfig+0x38c>)
 8007084:	fba2 2303 	umull	r2, r3, r2, r3
 8007088:	095b      	lsrs	r3, r3, #5
 800708a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800708e:	441e      	add	r6, r3
 8007090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007092:	4618      	mov	r0, r3
 8007094:	f04f 0100 	mov.w	r1, #0
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	1894      	adds	r4, r2, r2
 800709e:	603c      	str	r4, [r7, #0]
 80070a0:	415b      	adcs	r3, r3
 80070a2:	607b      	str	r3, [r7, #4]
 80070a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070a8:	1812      	adds	r2, r2, r0
 80070aa:	eb41 0303 	adc.w	r3, r1, r3
 80070ae:	f04f 0400 	mov.w	r4, #0
 80070b2:	f04f 0500 	mov.w	r5, #0
 80070b6:	00dd      	lsls	r5, r3, #3
 80070b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80070bc:	00d4      	lsls	r4, r2, #3
 80070be:	4622      	mov	r2, r4
 80070c0:	462b      	mov	r3, r5
 80070c2:	eb12 0a00 	adds.w	sl, r2, r0
 80070c6:	eb43 0b01 	adc.w	fp, r3, r1
 80070ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f04f 0100 	mov.w	r1, #0
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	f04f 0300 	mov.w	r3, #0
 80070dc:	008b      	lsls	r3, r1, #2
 80070de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070e2:	0082      	lsls	r2, r0, #2
 80070e4:	4650      	mov	r0, sl
 80070e6:	4659      	mov	r1, fp
 80070e8:	f7f9 f8d2 	bl	8000290 <__aeabi_uldivmod>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4b0e      	ldr	r3, [pc, #56]	; (800712c <UART_SetConfig+0x38c>)
 80070f2:	fba3 1302 	umull	r1, r3, r3, r2
 80070f6:	095b      	lsrs	r3, r3, #5
 80070f8:	2164      	movs	r1, #100	; 0x64
 80070fa:	fb01 f303 	mul.w	r3, r1, r3
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	3332      	adds	r3, #50	; 0x32
 8007104:	4a09      	ldr	r2, [pc, #36]	; (800712c <UART_SetConfig+0x38c>)
 8007106:	fba2 2303 	umull	r2, r3, r2, r3
 800710a:	095b      	lsrs	r3, r3, #5
 800710c:	f003 020f 	and.w	r2, r3, #15
 8007110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4432      	add	r2, r6
 8007116:	609a      	str	r2, [r3, #8]
}
 8007118:	bf00      	nop
 800711a:	377c      	adds	r7, #124	; 0x7c
 800711c:	46bd      	mov	sp, r7
 800711e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007122:	bf00      	nop
 8007124:	40011000 	.word	0x40011000
 8007128:	40011400 	.word	0x40011400
 800712c:	51eb851f 	.word	0x51eb851f

08007130 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007134:	4904      	ldr	r1, [pc, #16]	; (8007148 <MX_FATFS_Init+0x18>)
 8007136:	4805      	ldr	r0, [pc, #20]	; (800714c <MX_FATFS_Init+0x1c>)
 8007138:	f003 fbd4 	bl	800a8e4 <FATFS_LinkDriver>
 800713c:	4603      	mov	r3, r0
 800713e:	461a      	mov	r2, r3
 8007140:	4b03      	ldr	r3, [pc, #12]	; (8007150 <MX_FATFS_Init+0x20>)
 8007142:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007144:	bf00      	nop
 8007146:	bd80      	pop	{r7, pc}
 8007148:	20000870 	.word	0x20000870
 800714c:	20000010 	.word	0x20000010
 8007150:	20000874 	.word	0x20000874

08007154 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007154:	b480      	push	{r7}
 8007156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007158:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800715a:	4618      	mov	r0, r3
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800716e:	79fb      	ldrb	r3, [r7, #7]
 8007170:	4618      	mov	r0, r3
 8007172:	f000 f9d9 	bl	8007528 <USER_SPI_initialize>
 8007176:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	4603      	mov	r3, r0
 8007188:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	4618      	mov	r0, r3
 800718e:	f000 faab 	bl	80076e8 <USER_SPI_status>
 8007192:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
 80071a6:	603b      	str	r3, [r7, #0]
 80071a8:	4603      	mov	r3, r0
 80071aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80071ac:	7bf8      	ldrb	r0, [r7, #15]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	68b9      	ldr	r1, [r7, #8]
 80071b4:	f000 faae 	bl	8007714 <USER_SPI_read>
 80071b8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	603b      	str	r3, [r7, #0]
 80071ce:	4603      	mov	r3, r0
 80071d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 80071d2:	7bf8      	ldrb	r0, [r7, #15]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	68b9      	ldr	r1, [r7, #8]
 80071da:	f000 fb01 	bl	80077e0 <USER_SPI_write>
 80071de:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	603a      	str	r2, [r7, #0]
 80071f2:	71fb      	strb	r3, [r7, #7]
 80071f4:	460b      	mov	r3, r1
 80071f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 80071f8:	79b9      	ldrb	r1, [r7, #6]
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 fb6a 	bl	80078d8 <USER_SPI_ioctl>
 8007204:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007218:	f7fa ffa6 	bl	8002168 <HAL_GetTick>
 800721c:	4603      	mov	r3, r0
 800721e:	4a04      	ldr	r2, [pc, #16]	; (8007230 <SPI_Timer_On+0x20>)
 8007220:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007222:	4a04      	ldr	r2, [pc, #16]	; (8007234 <SPI_Timer_On+0x24>)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6013      	str	r3, [r2, #0]
}
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000cdc 	.word	0x20000cdc
 8007234:	20000ce0 	.word	0x20000ce0

08007238 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800723c:	f7fa ff94 	bl	8002168 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	4b06      	ldr	r3, [pc, #24]	; (800725c <SPI_Timer_Status+0x24>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	4b05      	ldr	r3, [pc, #20]	; (8007260 <SPI_Timer_Status+0x28>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	429a      	cmp	r2, r3
 800724e:	bf34      	ite	cc
 8007250:	2301      	movcc	r3, #1
 8007252:	2300      	movcs	r3, #0
 8007254:	b2db      	uxtb	r3, r3
}
 8007256:	4618      	mov	r0, r3
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000cdc 	.word	0x20000cdc
 8007260:	20000ce0 	.word	0x20000ce0

08007264 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af02      	add	r7, sp, #8
 800726a:	4603      	mov	r3, r0
 800726c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi2, &dat, &rxDat, 1, 50);
 800726e:	f107 020f 	add.w	r2, r7, #15
 8007272:	1df9      	adds	r1, r7, #7
 8007274:	2332      	movs	r3, #50	; 0x32
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	2301      	movs	r3, #1
 800727a:	4804      	ldr	r0, [pc, #16]	; (800728c <xchg_spi+0x28>)
 800727c:	f7fd fcbd 	bl	8004bfa <HAL_SPI_TransmitReceive>
    return rxDat;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000650 	.word	0x20000650

08007290 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007290:	b590      	push	{r4, r7, lr}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	e00a      	b.n	80072b6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	18d4      	adds	r4, r2, r3
 80072a6:	20ff      	movs	r0, #255	; 0xff
 80072a8:	f7ff ffdc 	bl	8007264 <xchg_spi>
 80072ac:	4603      	mov	r3, r0
 80072ae:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d3f0      	bcc.n	80072a0 <rcvr_spi_multi+0x10>
	}
}
 80072be:	bf00      	nop
 80072c0:	bf00      	nop
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd90      	pop	{r4, r7, pc}

080072c8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	e009      	b.n	80072ec <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4413      	add	r3, r2
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7ff ffbf 	bl	8007264 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3301      	adds	r3, #1
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d3f1      	bcc.n	80072d8 <xmit_spi_multi+0x10>
	}
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007306:	f7fa ff2f 	bl	8002168 <HAL_GetTick>
 800730a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007310:	20ff      	movs	r0, #255	; 0xff
 8007312:	f7ff ffa7 	bl	8007264 <xchg_spi>
 8007316:	4603      	mov	r3, r0
 8007318:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	2bff      	cmp	r3, #255	; 0xff
 800731e:	d007      	beq.n	8007330 <wait_ready+0x32>
 8007320:	f7fa ff22 	bl	8002168 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	429a      	cmp	r2, r3
 800732e:	d8ef      	bhi.n	8007310 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	2bff      	cmp	r3, #255	; 0xff
 8007334:	bf0c      	ite	eq
 8007336:	2301      	moveq	r3, #1
 8007338:	2300      	movne	r3, #0
 800733a:	b2db      	uxtb	r3, r3
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007348:	2201      	movs	r2, #1
 800734a:	2102      	movs	r1, #2
 800734c:	4803      	ldr	r0, [pc, #12]	; (800735c <despiselect+0x18>)
 800734e:	f7fc f9cb 	bl	80036e8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007352:	20ff      	movs	r0, #255	; 0xff
 8007354:	f7ff ff86 	bl	8007264 <xchg_spi>

}
 8007358:	bf00      	nop
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40020800 	.word	0x40020800

08007360 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007364:	2200      	movs	r2, #0
 8007366:	2102      	movs	r1, #2
 8007368:	4809      	ldr	r0, [pc, #36]	; (8007390 <spiselect+0x30>)
 800736a:	f7fc f9bd 	bl	80036e8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800736e:	20ff      	movs	r0, #255	; 0xff
 8007370:	f7ff ff78 	bl	8007264 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007374:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007378:	f7ff ffc1 	bl	80072fe <wait_ready>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <spiselect+0x26>
 8007382:	2301      	movs	r3, #1
 8007384:	e002      	b.n	800738c <spiselect+0x2c>

	despiselect();
 8007386:	f7ff ffdd 	bl	8007344 <despiselect>
	return 0;	/* Timeout */
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40020800 	.word	0x40020800

08007394 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800739e:	20c8      	movs	r0, #200	; 0xc8
 80073a0:	f7ff ff36 	bl	8007210 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80073a4:	20ff      	movs	r0, #255	; 0xff
 80073a6:	f7ff ff5d 	bl	8007264 <xchg_spi>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	2bff      	cmp	r3, #255	; 0xff
 80073b2:	d104      	bne.n	80073be <rcvr_datablock+0x2a>
 80073b4:	f7ff ff40 	bl	8007238 <SPI_Timer_Status>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1f2      	bne.n	80073a4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	2bfe      	cmp	r3, #254	; 0xfe
 80073c2:	d001      	beq.n	80073c8 <rcvr_datablock+0x34>
 80073c4:	2300      	movs	r3, #0
 80073c6:	e00a      	b.n	80073de <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff ff60 	bl	8007290 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80073d0:	20ff      	movs	r0, #255	; 0xff
 80073d2:	f7ff ff47 	bl	8007264 <xchg_spi>
 80073d6:	20ff      	movs	r0, #255	; 0xff
 80073d8:	f7ff ff44 	bl	8007264 <xchg_spi>

	return 1;						/* Function succeeded */
 80073dc:	2301      	movs	r3, #1
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80073f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80073f6:	f7ff ff82 	bl	80072fe <wait_ready>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <xmit_datablock+0x1e>
 8007400:	2300      	movs	r3, #0
 8007402:	e01e      	b.n	8007442 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007404:	78fb      	ldrb	r3, [r7, #3]
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff ff2c 	bl	8007264 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800740c:	78fb      	ldrb	r3, [r7, #3]
 800740e:	2bfd      	cmp	r3, #253	; 0xfd
 8007410:	d016      	beq.n	8007440 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007412:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7ff ff56 	bl	80072c8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800741c:	20ff      	movs	r0, #255	; 0xff
 800741e:	f7ff ff21 	bl	8007264 <xchg_spi>
 8007422:	20ff      	movs	r0, #255	; 0xff
 8007424:	f7ff ff1e 	bl	8007264 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007428:	20ff      	movs	r0, #255	; 0xff
 800742a:	f7ff ff1b 	bl	8007264 <xchg_spi>
 800742e:	4603      	mov	r3, r0
 8007430:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	f003 031f 	and.w	r3, r3, #31
 8007438:	2b05      	cmp	r3, #5
 800743a:	d001      	beq.n	8007440 <xmit_datablock+0x5a>
 800743c:	2300      	movs	r3, #0
 800743e:	e000      	b.n	8007442 <xmit_datablock+0x5c>
	}
	return 1;
 8007440:	2301      	movs	r3, #1
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	4603      	mov	r3, r0
 8007452:	6039      	str	r1, [r7, #0]
 8007454:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800745a:	2b00      	cmp	r3, #0
 800745c:	da0e      	bge.n	800747c <send_cmd+0x32>
		cmd &= 0x7F;
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007464:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007466:	2100      	movs	r1, #0
 8007468:	2037      	movs	r0, #55	; 0x37
 800746a:	f7ff ffee 	bl	800744a <send_cmd>
 800746e:	4603      	mov	r3, r0
 8007470:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d901      	bls.n	800747c <send_cmd+0x32>
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	e051      	b.n	8007520 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	2b0c      	cmp	r3, #12
 8007480:	d008      	beq.n	8007494 <send_cmd+0x4a>
		despiselect();
 8007482:	f7ff ff5f 	bl	8007344 <despiselect>
		if (!spiselect()) return 0xFF;
 8007486:	f7ff ff6b 	bl	8007360 <spiselect>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <send_cmd+0x4a>
 8007490:	23ff      	movs	r3, #255	; 0xff
 8007492:	e045      	b.n	8007520 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800749a:	b2db      	uxtb	r3, r3
 800749c:	4618      	mov	r0, r3
 800749e:	f7ff fee1 	bl	8007264 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	0e1b      	lsrs	r3, r3, #24
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff fedb 	bl	8007264 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	0c1b      	lsrs	r3, r3, #16
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fed5 	bl	8007264 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	0a1b      	lsrs	r3, r3, #8
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff fecf 	bl	8007264 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff feca 	bl	8007264 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80074d0:	2301      	movs	r3, #1
 80074d2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80074d4:	79fb      	ldrb	r3, [r7, #7]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <send_cmd+0x94>
 80074da:	2395      	movs	r3, #149	; 0x95
 80074dc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80074de:	79fb      	ldrb	r3, [r7, #7]
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d101      	bne.n	80074e8 <send_cmd+0x9e>
 80074e4:	2387      	movs	r3, #135	; 0x87
 80074e6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff feba 	bl	8007264 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80074f0:	79fb      	ldrb	r3, [r7, #7]
 80074f2:	2b0c      	cmp	r3, #12
 80074f4:	d102      	bne.n	80074fc <send_cmd+0xb2>
 80074f6:	20ff      	movs	r0, #255	; 0xff
 80074f8:	f7ff feb4 	bl	8007264 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80074fc:	230a      	movs	r3, #10
 80074fe:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007500:	20ff      	movs	r0, #255	; 0xff
 8007502:	f7ff feaf 	bl	8007264 <xchg_spi>
 8007506:	4603      	mov	r3, r0
 8007508:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800750a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800750e:	2b00      	cmp	r3, #0
 8007510:	da05      	bge.n	800751e <send_cmd+0xd4>
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	3b01      	subs	r3, #1
 8007516:	73fb      	strb	r3, [r7, #15]
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1f0      	bne.n	8007500 <send_cmd+0xb6>

	return res;							/* Return received response */
 800751e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007528:	b590      	push	{r4, r7, lr}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007532:	79fb      	ldrb	r3, [r7, #7]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <USER_SPI_initialize+0x14>
 8007538:	2301      	movs	r3, #1
 800753a:	e0cb      	b.n	80076d4 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800753c:	4b67      	ldr	r3, [pc, #412]	; (80076dc <USER_SPI_initialize+0x1b4>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <USER_SPI_initialize+0x2a>
 800754a:	4b64      	ldr	r3, [pc, #400]	; (80076dc <USER_SPI_initialize+0x1b4>)
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	b2db      	uxtb	r3, r3
 8007550:	e0c0      	b.n	80076d4 <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 8007552:	4b63      	ldr	r3, [pc, #396]	; (80076e0 <USER_SPI_initialize+0x1b8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800755a:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800755c:	230a      	movs	r3, #10
 800755e:	73fb      	strb	r3, [r7, #15]
 8007560:	e005      	b.n	800756e <USER_SPI_initialize+0x46>
 8007562:	20ff      	movs	r0, #255	; 0xff
 8007564:	f7ff fe7e 	bl	8007264 <xchg_spi>
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	3b01      	subs	r3, #1
 800756c:	73fb      	strb	r3, [r7, #15]
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1f6      	bne.n	8007562 <USER_SPI_initialize+0x3a>

	ty = 0;
 8007574:	2300      	movs	r3, #0
 8007576:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007578:	2100      	movs	r1, #0
 800757a:	2000      	movs	r0, #0
 800757c:	f7ff ff65 	bl	800744a <send_cmd>
 8007580:	4603      	mov	r3, r0
 8007582:	2b01      	cmp	r3, #1
 8007584:	f040 808b 	bne.w	800769e <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800758c:	f7ff fe40 	bl	8007210 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007590:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007594:	2008      	movs	r0, #8
 8007596:	f7ff ff58 	bl	800744a <send_cmd>
 800759a:	4603      	mov	r3, r0
 800759c:	2b01      	cmp	r3, #1
 800759e:	d151      	bne.n	8007644 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
 80075a4:	e00d      	b.n	80075c2 <USER_SPI_initialize+0x9a>
 80075a6:	7bfc      	ldrb	r4, [r7, #15]
 80075a8:	20ff      	movs	r0, #255	; 0xff
 80075aa:	f7ff fe5b 	bl	8007264 <xchg_spi>
 80075ae:	4603      	mov	r3, r0
 80075b0:	461a      	mov	r2, r3
 80075b2:	f107 0310 	add.w	r3, r7, #16
 80075b6:	4423      	add	r3, r4
 80075b8:	f803 2c08 	strb.w	r2, [r3, #-8]
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	3301      	adds	r3, #1
 80075c0:	73fb      	strb	r3, [r7, #15]
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d9ee      	bls.n	80075a6 <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80075c8:	7abb      	ldrb	r3, [r7, #10]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d167      	bne.n	800769e <USER_SPI_initialize+0x176>
 80075ce:	7afb      	ldrb	r3, [r7, #11]
 80075d0:	2baa      	cmp	r3, #170	; 0xaa
 80075d2:	d164      	bne.n	800769e <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80075d4:	bf00      	nop
 80075d6:	f7ff fe2f 	bl	8007238 <SPI_Timer_Status>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d007      	beq.n	80075f0 <USER_SPI_initialize+0xc8>
 80075e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80075e4:	20a9      	movs	r0, #169	; 0xa9
 80075e6:	f7ff ff30 	bl	800744a <send_cmd>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1f2      	bne.n	80075d6 <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80075f0:	f7ff fe22 	bl	8007238 <SPI_Timer_Status>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d051      	beq.n	800769e <USER_SPI_initialize+0x176>
 80075fa:	2100      	movs	r1, #0
 80075fc:	203a      	movs	r0, #58	; 0x3a
 80075fe:	f7ff ff24 	bl	800744a <send_cmd>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d14a      	bne.n	800769e <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007608:	2300      	movs	r3, #0
 800760a:	73fb      	strb	r3, [r7, #15]
 800760c:	e00d      	b.n	800762a <USER_SPI_initialize+0x102>
 800760e:	7bfc      	ldrb	r4, [r7, #15]
 8007610:	20ff      	movs	r0, #255	; 0xff
 8007612:	f7ff fe27 	bl	8007264 <xchg_spi>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	f107 0310 	add.w	r3, r7, #16
 800761e:	4423      	add	r3, r4
 8007620:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	3301      	adds	r3, #1
 8007628:	73fb      	strb	r3, [r7, #15]
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	2b03      	cmp	r3, #3
 800762e:	d9ee      	bls.n	800760e <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007630:	7a3b      	ldrb	r3, [r7, #8]
 8007632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <USER_SPI_initialize+0x116>
 800763a:	230c      	movs	r3, #12
 800763c:	e000      	b.n	8007640 <USER_SPI_initialize+0x118>
 800763e:	2304      	movs	r3, #4
 8007640:	737b      	strb	r3, [r7, #13]
 8007642:	e02c      	b.n	800769e <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007644:	2100      	movs	r1, #0
 8007646:	20a9      	movs	r0, #169	; 0xa9
 8007648:	f7ff feff 	bl	800744a <send_cmd>
 800764c:	4603      	mov	r3, r0
 800764e:	2b01      	cmp	r3, #1
 8007650:	d804      	bhi.n	800765c <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007652:	2302      	movs	r3, #2
 8007654:	737b      	strb	r3, [r7, #13]
 8007656:	23a9      	movs	r3, #169	; 0xa9
 8007658:	73bb      	strb	r3, [r7, #14]
 800765a:	e003      	b.n	8007664 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800765c:	2301      	movs	r3, #1
 800765e:	737b      	strb	r3, [r7, #13]
 8007660:	2301      	movs	r3, #1
 8007662:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007664:	bf00      	nop
 8007666:	f7ff fde7 	bl	8007238 <SPI_Timer_Status>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d007      	beq.n	8007680 <USER_SPI_initialize+0x158>
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	2100      	movs	r1, #0
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff fee8 	bl	800744a <send_cmd>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1f2      	bne.n	8007666 <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007680:	f7ff fdda 	bl	8007238 <SPI_Timer_Status>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <USER_SPI_initialize+0x172>
 800768a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800768e:	2010      	movs	r0, #16
 8007690:	f7ff fedb 	bl	800744a <send_cmd>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <USER_SPI_initialize+0x176>
				ty = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 800769e:	4a11      	ldr	r2, [pc, #68]	; (80076e4 <USER_SPI_initialize+0x1bc>)
 80076a0:	7b7b      	ldrb	r3, [r7, #13]
 80076a2:	7013      	strb	r3, [r2, #0]
	despiselect();
 80076a4:	f7ff fe4e 	bl	8007344 <despiselect>

	if (ty) {			/* OK */
 80076a8:	7b7b      	ldrb	r3, [r7, #13]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00c      	beq.n	80076c8 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 80076ae:	4b0c      	ldr	r3, [pc, #48]	; (80076e0 <USER_SPI_initialize+0x1b8>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2210      	movs	r2, #16
 80076b4:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80076b6:	4b09      	ldr	r3, [pc, #36]	; (80076dc <USER_SPI_initialize+0x1b4>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	f023 0301 	bic.w	r3, r3, #1
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	4b06      	ldr	r3, [pc, #24]	; (80076dc <USER_SPI_initialize+0x1b4>)
 80076c4:	701a      	strb	r2, [r3, #0]
 80076c6:	e002      	b.n	80076ce <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80076c8:	4b04      	ldr	r3, [pc, #16]	; (80076dc <USER_SPI_initialize+0x1b4>)
 80076ca:	2201      	movs	r2, #1
 80076cc:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80076ce:	4b03      	ldr	r3, [pc, #12]	; (80076dc <USER_SPI_initialize+0x1b4>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	b2db      	uxtb	r3, r3
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd90      	pop	{r4, r7, pc}
 80076dc:	20000024 	.word	0x20000024
 80076e0:	20000650 	.word	0x20000650
 80076e4:	200000d8 	.word	0x200000d8

080076e8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <USER_SPI_status+0x14>
 80076f8:	2301      	movs	r3, #1
 80076fa:	e002      	b.n	8007702 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80076fc:	4b04      	ldr	r3, [pc, #16]	; (8007710 <USER_SPI_status+0x28>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	b2db      	uxtb	r3, r3
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	20000024 	.word	0x20000024

08007714 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	60b9      	str	r1, [r7, #8]
 800771c:	607a      	str	r2, [r7, #4]
 800771e:	603b      	str	r3, [r7, #0]
 8007720:	4603      	mov	r3, r0
 8007722:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d102      	bne.n	8007730 <USER_SPI_read+0x1c>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <USER_SPI_read+0x20>
 8007730:	2304      	movs	r3, #4
 8007732:	e04d      	b.n	80077d0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007734:	4b28      	ldr	r3, [pc, #160]	; (80077d8 <USER_SPI_read+0xc4>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <USER_SPI_read+0x32>
 8007742:	2303      	movs	r3, #3
 8007744:	e044      	b.n	80077d0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007746:	4b25      	ldr	r3, [pc, #148]	; (80077dc <USER_SPI_read+0xc8>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	2b00      	cmp	r3, #0
 8007750:	d102      	bne.n	8007758 <USER_SPI_read+0x44>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	025b      	lsls	r3, r3, #9
 8007756:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d111      	bne.n	8007782 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800775e:	6879      	ldr	r1, [r7, #4]
 8007760:	2011      	movs	r0, #17
 8007762:	f7ff fe72 	bl	800744a <send_cmd>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d129      	bne.n	80077c0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800776c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007770:	68b8      	ldr	r0, [r7, #8]
 8007772:	f7ff fe0f 	bl	8007394 <rcvr_datablock>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d021      	beq.n	80077c0 <USER_SPI_read+0xac>
			count = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	603b      	str	r3, [r7, #0]
 8007780:	e01e      	b.n	80077c0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	2012      	movs	r0, #18
 8007786:	f7ff fe60 	bl	800744a <send_cmd>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d117      	bne.n	80077c0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007790:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007794:	68b8      	ldr	r0, [r7, #8]
 8007796:	f7ff fdfd 	bl	8007394 <rcvr_datablock>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <USER_SPI_read+0xa2>
				buff += 512;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80077a6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	603b      	str	r3, [r7, #0]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1ed      	bne.n	8007790 <USER_SPI_read+0x7c>
 80077b4:	e000      	b.n	80077b8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80077b6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80077b8:	2100      	movs	r1, #0
 80077ba:	200c      	movs	r0, #12
 80077bc:	f7ff fe45 	bl	800744a <send_cmd>
		}
	}
	despiselect();
 80077c0:	f7ff fdc0 	bl	8007344 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bf14      	ite	ne
 80077ca:	2301      	movne	r3, #1
 80077cc:	2300      	moveq	r3, #0
 80077ce:	b2db      	uxtb	r3, r3
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20000024 	.word	0x20000024
 80077dc:	200000d8 	.word	0x200000d8

080077e0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
 80077ea:	603b      	str	r3, [r7, #0]
 80077ec:	4603      	mov	r3, r0
 80077ee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d102      	bne.n	80077fc <USER_SPI_write+0x1c>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <USER_SPI_write+0x20>
 80077fc:	2304      	movs	r3, #4
 80077fe:	e063      	b.n	80078c8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007800:	4b33      	ldr	r3, [pc, #204]	; (80078d0 <USER_SPI_write+0xf0>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <USER_SPI_write+0x32>
 800780e:	2303      	movs	r3, #3
 8007810:	e05a      	b.n	80078c8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007812:	4b2f      	ldr	r3, [pc, #188]	; (80078d0 <USER_SPI_write+0xf0>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	b2db      	uxtb	r3, r3
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <USER_SPI_write+0x44>
 8007820:	2302      	movs	r3, #2
 8007822:	e051      	b.n	80078c8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007824:	4b2b      	ldr	r3, [pc, #172]	; (80078d4 <USER_SPI_write+0xf4>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	f003 0308 	and.w	r3, r3, #8
 800782c:	2b00      	cmp	r3, #0
 800782e:	d102      	bne.n	8007836 <USER_SPI_write+0x56>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	025b      	lsls	r3, r3, #9
 8007834:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d110      	bne.n	800785e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	2018      	movs	r0, #24
 8007840:	f7ff fe03 	bl	800744a <send_cmd>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d136      	bne.n	80078b8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800784a:	21fe      	movs	r1, #254	; 0xfe
 800784c:	68b8      	ldr	r0, [r7, #8]
 800784e:	f7ff fdca 	bl	80073e6 <xmit_datablock>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d02f      	beq.n	80078b8 <USER_SPI_write+0xd8>
			count = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	603b      	str	r3, [r7, #0]
 800785c:	e02c      	b.n	80078b8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800785e:	4b1d      	ldr	r3, [pc, #116]	; (80078d4 <USER_SPI_write+0xf4>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f003 0306 	and.w	r3, r3, #6
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <USER_SPI_write+0x92>
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	2097      	movs	r0, #151	; 0x97
 800786e:	f7ff fdec 	bl	800744a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	2019      	movs	r0, #25
 8007876:	f7ff fde8 	bl	800744a <send_cmd>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d11b      	bne.n	80078b8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007880:	21fc      	movs	r1, #252	; 0xfc
 8007882:	68b8      	ldr	r0, [r7, #8]
 8007884:	f7ff fdaf 	bl	80073e6 <xmit_datablock>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <USER_SPI_write+0xc4>
				buff += 512;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007894:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	3b01      	subs	r3, #1
 800789a:	603b      	str	r3, [r7, #0]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1ee      	bne.n	8007880 <USER_SPI_write+0xa0>
 80078a2:	e000      	b.n	80078a6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80078a4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80078a6:	21fd      	movs	r1, #253	; 0xfd
 80078a8:	2000      	movs	r0, #0
 80078aa:	f7ff fd9c 	bl	80073e6 <xmit_datablock>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <USER_SPI_write+0xd8>
 80078b4:	2301      	movs	r3, #1
 80078b6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80078b8:	f7ff fd44 	bl	8007344 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bf14      	ite	ne
 80078c2:	2301      	movne	r3, #1
 80078c4:	2300      	moveq	r3, #0
 80078c6:	b2db      	uxtb	r3, r3
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	20000024 	.word	0x20000024
 80078d4:	200000d8 	.word	0x200000d8

080078d8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08c      	sub	sp, #48	; 0x30
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	603a      	str	r2, [r7, #0]
 80078e2:	71fb      	strb	r3, [r7, #7]
 80078e4:	460b      	mov	r3, r1
 80078e6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <USER_SPI_ioctl+0x1a>
 80078ee:	2304      	movs	r3, #4
 80078f0:	e15a      	b.n	8007ba8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80078f2:	4baf      	ldr	r3, [pc, #700]	; (8007bb0 <USER_SPI_ioctl+0x2d8>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <USER_SPI_ioctl+0x2c>
 8007900:	2303      	movs	r3, #3
 8007902:	e151      	b.n	8007ba8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800790a:	79bb      	ldrb	r3, [r7, #6]
 800790c:	2b04      	cmp	r3, #4
 800790e:	f200 8136 	bhi.w	8007b7e <USER_SPI_ioctl+0x2a6>
 8007912:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <USER_SPI_ioctl+0x40>)
 8007914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007918:	0800792d 	.word	0x0800792d
 800791c:	08007941 	.word	0x08007941
 8007920:	08007b7f 	.word	0x08007b7f
 8007924:	080079ed 	.word	0x080079ed
 8007928:	08007ae3 	.word	0x08007ae3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800792c:	f7ff fd18 	bl	8007360 <spiselect>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 8127 	beq.w	8007b86 <USER_SPI_ioctl+0x2ae>
 8007938:	2300      	movs	r3, #0
 800793a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800793e:	e122      	b.n	8007b86 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007940:	2100      	movs	r1, #0
 8007942:	2009      	movs	r0, #9
 8007944:	f7ff fd81 	bl	800744a <send_cmd>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	f040 811d 	bne.w	8007b8a <USER_SPI_ioctl+0x2b2>
 8007950:	f107 030c 	add.w	r3, r7, #12
 8007954:	2110      	movs	r1, #16
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff fd1c 	bl	8007394 <rcvr_datablock>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 8113 	beq.w	8007b8a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007964:	7b3b      	ldrb	r3, [r7, #12]
 8007966:	099b      	lsrs	r3, r3, #6
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b01      	cmp	r3, #1
 800796c:	d111      	bne.n	8007992 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800796e:	7d7b      	ldrb	r3, [r7, #21]
 8007970:	461a      	mov	r2, r3
 8007972:	7d3b      	ldrb	r3, [r7, #20]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	4413      	add	r3, r2
 8007978:	461a      	mov	r2, r3
 800797a:	7cfb      	ldrb	r3, [r7, #19]
 800797c:	041b      	lsls	r3, r3, #16
 800797e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007982:	4413      	add	r3, r2
 8007984:	3301      	adds	r3, #1
 8007986:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	029a      	lsls	r2, r3, #10
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	e028      	b.n	80079e4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007992:	7c7b      	ldrb	r3, [r7, #17]
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	b2da      	uxtb	r2, r3
 800799a:	7dbb      	ldrb	r3, [r7, #22]
 800799c:	09db      	lsrs	r3, r3, #7
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	4413      	add	r3, r2
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	7d7b      	ldrb	r3, [r7, #21]
 80079a6:	005b      	lsls	r3, r3, #1
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 0306 	and.w	r3, r3, #6
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	4413      	add	r3, r2
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	3302      	adds	r3, #2
 80079b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80079ba:	7d3b      	ldrb	r3, [r7, #20]
 80079bc:	099b      	lsrs	r3, r3, #6
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	7cfb      	ldrb	r3, [r7, #19]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	441a      	add	r2, r3
 80079c8:	7cbb      	ldrb	r3, [r7, #18]
 80079ca:	029b      	lsls	r3, r3, #10
 80079cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079d0:	4413      	add	r3, r2
 80079d2:	3301      	adds	r3, #1
 80079d4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80079d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079da:	3b09      	subs	r3, #9
 80079dc:	69fa      	ldr	r2, [r7, #28]
 80079de:	409a      	lsls	r2, r3
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80079ea:	e0ce      	b.n	8007b8a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80079ec:	4b71      	ldr	r3, [pc, #452]	; (8007bb4 <USER_SPI_ioctl+0x2dc>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d031      	beq.n	8007a5c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80079f8:	2100      	movs	r1, #0
 80079fa:	208d      	movs	r0, #141	; 0x8d
 80079fc:	f7ff fd25 	bl	800744a <send_cmd>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f040 80c3 	bne.w	8007b8e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007a08:	20ff      	movs	r0, #255	; 0xff
 8007a0a:	f7ff fc2b 	bl	8007264 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007a0e:	f107 030c 	add.w	r3, r7, #12
 8007a12:	2110      	movs	r1, #16
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff fcbd 	bl	8007394 <rcvr_datablock>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 80b6 	beq.w	8007b8e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007a22:	2330      	movs	r3, #48	; 0x30
 8007a24:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007a28:	e007      	b.n	8007a3a <USER_SPI_ioctl+0x162>
 8007a2a:	20ff      	movs	r0, #255	; 0xff
 8007a2c:	f7ff fc1a 	bl	8007264 <xchg_spi>
 8007a30:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007a34:	3b01      	subs	r3, #1
 8007a36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007a3a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1f3      	bne.n	8007a2a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007a42:	7dbb      	ldrb	r3, [r7, #22]
 8007a44:	091b      	lsrs	r3, r3, #4
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	461a      	mov	r2, r3
 8007a4a:	2310      	movs	r3, #16
 8007a4c:	fa03 f202 	lsl.w	r2, r3, r2
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007a5a:	e098      	b.n	8007b8e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	2009      	movs	r0, #9
 8007a60:	f7ff fcf3 	bl	800744a <send_cmd>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f040 8091 	bne.w	8007b8e <USER_SPI_ioctl+0x2b6>
 8007a6c:	f107 030c 	add.w	r3, r7, #12
 8007a70:	2110      	movs	r1, #16
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff fc8e 	bl	8007394 <rcvr_datablock>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 8087 	beq.w	8007b8e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007a80:	4b4c      	ldr	r3, [pc, #304]	; (8007bb4 <USER_SPI_ioctl+0x2dc>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d012      	beq.n	8007ab2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007a8c:	7dbb      	ldrb	r3, [r7, #22]
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007a94:	7dfa      	ldrb	r2, [r7, #23]
 8007a96:	09d2      	lsrs	r2, r2, #7
 8007a98:	b2d2      	uxtb	r2, r2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	7e7b      	ldrb	r3, [r7, #25]
 8007aa0:	099b      	lsrs	r3, r3, #6
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	e013      	b.n	8007ada <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007ab2:	7dbb      	ldrb	r3, [r7, #22]
 8007ab4:	109b      	asrs	r3, r3, #2
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f003 031f 	and.w	r3, r3, #31
 8007abc:	3301      	adds	r3, #1
 8007abe:	7dfa      	ldrb	r2, [r7, #23]
 8007ac0:	00d2      	lsls	r2, r2, #3
 8007ac2:	f002 0218 	and.w	r2, r2, #24
 8007ac6:	7df9      	ldrb	r1, [r7, #23]
 8007ac8:	0949      	lsrs	r1, r1, #5
 8007aca:	b2c9      	uxtb	r1, r1
 8007acc:	440a      	add	r2, r1
 8007ace:	3201      	adds	r2, #1
 8007ad0:	fb02 f303 	mul.w	r3, r2, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007ae0:	e055      	b.n	8007b8e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007ae2:	4b34      	ldr	r3, [pc, #208]	; (8007bb4 <USER_SPI_ioctl+0x2dc>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	f003 0306 	and.w	r3, r3, #6
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d051      	beq.n	8007b92 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007aee:	f107 020c 	add.w	r2, r7, #12
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	210b      	movs	r1, #11
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7ff feee 	bl	80078d8 <USER_SPI_ioctl>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d149      	bne.n	8007b96 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007b02:	7b3b      	ldrb	r3, [r7, #12]
 8007b04:	099b      	lsrs	r3, r3, #6
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d104      	bne.n	8007b16 <USER_SPI_ioctl+0x23e>
 8007b0c:	7dbb      	ldrb	r3, [r7, #22]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d041      	beq.n	8007b9a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	623b      	str	r3, [r7, #32]
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8007b26:	4b23      	ldr	r3, [pc, #140]	; (8007bb4 <USER_SPI_ioctl+0x2dc>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	f003 0308 	and.w	r3, r3, #8
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d105      	bne.n	8007b3e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b34:	025b      	lsls	r3, r3, #9
 8007b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	025b      	lsls	r3, r3, #9
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b40:	2020      	movs	r0, #32
 8007b42:	f7ff fc82 	bl	800744a <send_cmd>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d128      	bne.n	8007b9e <USER_SPI_ioctl+0x2c6>
 8007b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b4e:	2021      	movs	r0, #33	; 0x21
 8007b50:	f7ff fc7b 	bl	800744a <send_cmd>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d121      	bne.n	8007b9e <USER_SPI_ioctl+0x2c6>
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	2026      	movs	r0, #38	; 0x26
 8007b5e:	f7ff fc74 	bl	800744a <send_cmd>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d11a      	bne.n	8007b9e <USER_SPI_ioctl+0x2c6>
 8007b68:	f247 5030 	movw	r0, #30000	; 0x7530
 8007b6c:	f7ff fbc7 	bl	80072fe <wait_ready>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d013      	beq.n	8007b9e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007b76:	2300      	movs	r3, #0
 8007b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007b7c:	e00f      	b.n	8007b9e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007b7e:	2304      	movs	r3, #4
 8007b80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b84:	e00c      	b.n	8007ba0 <USER_SPI_ioctl+0x2c8>
		break;
 8007b86:	bf00      	nop
 8007b88:	e00a      	b.n	8007ba0 <USER_SPI_ioctl+0x2c8>
		break;
 8007b8a:	bf00      	nop
 8007b8c:	e008      	b.n	8007ba0 <USER_SPI_ioctl+0x2c8>
		break;
 8007b8e:	bf00      	nop
 8007b90:	e006      	b.n	8007ba0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007b92:	bf00      	nop
 8007b94:	e004      	b.n	8007ba0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007b96:	bf00      	nop
 8007b98:	e002      	b.n	8007ba0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007b9a:	bf00      	nop
 8007b9c:	e000      	b.n	8007ba0 <USER_SPI_ioctl+0x2c8>
		break;
 8007b9e:	bf00      	nop
	}

	despiselect();
 8007ba0:	f7ff fbd0 	bl	8007344 <despiselect>

	return res;
 8007ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3730      	adds	r7, #48	; 0x30
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	20000024 	.word	0x20000024
 8007bb4:	200000d8 	.word	0x200000d8

08007bb8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	4a08      	ldr	r2, [pc, #32]	; (8007be8 <disk_status+0x30>)
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	79fa      	ldrb	r2, [r7, #7]
 8007bd0:	4905      	ldr	r1, [pc, #20]	; (8007be8 <disk_status+0x30>)
 8007bd2:	440a      	add	r2, r1
 8007bd4:	7a12      	ldrb	r2, [r2, #8]
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4798      	blx	r3
 8007bda:	4603      	mov	r3, r0
 8007bdc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20000124 	.word	0x20000124

08007bec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	4a0d      	ldr	r2, [pc, #52]	; (8007c34 <disk_initialize+0x48>)
 8007bfe:	5cd3      	ldrb	r3, [r2, r3]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d111      	bne.n	8007c28 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	4a0b      	ldr	r2, [pc, #44]	; (8007c34 <disk_initialize+0x48>)
 8007c08:	2101      	movs	r1, #1
 8007c0a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	4a09      	ldr	r2, [pc, #36]	; (8007c34 <disk_initialize+0x48>)
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	79fa      	ldrb	r2, [r7, #7]
 8007c1a:	4906      	ldr	r1, [pc, #24]	; (8007c34 <disk_initialize+0x48>)
 8007c1c:	440a      	add	r2, r1
 8007c1e:	7a12      	ldrb	r2, [r2, #8]
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20000124 	.word	0x20000124

08007c38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007c38:	b590      	push	{r4, r7, lr}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	607a      	str	r2, [r7, #4]
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	4603      	mov	r3, r0
 8007c46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	4a0a      	ldr	r2, [pc, #40]	; (8007c74 <disk_read+0x3c>)
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	689c      	ldr	r4, [r3, #8]
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	4a07      	ldr	r2, [pc, #28]	; (8007c74 <disk_read+0x3c>)
 8007c58:	4413      	add	r3, r2
 8007c5a:	7a18      	ldrb	r0, [r3, #8]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	68b9      	ldr	r1, [r7, #8]
 8007c62:	47a0      	blx	r4
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	371c      	adds	r7, #28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd90      	pop	{r4, r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20000124 	.word	0x20000124

08007c78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007c78:	b590      	push	{r4, r7, lr}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60b9      	str	r1, [r7, #8]
 8007c80:	607a      	str	r2, [r7, #4]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	4a0a      	ldr	r2, [pc, #40]	; (8007cb4 <disk_write+0x3c>)
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	68dc      	ldr	r4, [r3, #12]
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	4a07      	ldr	r2, [pc, #28]	; (8007cb4 <disk_write+0x3c>)
 8007c98:	4413      	add	r3, r2
 8007c9a:	7a18      	ldrb	r0, [r3, #8]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	68b9      	ldr	r1, [r7, #8]
 8007ca2:	47a0      	blx	r4
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	371c      	adds	r7, #28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd90      	pop	{r4, r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000124 	.word	0x20000124

08007cb8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	603a      	str	r2, [r7, #0]
 8007cc2:	71fb      	strb	r3, [r7, #7]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	4a09      	ldr	r2, [pc, #36]	; (8007cf0 <disk_ioctl+0x38>)
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	79fa      	ldrb	r2, [r7, #7]
 8007cd6:	4906      	ldr	r1, [pc, #24]	; (8007cf0 <disk_ioctl+0x38>)
 8007cd8:	440a      	add	r2, r1
 8007cda:	7a10      	ldrb	r0, [r2, #8]
 8007cdc:	79b9      	ldrb	r1, [r7, #6]
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	4798      	blx	r3
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73fb      	strb	r3, [r7, #15]
  return res;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20000124 	.word	0x20000124

08007cf4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007d04:	89fb      	ldrh	r3, [r7, #14]
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	b21a      	sxth	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	b21b      	sxth	r3, r3
 8007d10:	4313      	orrs	r3, r2
 8007d12:	b21b      	sxth	r3, r3
 8007d14:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007d16:	89fb      	ldrh	r3, [r7, #14]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3303      	adds	r3, #3
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	021b      	lsls	r3, r3, #8
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	3202      	adds	r2, #2
 8007d3c:	7812      	ldrb	r2, [r2, #0]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	3201      	adds	r2, #1
 8007d4a:	7812      	ldrb	r2, [r2, #0]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	021b      	lsls	r3, r3, #8
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	7812      	ldrb	r2, [r2, #0]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
	return rv;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	887a      	ldrh	r2, [r7, #2]
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	701a      	strb	r2, [r3, #0]
 8007d82:	887b      	ldrh	r3, [r7, #2]
 8007d84:	0a1b      	lsrs	r3, r3, #8
 8007d86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	607a      	str	r2, [r7, #4]
 8007d8e:	887a      	ldrh	r2, [r7, #2]
 8007d90:	b2d2      	uxtb	r2, r2
 8007d92:	701a      	strb	r2, [r3, #0]
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	b2d2      	uxtb	r2, r2
 8007db4:	701a      	strb	r2, [r3, #0]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	0a1b      	lsrs	r3, r3, #8
 8007dba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	1c5a      	adds	r2, r3, #1
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	701a      	strb	r2, [r3, #0]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	0a1b      	lsrs	r3, r3, #8
 8007dcc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	b2d2      	uxtb	r2, r2
 8007dd8:	701a      	strb	r2, [r3, #0]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	0a1b      	lsrs	r3, r3, #8
 8007dde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	607a      	str	r2, [r7, #4]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	b2d2      	uxtb	r2, r2
 8007dea:	701a      	strb	r2, [r3, #0]
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00d      	beq.n	8007e2e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	1c53      	adds	r3, r2, #1
 8007e16:	613b      	str	r3, [r7, #16]
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	1c59      	adds	r1, r3, #1
 8007e1c:	6179      	str	r1, [r7, #20]
 8007e1e:	7812      	ldrb	r2, [r2, #0]
 8007e20:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	607b      	str	r3, [r7, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1f1      	bne.n	8007e12 <mem_cpy+0x1a>
	}
}
 8007e2e:	bf00      	nop
 8007e30:	371c      	adds	r7, #28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007e3a:	b480      	push	{r7}
 8007e3c:	b087      	sub	sp, #28
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	617a      	str	r2, [r7, #20]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	b2d2      	uxtb	r2, r2
 8007e54:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	607b      	str	r3, [r7, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1f3      	bne.n	8007e4a <mem_set+0x10>
}
 8007e62:	bf00      	nop
 8007e64:	bf00      	nop
 8007e66:	371c      	adds	r7, #28
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007e70:	b480      	push	{r7}
 8007e72:	b089      	sub	sp, #36	; 0x24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	61fb      	str	r3, [r7, #28]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	61fa      	str	r2, [r7, #28]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	4619      	mov	r1, r3
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	61ba      	str	r2, [r7, #24]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	1acb      	subs	r3, r1, r3
 8007e9c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	607b      	str	r3, [r7, #4]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <mem_cmp+0x40>
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0eb      	beq.n	8007e88 <mem_cmp+0x18>

	return r;
 8007eb0:	697b      	ldr	r3, [r7, #20]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3724      	adds	r7, #36	; 0x24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007ec8:	e002      	b.n	8007ed0 <chk_chr+0x12>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	607b      	str	r3, [r7, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d005      	beq.n	8007ee4 <chk_chr+0x26>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d1f2      	bne.n	8007eca <chk_chr+0xc>
	return *str;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007efe:	2300      	movs	r3, #0
 8007f00:	60bb      	str	r3, [r7, #8]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	60fb      	str	r3, [r7, #12]
 8007f06:	e029      	b.n	8007f5c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007f08:	4a27      	ldr	r2, [pc, #156]	; (8007fa8 <chk_lock+0xb4>)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	011b      	lsls	r3, r3, #4
 8007f0e:	4413      	add	r3, r2
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d01d      	beq.n	8007f52 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f16:	4a24      	ldr	r2, [pc, #144]	; (8007fa8 <chk_lock+0xb4>)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	011b      	lsls	r3, r3, #4
 8007f1c:	4413      	add	r3, r2
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d116      	bne.n	8007f56 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007f28:	4a1f      	ldr	r2, [pc, #124]	; (8007fa8 <chk_lock+0xb4>)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	4413      	add	r3, r2
 8007f30:	3304      	adds	r3, #4
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d10c      	bne.n	8007f56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007f3c:	4a1a      	ldr	r2, [pc, #104]	; (8007fa8 <chk_lock+0xb4>)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	011b      	lsls	r3, r3, #4
 8007f42:	4413      	add	r3, r2
 8007f44:	3308      	adds	r3, #8
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d102      	bne.n	8007f56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007f50:	e007      	b.n	8007f62 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007f52:	2301      	movs	r3, #1
 8007f54:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d9d2      	bls.n	8007f08 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d109      	bne.n	8007f7c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d102      	bne.n	8007f74 <chk_lock+0x80>
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d101      	bne.n	8007f78 <chk_lock+0x84>
 8007f74:	2300      	movs	r3, #0
 8007f76:	e010      	b.n	8007f9a <chk_lock+0xa6>
 8007f78:	2312      	movs	r3, #18
 8007f7a:	e00e      	b.n	8007f9a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d108      	bne.n	8007f94 <chk_lock+0xa0>
 8007f82:	4a09      	ldr	r2, [pc, #36]	; (8007fa8 <chk_lock+0xb4>)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	011b      	lsls	r3, r3, #4
 8007f88:	4413      	add	r3, r2
 8007f8a:	330c      	adds	r3, #12
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f92:	d101      	bne.n	8007f98 <chk_lock+0xa4>
 8007f94:	2310      	movs	r3, #16
 8007f96:	e000      	b.n	8007f9a <chk_lock+0xa6>
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	200000e4 	.word	0x200000e4

08007fac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	607b      	str	r3, [r7, #4]
 8007fb6:	e002      	b.n	8007fbe <enq_lock+0x12>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	607b      	str	r3, [r7, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d806      	bhi.n	8007fd2 <enq_lock+0x26>
 8007fc4:	4a09      	ldr	r2, [pc, #36]	; (8007fec <enq_lock+0x40>)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	4413      	add	r3, r2
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1f2      	bne.n	8007fb8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	bf14      	ite	ne
 8007fd8:	2301      	movne	r3, #1
 8007fda:	2300      	moveq	r3, #0
 8007fdc:	b2db      	uxtb	r3, r3
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	200000e4 	.word	0x200000e4

08007ff0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60fb      	str	r3, [r7, #12]
 8007ffe:	e01f      	b.n	8008040 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008000:	4a41      	ldr	r2, [pc, #260]	; (8008108 <inc_lock+0x118>)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	011b      	lsls	r3, r3, #4
 8008006:	4413      	add	r3, r2
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	429a      	cmp	r2, r3
 8008010:	d113      	bne.n	800803a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008012:	4a3d      	ldr	r2, [pc, #244]	; (8008108 <inc_lock+0x118>)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	4413      	add	r3, r2
 800801a:	3304      	adds	r3, #4
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008022:	429a      	cmp	r2, r3
 8008024:	d109      	bne.n	800803a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008026:	4a38      	ldr	r2, [pc, #224]	; (8008108 <inc_lock+0x118>)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	4413      	add	r3, r2
 800802e:	3308      	adds	r3, #8
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008036:	429a      	cmp	r2, r3
 8008038:	d006      	beq.n	8008048 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3301      	adds	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d9dc      	bls.n	8008000 <inc_lock+0x10>
 8008046:	e000      	b.n	800804a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008048:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b02      	cmp	r3, #2
 800804e:	d132      	bne.n	80080b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	e002      	b.n	800805c <inc_lock+0x6c>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3301      	adds	r3, #1
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d806      	bhi.n	8008070 <inc_lock+0x80>
 8008062:	4a29      	ldr	r2, [pc, #164]	; (8008108 <inc_lock+0x118>)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	4413      	add	r3, r2
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1f2      	bne.n	8008056 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d101      	bne.n	800807a <inc_lock+0x8a>
 8008076:	2300      	movs	r3, #0
 8008078:	e040      	b.n	80080fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	4922      	ldr	r1, [pc, #136]	; (8008108 <inc_lock+0x118>)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	011b      	lsls	r3, r3, #4
 8008084:	440b      	add	r3, r1
 8008086:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	689a      	ldr	r2, [r3, #8]
 800808c:	491e      	ldr	r1, [pc, #120]	; (8008108 <inc_lock+0x118>)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	011b      	lsls	r3, r3, #4
 8008092:	440b      	add	r3, r1
 8008094:	3304      	adds	r3, #4
 8008096:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	695a      	ldr	r2, [r3, #20]
 800809c:	491a      	ldr	r1, [pc, #104]	; (8008108 <inc_lock+0x118>)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	011b      	lsls	r3, r3, #4
 80080a2:	440b      	add	r3, r1
 80080a4:	3308      	adds	r3, #8
 80080a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80080a8:	4a17      	ldr	r2, [pc, #92]	; (8008108 <inc_lock+0x118>)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	011b      	lsls	r3, r3, #4
 80080ae:	4413      	add	r3, r2
 80080b0:	330c      	adds	r3, #12
 80080b2:	2200      	movs	r2, #0
 80080b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d009      	beq.n	80080d0 <inc_lock+0xe0>
 80080bc:	4a12      	ldr	r2, [pc, #72]	; (8008108 <inc_lock+0x118>)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	011b      	lsls	r3, r3, #4
 80080c2:	4413      	add	r3, r2
 80080c4:	330c      	adds	r3, #12
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <inc_lock+0xe0>
 80080cc:	2300      	movs	r3, #0
 80080ce:	e015      	b.n	80080fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d108      	bne.n	80080e8 <inc_lock+0xf8>
 80080d6:	4a0c      	ldr	r2, [pc, #48]	; (8008108 <inc_lock+0x118>)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	4413      	add	r3, r2
 80080de:	330c      	adds	r3, #12
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	3301      	adds	r3, #1
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	e001      	b.n	80080ec <inc_lock+0xfc>
 80080e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080ec:	4906      	ldr	r1, [pc, #24]	; (8008108 <inc_lock+0x118>)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	440b      	add	r3, r1
 80080f4:	330c      	adds	r3, #12
 80080f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3301      	adds	r3, #1
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	200000e4 	.word	0x200000e4

0800810c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3b01      	subs	r3, #1
 8008118:	607b      	str	r3, [r7, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d825      	bhi.n	800816c <dec_lock+0x60>
		n = Files[i].ctr;
 8008120:	4a17      	ldr	r2, [pc, #92]	; (8008180 <dec_lock+0x74>)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	4413      	add	r3, r2
 8008128:	330c      	adds	r3, #12
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800812e:	89fb      	ldrh	r3, [r7, #14]
 8008130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008134:	d101      	bne.n	800813a <dec_lock+0x2e>
 8008136:	2300      	movs	r3, #0
 8008138:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800813a:	89fb      	ldrh	r3, [r7, #14]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <dec_lock+0x3a>
 8008140:	89fb      	ldrh	r3, [r7, #14]
 8008142:	3b01      	subs	r3, #1
 8008144:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008146:	4a0e      	ldr	r2, [pc, #56]	; (8008180 <dec_lock+0x74>)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	011b      	lsls	r3, r3, #4
 800814c:	4413      	add	r3, r2
 800814e:	330c      	adds	r3, #12
 8008150:	89fa      	ldrh	r2, [r7, #14]
 8008152:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008154:	89fb      	ldrh	r3, [r7, #14]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d105      	bne.n	8008166 <dec_lock+0x5a>
 800815a:	4a09      	ldr	r2, [pc, #36]	; (8008180 <dec_lock+0x74>)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	011b      	lsls	r3, r3, #4
 8008160:	4413      	add	r3, r2
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	737b      	strb	r3, [r7, #13]
 800816a:	e001      	b.n	8008170 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800816c:	2302      	movs	r3, #2
 800816e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008170:	7b7b      	ldrb	r3, [r7, #13]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	200000e4 	.word	0x200000e4

08008184 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800818c:	2300      	movs	r3, #0
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	e010      	b.n	80081b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008192:	4a0d      	ldr	r2, [pc, #52]	; (80081c8 <clear_lock+0x44>)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	011b      	lsls	r3, r3, #4
 8008198:	4413      	add	r3, r2
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d105      	bne.n	80081ae <clear_lock+0x2a>
 80081a2:	4a09      	ldr	r2, [pc, #36]	; (80081c8 <clear_lock+0x44>)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	011b      	lsls	r3, r3, #4
 80081a8:	4413      	add	r3, r2
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3301      	adds	r3, #1
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d9eb      	bls.n	8008192 <clear_lock+0xe>
	}
}
 80081ba:	bf00      	nop
 80081bc:	bf00      	nop
 80081be:	3714      	adds	r7, #20
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	200000e4 	.word	0x200000e4

080081cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	78db      	ldrb	r3, [r3, #3]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d034      	beq.n	800824a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	7858      	ldrb	r0, [r3, #1]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80081f0:	2301      	movs	r3, #1
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	f7ff fd40 	bl	8007c78 <disk_write>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <sync_window+0x38>
			res = FR_DISK_ERR;
 80081fe:	2301      	movs	r3, #1
 8008200:	73fb      	strb	r3, [r7, #15]
 8008202:	e022      	b.n	800824a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	1ad2      	subs	r2, r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	429a      	cmp	r2, r3
 8008218:	d217      	bcs.n	800824a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	789b      	ldrb	r3, [r3, #2]
 800821e:	613b      	str	r3, [r7, #16]
 8008220:	e010      	b.n	8008244 <sync_window+0x78>
					wsect += fs->fsize;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	4413      	add	r3, r2
 800822a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	7858      	ldrb	r0, [r3, #1]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008236:	2301      	movs	r3, #1
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	f7ff fd1d 	bl	8007c78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	3b01      	subs	r3, #1
 8008242:	613b      	str	r3, [r7, #16]
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d8eb      	bhi.n	8008222 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	429a      	cmp	r2, r3
 800826a:	d01b      	beq.n	80082a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7ff ffad 	bl	80081cc <sync_window>
 8008272:	4603      	mov	r3, r0
 8008274:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d113      	bne.n	80082a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	7858      	ldrb	r0, [r3, #1]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008286:	2301      	movs	r3, #1
 8008288:	683a      	ldr	r2, [r7, #0]
 800828a:	f7ff fcd5 	bl	8007c38 <disk_read>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d004      	beq.n	800829e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008294:	f04f 33ff 	mov.w	r3, #4294967295
 8008298:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800829a:	2301      	movs	r3, #1
 800829c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff ff87 	bl	80081cc <sync_window>
 80082be:	4603      	mov	r3, r0
 80082c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d158      	bne.n	800837a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d148      	bne.n	8008362 <sync_fs+0xb2>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	791b      	ldrb	r3, [r3, #4]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d144      	bne.n	8008362 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3334      	adds	r3, #52	; 0x34
 80082dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082e0:	2100      	movs	r1, #0
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff fda9 	bl	8007e3a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3334      	adds	r3, #52	; 0x34
 80082ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80082f0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7ff fd38 	bl	8007d6a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3334      	adds	r3, #52	; 0x34
 80082fe:	4921      	ldr	r1, [pc, #132]	; (8008384 <sync_fs+0xd4>)
 8008300:	4618      	mov	r0, r3
 8008302:	f7ff fd4d 	bl	8007da0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3334      	adds	r3, #52	; 0x34
 800830a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800830e:	491e      	ldr	r1, [pc, #120]	; (8008388 <sync_fs+0xd8>)
 8008310:	4618      	mov	r0, r3
 8008312:	f7ff fd45 	bl	8007da0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	3334      	adds	r3, #52	; 0x34
 800831a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f7ff fd3b 	bl	8007da0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3334      	adds	r3, #52	; 0x34
 800832e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	4619      	mov	r1, r3
 8008338:	4610      	mov	r0, r2
 800833a:	f7ff fd31 	bl	8007da0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	7858      	ldrb	r0, [r3, #1]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008356:	2301      	movs	r3, #1
 8008358:	f7ff fc8e 	bl	8007c78 <disk_write>
			fs->fsi_flag = 0;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	2200      	movs	r2, #0
 8008368:	2100      	movs	r1, #0
 800836a:	4618      	mov	r0, r3
 800836c:	f7ff fca4 	bl	8007cb8 <disk_ioctl>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <sync_fs+0xca>
 8008376:	2301      	movs	r3, #1
 8008378:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800837a:	7bfb      	ldrb	r3, [r7, #15]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	41615252 	.word	0x41615252
 8008388:	61417272 	.word	0x61417272

0800838c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	3b02      	subs	r3, #2
 800839a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	3b02      	subs	r3, #2
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d301      	bcc.n	80083ac <clust2sect+0x20>
 80083a8:	2300      	movs	r3, #0
 80083aa:	e008      	b.n	80083be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	895b      	ldrh	r3, [r3, #10]
 80083b0:	461a      	mov	r2, r3
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	fb03 f202 	mul.w	r2, r3, r2
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	4413      	add	r3, r2
}
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b086      	sub	sp, #24
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d904      	bls.n	80083ea <get_fat+0x20>
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d302      	bcc.n	80083f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80083ea:	2301      	movs	r3, #1
 80083ec:	617b      	str	r3, [r7, #20]
 80083ee:	e08f      	b.n	8008510 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80083f0:	f04f 33ff 	mov.w	r3, #4294967295
 80083f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d062      	beq.n	80084c4 <get_fat+0xfa>
 80083fe:	2b03      	cmp	r3, #3
 8008400:	dc7c      	bgt.n	80084fc <get_fat+0x132>
 8008402:	2b01      	cmp	r3, #1
 8008404:	d002      	beq.n	800840c <get_fat+0x42>
 8008406:	2b02      	cmp	r3, #2
 8008408:	d042      	beq.n	8008490 <get_fat+0xc6>
 800840a:	e077      	b.n	80084fc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	085b      	lsrs	r3, r3, #1
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	0a5b      	lsrs	r3, r3, #9
 8008422:	4413      	add	r3, r2
 8008424:	4619      	mov	r1, r3
 8008426:	6938      	ldr	r0, [r7, #16]
 8008428:	f7ff ff14 	bl	8008254 <move_window>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d167      	bne.n	8008502 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	60fa      	str	r2, [r7, #12]
 8008438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	4413      	add	r3, r2
 8008440:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008444:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	0a5b      	lsrs	r3, r3, #9
 800844e:	4413      	add	r3, r2
 8008450:	4619      	mov	r1, r3
 8008452:	6938      	ldr	r0, [r7, #16]
 8008454:	f7ff fefe 	bl	8008254 <move_window>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d153      	bne.n	8008506 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	4413      	add	r3, r2
 8008468:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800846c:	021b      	lsls	r3, r3, #8
 800846e:	461a      	mov	r2, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	4313      	orrs	r3, r2
 8008474:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <get_fat+0xbc>
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	091b      	lsrs	r3, r3, #4
 8008484:	e002      	b.n	800848c <get_fat+0xc2>
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800848c:	617b      	str	r3, [r7, #20]
			break;
 800848e:	e03f      	b.n	8008510 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	0a1b      	lsrs	r3, r3, #8
 8008498:	4413      	add	r3, r2
 800849a:	4619      	mov	r1, r3
 800849c:	6938      	ldr	r0, [r7, #16]
 800849e:	f7ff fed9 	bl	8008254 <move_window>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d130      	bne.n	800850a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80084b6:	4413      	add	r3, r2
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7ff fc1b 	bl	8007cf4 <ld_word>
 80084be:	4603      	mov	r3, r0
 80084c0:	617b      	str	r3, [r7, #20]
			break;
 80084c2:	e025      	b.n	8008510 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	09db      	lsrs	r3, r3, #7
 80084cc:	4413      	add	r3, r2
 80084ce:	4619      	mov	r1, r3
 80084d0:	6938      	ldr	r0, [r7, #16]
 80084d2:	f7ff febf 	bl	8008254 <move_window>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d118      	bne.n	800850e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80084ea:	4413      	add	r3, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7ff fc19 	bl	8007d24 <ld_dword>
 80084f2:	4603      	mov	r3, r0
 80084f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80084f8:	617b      	str	r3, [r7, #20]
			break;
 80084fa:	e009      	b.n	8008510 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80084fc:	2301      	movs	r3, #1
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	e006      	b.n	8008510 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008502:	bf00      	nop
 8008504:	e004      	b.n	8008510 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008506:	bf00      	nop
 8008508:	e002      	b.n	8008510 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800850a:	bf00      	nop
 800850c:	e000      	b.n	8008510 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800850e:	bf00      	nop
		}
	}

	return val;
 8008510:	697b      	ldr	r3, [r7, #20]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800851a:	b590      	push	{r4, r7, lr}
 800851c:	b089      	sub	sp, #36	; 0x24
 800851e:	af00      	add	r7, sp, #0
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008526:	2302      	movs	r3, #2
 8008528:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2b01      	cmp	r3, #1
 800852e:	f240 80d2 	bls.w	80086d6 <put_fat+0x1bc>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	429a      	cmp	r2, r3
 800853a:	f080 80cc 	bcs.w	80086d6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b03      	cmp	r3, #3
 8008544:	f000 8096 	beq.w	8008674 <put_fat+0x15a>
 8008548:	2b03      	cmp	r3, #3
 800854a:	f300 80cd 	bgt.w	80086e8 <put_fat+0x1ce>
 800854e:	2b01      	cmp	r3, #1
 8008550:	d002      	beq.n	8008558 <put_fat+0x3e>
 8008552:	2b02      	cmp	r3, #2
 8008554:	d06e      	beq.n	8008634 <put_fat+0x11a>
 8008556:	e0c7      	b.n	80086e8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	61bb      	str	r3, [r7, #24]
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	085b      	lsrs	r3, r3, #1
 8008560:	69ba      	ldr	r2, [r7, #24]
 8008562:	4413      	add	r3, r2
 8008564:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	0a5b      	lsrs	r3, r3, #9
 800856e:	4413      	add	r3, r2
 8008570:	4619      	mov	r1, r3
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f7ff fe6e 	bl	8008254 <move_window>
 8008578:	4603      	mov	r3, r0
 800857a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800857c:	7ffb      	ldrb	r3, [r7, #31]
 800857e:	2b00      	cmp	r3, #0
 8008580:	f040 80ab 	bne.w	80086da <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	1c59      	adds	r1, r3, #1
 800858e:	61b9      	str	r1, [r7, #24]
 8008590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008594:	4413      	add	r3, r2
 8008596:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00d      	beq.n	80085be <put_fat+0xa4>
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	b25b      	sxtb	r3, r3
 80085a8:	f003 030f 	and.w	r3, r3, #15
 80085ac:	b25a      	sxtb	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	011b      	lsls	r3, r3, #4
 80085b4:	b25b      	sxtb	r3, r3
 80085b6:	4313      	orrs	r3, r2
 80085b8:	b25b      	sxtb	r3, r3
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	e001      	b.n	80085c2 <put_fat+0xa8>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	0a5b      	lsrs	r3, r3, #9
 80085d4:	4413      	add	r3, r2
 80085d6:	4619      	mov	r1, r3
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff fe3b 	bl	8008254 <move_window>
 80085de:	4603      	mov	r3, r0
 80085e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085e2:	7ffb      	ldrb	r3, [r7, #31]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d17a      	bne.n	80086de <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f4:	4413      	add	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <put_fat+0xf0>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	091b      	lsrs	r3, r3, #4
 8008606:	b2db      	uxtb	r3, r3
 8008608:	e00e      	b.n	8008628 <put_fat+0x10e>
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	b25b      	sxtb	r3, r3
 8008610:	f023 030f 	bic.w	r3, r3, #15
 8008614:	b25a      	sxtb	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	0a1b      	lsrs	r3, r3, #8
 800861a:	b25b      	sxtb	r3, r3
 800861c:	f003 030f 	and.w	r3, r3, #15
 8008620:	b25b      	sxtb	r3, r3
 8008622:	4313      	orrs	r3, r2
 8008624:	b25b      	sxtb	r3, r3
 8008626:	b2db      	uxtb	r3, r3
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2201      	movs	r2, #1
 8008630:	70da      	strb	r2, [r3, #3]
			break;
 8008632:	e059      	b.n	80086e8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	0a1b      	lsrs	r3, r3, #8
 800863c:	4413      	add	r3, r2
 800863e:	4619      	mov	r1, r3
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f7ff fe07 	bl	8008254 <move_window>
 8008646:	4603      	mov	r3, r0
 8008648:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800864a:	7ffb      	ldrb	r3, [r7, #31]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d148      	bne.n	80086e2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800865e:	4413      	add	r3, r2
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	b292      	uxth	r2, r2
 8008664:	4611      	mov	r1, r2
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff fb7f 	bl	8007d6a <st_word>
			fs->wflag = 1;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2201      	movs	r2, #1
 8008670:	70da      	strb	r2, [r3, #3]
			break;
 8008672:	e039      	b.n	80086e8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	09db      	lsrs	r3, r3, #7
 800867c:	4413      	add	r3, r2
 800867e:	4619      	mov	r1, r3
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f7ff fde7 	bl	8008254 <move_window>
 8008686:	4603      	mov	r3, r0
 8008688:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800868a:	7ffb      	ldrb	r3, [r7, #31]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d12a      	bne.n	80086e6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80086a4:	4413      	add	r3, r2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff fb3c 	bl	8007d24 <ld_dword>
 80086ac:	4603      	mov	r3, r0
 80086ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80086b2:	4323      	orrs	r3, r4
 80086b4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80086c4:	4413      	add	r3, r2
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff fb69 	bl	8007da0 <st_dword>
			fs->wflag = 1;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2201      	movs	r2, #1
 80086d2:	70da      	strb	r2, [r3, #3]
			break;
 80086d4:	e008      	b.n	80086e8 <put_fat+0x1ce>
		}
	}
 80086d6:	bf00      	nop
 80086d8:	e006      	b.n	80086e8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80086da:	bf00      	nop
 80086dc:	e004      	b.n	80086e8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80086de:	bf00      	nop
 80086e0:	e002      	b.n	80086e8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80086e2:	bf00      	nop
 80086e4:	e000      	b.n	80086e8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80086e6:	bf00      	nop
	return res;
 80086e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3724      	adds	r7, #36	; 0x24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd90      	pop	{r4, r7, pc}

080086f2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b088      	sub	sp, #32
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d904      	bls.n	8008718 <remove_chain+0x26>
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	429a      	cmp	r2, r3
 8008716:	d301      	bcc.n	800871c <remove_chain+0x2a>
 8008718:	2302      	movs	r3, #2
 800871a:	e04b      	b.n	80087b4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00c      	beq.n	800873c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008722:	f04f 32ff 	mov.w	r2, #4294967295
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	69b8      	ldr	r0, [r7, #24]
 800872a:	f7ff fef6 	bl	800851a <put_fat>
 800872e:	4603      	mov	r3, r0
 8008730:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008732:	7ffb      	ldrb	r3, [r7, #31]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <remove_chain+0x4a>
 8008738:	7ffb      	ldrb	r3, [r7, #31]
 800873a:	e03b      	b.n	80087b4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800873c:	68b9      	ldr	r1, [r7, #8]
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7ff fe43 	bl	80083ca <get_fat>
 8008744:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d031      	beq.n	80087b0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d101      	bne.n	8008756 <remove_chain+0x64>
 8008752:	2302      	movs	r3, #2
 8008754:	e02e      	b.n	80087b4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875c:	d101      	bne.n	8008762 <remove_chain+0x70>
 800875e:	2301      	movs	r3, #1
 8008760:	e028      	b.n	80087b4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008762:	2200      	movs	r2, #0
 8008764:	68b9      	ldr	r1, [r7, #8]
 8008766:	69b8      	ldr	r0, [r7, #24]
 8008768:	f7ff fed7 	bl	800851a <put_fat>
 800876c:	4603      	mov	r3, r0
 800876e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008770:	7ffb      	ldrb	r3, [r7, #31]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <remove_chain+0x88>
 8008776:	7ffb      	ldrb	r3, [r7, #31]
 8008778:	e01c      	b.n	80087b4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	695a      	ldr	r2, [r3, #20]
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	3b02      	subs	r3, #2
 8008784:	429a      	cmp	r2, r3
 8008786:	d20b      	bcs.n	80087a0 <remove_chain+0xae>
			fs->free_clst++;
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	1c5a      	adds	r2, r3, #1
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	791b      	ldrb	r3, [r3, #4]
 8008796:	f043 0301 	orr.w	r3, r3, #1
 800879a:	b2da      	uxtb	r2, r3
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d3c6      	bcc.n	800873c <remove_chain+0x4a>
 80087ae:	e000      	b.n	80087b2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80087b0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3720      	adds	r7, #32
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10d      	bne.n	80087ee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d004      	beq.n	80087e8 <create_chain+0x2c>
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d31b      	bcc.n	8008820 <create_chain+0x64>
 80087e8:	2301      	movs	r3, #1
 80087ea:	61bb      	str	r3, [r7, #24]
 80087ec:	e018      	b.n	8008820 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f7ff fdea 	bl	80083ca <get_fat>
 80087f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d801      	bhi.n	8008802 <create_chain+0x46>
 80087fe:	2301      	movs	r3, #1
 8008800:	e070      	b.n	80088e4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008808:	d101      	bne.n	800880e <create_chain+0x52>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	e06a      	b.n	80088e4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	429a      	cmp	r2, r3
 8008816:	d201      	bcs.n	800881c <create_chain+0x60>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	e063      	b.n	80088e4 <create_chain+0x128>
		scl = clst;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	3301      	adds	r3, #1
 8008828:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	69fa      	ldr	r2, [r7, #28]
 8008830:	429a      	cmp	r2, r3
 8008832:	d307      	bcc.n	8008844 <create_chain+0x88>
				ncl = 2;
 8008834:	2302      	movs	r3, #2
 8008836:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008838:	69fa      	ldr	r2, [r7, #28]
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	429a      	cmp	r2, r3
 800883e:	d901      	bls.n	8008844 <create_chain+0x88>
 8008840:	2300      	movs	r3, #0
 8008842:	e04f      	b.n	80088e4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008844:	69f9      	ldr	r1, [r7, #28]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7ff fdbf 	bl	80083ca <get_fat>
 800884c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00e      	beq.n	8008872 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d003      	beq.n	8008862 <create_chain+0xa6>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008860:	d101      	bne.n	8008866 <create_chain+0xaa>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	e03e      	b.n	80088e4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008866:	69fa      	ldr	r2, [r7, #28]
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	429a      	cmp	r2, r3
 800886c:	d1da      	bne.n	8008824 <create_chain+0x68>
 800886e:	2300      	movs	r3, #0
 8008870:	e038      	b.n	80088e4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008872:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008874:	f04f 32ff 	mov.w	r2, #4294967295
 8008878:	69f9      	ldr	r1, [r7, #28]
 800887a:	6938      	ldr	r0, [r7, #16]
 800887c:	f7ff fe4d 	bl	800851a <put_fat>
 8008880:	4603      	mov	r3, r0
 8008882:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008884:	7dfb      	ldrb	r3, [r7, #23]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d109      	bne.n	800889e <create_chain+0xe2>
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d006      	beq.n	800889e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008890:	69fa      	ldr	r2, [r7, #28]
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6938      	ldr	r0, [r7, #16]
 8008896:	f7ff fe40 	bl	800851a <put_fat>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800889e:	7dfb      	ldrb	r3, [r7, #23]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d116      	bne.n	80088d2 <create_chain+0x116>
		fs->last_clst = ncl;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	69fa      	ldr	r2, [r7, #28]
 80088a8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	695a      	ldr	r2, [r3, #20]
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	3b02      	subs	r3, #2
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d804      	bhi.n	80088c2 <create_chain+0x106>
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	695b      	ldr	r3, [r3, #20]
 80088bc:	1e5a      	subs	r2, r3, #1
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	791b      	ldrb	r3, [r3, #4]
 80088c6:	f043 0301 	orr.w	r3, r3, #1
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	711a      	strb	r2, [r3, #4]
 80088d0:	e007      	b.n	80088e2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d102      	bne.n	80088de <create_chain+0x122>
 80088d8:	f04f 33ff 	mov.w	r3, #4294967295
 80088dc:	e000      	b.n	80088e0 <create_chain+0x124>
 80088de:	2301      	movs	r3, #1
 80088e0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80088e2:	69fb      	ldr	r3, [r7, #28]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3720      	adds	r7, #32
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008900:	3304      	adds	r3, #4
 8008902:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	0a5b      	lsrs	r3, r3, #9
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	8952      	ldrh	r2, [r2, #10]
 800890c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008910:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	1d1a      	adds	r2, r3, #4
 8008916:	613a      	str	r2, [r7, #16]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <clmt_clust+0x3a>
 8008922:	2300      	movs	r3, #0
 8008924:	e010      	b.n	8008948 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	429a      	cmp	r2, r3
 800892c:	d307      	bcc.n	800893e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	3304      	adds	r3, #4
 800893a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800893c:	e7e9      	b.n	8008912 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800893e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	4413      	add	r3, r2
}
 8008948:	4618      	mov	r0, r3
 800894a:	371c      	adds	r7, #28
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800896a:	d204      	bcs.n	8008976 <dir_sdi+0x22>
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	f003 031f 	and.w	r3, r3, #31
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008976:	2302      	movs	r3, #2
 8008978:	e063      	b.n	8008a42 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d106      	bne.n	800899a <dir_sdi+0x46>
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	2b02      	cmp	r3, #2
 8008992:	d902      	bls.n	800899a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008998:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10c      	bne.n	80089ba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	095b      	lsrs	r3, r3, #5
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	8912      	ldrh	r2, [r2, #8]
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d301      	bcc.n	80089b0 <dir_sdi+0x5c>
 80089ac:	2302      	movs	r3, #2
 80089ae:	e048      	b.n	8008a42 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	61da      	str	r2, [r3, #28]
 80089b8:	e029      	b.n	8008a0e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	895b      	ldrh	r3, [r3, #10]
 80089be:	025b      	lsls	r3, r3, #9
 80089c0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80089c2:	e019      	b.n	80089f8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6979      	ldr	r1, [r7, #20]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7ff fcfe 	bl	80083ca <get_fat>
 80089ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d6:	d101      	bne.n	80089dc <dir_sdi+0x88>
 80089d8:	2301      	movs	r3, #1
 80089da:	e032      	b.n	8008a42 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d904      	bls.n	80089ec <dir_sdi+0x98>
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d301      	bcc.n	80089f0 <dir_sdi+0x9c>
 80089ec:	2302      	movs	r3, #2
 80089ee:	e028      	b.n	8008a42 <dir_sdi+0xee>
			ofs -= csz;
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d2e1      	bcs.n	80089c4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008a00:	6979      	ldr	r1, [r7, #20]
 8008a02:	6938      	ldr	r0, [r7, #16]
 8008a04:	f7ff fcc2 	bl	800838c <clust2sect>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d101      	bne.n	8008a20 <dir_sdi+0xcc>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e010      	b.n	8008a42 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	69da      	ldr	r2, [r3, #28]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	0a5b      	lsrs	r3, r3, #9
 8008a28:	441a      	add	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3a:	441a      	add	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b086      	sub	sp, #24
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	3320      	adds	r3, #32
 8008a60:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <dir_next+0x28>
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a70:	d301      	bcc.n	8008a76 <dir_next+0x2c>
 8008a72:	2304      	movs	r3, #4
 8008a74:	e0aa      	b.n	8008bcc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f040 8098 	bne.w	8008bb2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10b      	bne.n	8008aac <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	095b      	lsrs	r3, r3, #5
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	8912      	ldrh	r2, [r2, #8]
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	f0c0 8088 	bcc.w	8008bb2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	61da      	str	r2, [r3, #28]
 8008aa8:	2304      	movs	r3, #4
 8008aaa:	e08f      	b.n	8008bcc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	0a5b      	lsrs	r3, r3, #9
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	8952      	ldrh	r2, [r2, #10]
 8008ab4:	3a01      	subs	r2, #1
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d17a      	bne.n	8008bb2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	f7ff fc80 	bl	80083ca <get_fat>
 8008aca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d801      	bhi.n	8008ad6 <dir_next+0x8c>
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	e07a      	b.n	8008bcc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008adc:	d101      	bne.n	8008ae2 <dir_next+0x98>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e074      	b.n	8008bcc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d358      	bcc.n	8008b9e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d104      	bne.n	8008afc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	61da      	str	r2, [r3, #28]
 8008af8:	2304      	movs	r3, #4
 8008afa:	e067      	b.n	8008bcc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	4619      	mov	r1, r3
 8008b04:	4610      	mov	r0, r2
 8008b06:	f7ff fe59 	bl	80087bc <create_chain>
 8008b0a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <dir_next+0xcc>
 8008b12:	2307      	movs	r3, #7
 8008b14:	e05a      	b.n	8008bcc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d101      	bne.n	8008b20 <dir_next+0xd6>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e055      	b.n	8008bcc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b26:	d101      	bne.n	8008b2c <dir_next+0xe2>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e04f      	b.n	8008bcc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f7ff fb4d 	bl	80081cc <sync_window>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <dir_next+0xf2>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e047      	b.n	8008bcc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3334      	adds	r3, #52	; 0x34
 8008b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b44:	2100      	movs	r1, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7ff f977 	bl	8007e3a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	613b      	str	r3, [r7, #16]
 8008b50:	6979      	ldr	r1, [r7, #20]
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7ff fc1a 	bl	800838c <clust2sect>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8008b5e:	e012      	b.n	8008b86 <dir_next+0x13c>
						fs->wflag = 1;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2201      	movs	r2, #1
 8008b64:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f7ff fb30 	bl	80081cc <sync_window>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <dir_next+0x12c>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e02a      	b.n	8008bcc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	613b      	str	r3, [r7, #16]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b80:	1c5a      	adds	r2, r3, #1
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	631a      	str	r2, [r3, #48]	; 0x30
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	895b      	ldrh	r3, [r3, #10]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d3e6      	bcc.n	8008b60 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	1ad2      	subs	r2, r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008ba4:	6979      	ldr	r1, [r7, #20]
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f7ff fbf0 	bl	800838c <clust2sect>
 8008bac:	4602      	mov	r2, r0
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc4:	441a      	add	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008be4:	2100      	movs	r1, #0
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff feb4 	bl	8008954 <dir_sdi>
 8008bec:	4603      	mov	r3, r0
 8008bee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008bf0:	7dfb      	ldrb	r3, [r7, #23]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d12b      	bne.n	8008c4e <dir_alloc+0x7a>
		n = 0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f7ff fb27 	bl	8008254 <move_window>
 8008c06:	4603      	mov	r3, r0
 8008c08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c0a:	7dfb      	ldrb	r3, [r7, #23]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d11d      	bne.n	8008c4c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	2be5      	cmp	r3, #229	; 0xe5
 8008c18:	d004      	beq.n	8008c24 <dir_alloc+0x50>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d107      	bne.n	8008c34 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	3301      	adds	r3, #1
 8008c28:	613b      	str	r3, [r7, #16]
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d102      	bne.n	8008c38 <dir_alloc+0x64>
 8008c32:	e00c      	b.n	8008c4e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008c34:	2300      	movs	r3, #0
 8008c36:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008c38:	2101      	movs	r1, #1
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7ff ff05 	bl	8008a4a <dir_next>
 8008c40:	4603      	mov	r3, r0
 8008c42:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008c44:	7dfb      	ldrb	r3, [r7, #23]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0d7      	beq.n	8008bfa <dir_alloc+0x26>
 8008c4a:	e000      	b.n	8008c4e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008c4c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	d101      	bne.n	8008c58 <dir_alloc+0x84>
 8008c54:	2307      	movs	r3, #7
 8008c56:	75fb      	strb	r3, [r7, #23]
	return res;
 8008c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	331a      	adds	r3, #26
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7ff f83f 	bl	8007cf4 <ld_word>
 8008c76:	4603      	mov	r3, r0
 8008c78:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d109      	bne.n	8008c96 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	3314      	adds	r3, #20
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7ff f834 	bl	8007cf4 <ld_word>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	041b      	lsls	r3, r3, #16
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008c96:	68fb      	ldr	r3, [r7, #12]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	331a      	adds	r3, #26
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	b292      	uxth	r2, r2
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff f857 	bl	8007d6a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d109      	bne.n	8008cd8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	f103 0214 	add.w	r2, r3, #20
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	0c1b      	lsrs	r3, r3, #16
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	f7ff f849 	bl	8007d6a <st_word>
	}
}
 8008cd8:	bf00      	nop
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008ce0:	b590      	push	{r4, r7, lr}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	331a      	adds	r3, #26
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7ff f800 	bl	8007cf4 <ld_word>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <cmp_lfn+0x1e>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e059      	b.n	8008db2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d06:	1e5a      	subs	r2, r3, #1
 8008d08:	4613      	mov	r3, r2
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008d14:	2301      	movs	r3, #1
 8008d16:	81fb      	strh	r3, [r7, #14]
 8008d18:	2300      	movs	r3, #0
 8008d1a:	613b      	str	r3, [r7, #16]
 8008d1c:	e033      	b.n	8008d86 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008d1e:	4a27      	ldr	r2, [pc, #156]	; (8008dbc <cmp_lfn+0xdc>)
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	4413      	add	r3, r2
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fe ffe1 	bl	8007cf4 <ld_word>
 8008d32:	4603      	mov	r3, r0
 8008d34:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008d36:	89fb      	ldrh	r3, [r7, #14]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d01a      	beq.n	8008d72 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2b0e      	cmp	r3, #14
 8008d40:	d812      	bhi.n	8008d68 <cmp_lfn+0x88>
 8008d42:	89bb      	ldrh	r3, [r7, #12]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f001 fe19 	bl	800a97c <ff_wtoupper>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	461c      	mov	r4, r3
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	617a      	str	r2, [r7, #20]
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	4413      	add	r3, r2
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f001 fe0d 	bl	800a97c <ff_wtoupper>
 8008d62:	4603      	mov	r3, r0
 8008d64:	429c      	cmp	r4, r3
 8008d66:	d001      	beq.n	8008d6c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008d68:	2300      	movs	r3, #0
 8008d6a:	e022      	b.n	8008db2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8008d6c:	89bb      	ldrh	r3, [r7, #12]
 8008d6e:	81fb      	strh	r3, [r7, #14]
 8008d70:	e006      	b.n	8008d80 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008d72:	89bb      	ldrh	r3, [r7, #12]
 8008d74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d001      	beq.n	8008d80 <cmp_lfn+0xa0>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	e018      	b.n	8008db2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	3301      	adds	r3, #1
 8008d84:	613b      	str	r3, [r7, #16]
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	2b0c      	cmp	r3, #12
 8008d8a:	d9c8      	bls.n	8008d1e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00b      	beq.n	8008db0 <cmp_lfn+0xd0>
 8008d98:	89fb      	ldrh	r3, [r7, #14]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d008      	beq.n	8008db0 <cmp_lfn+0xd0>
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	4413      	add	r3, r2
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <cmp_lfn+0xd0>
 8008dac:	2300      	movs	r3, #0
 8008dae:	e000      	b.n	8008db2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008db0:	2301      	movs	r3, #1
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	371c      	adds	r7, #28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd90      	pop	{r4, r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	0800b560 	.word	0x0800b560

08008dc0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	4611      	mov	r1, r2
 8008dcc:	461a      	mov	r2, r3
 8008dce:	460b      	mov	r3, r1
 8008dd0:	71fb      	strb	r3, [r7, #7]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	330d      	adds	r3, #13
 8008dda:	79ba      	ldrb	r2, [r7, #6]
 8008ddc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	330b      	adds	r3, #11
 8008de2:	220f      	movs	r2, #15
 8008de4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	330c      	adds	r3, #12
 8008dea:	2200      	movs	r2, #0
 8008dec:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	331a      	adds	r3, #26
 8008df2:	2100      	movs	r1, #0
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7fe ffb8 	bl	8007d6a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	1e5a      	subs	r2, r3, #1
 8008dfe:	4613      	mov	r3, r2
 8008e00:	005b      	lsls	r3, r3, #1
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	82fb      	strh	r3, [r7, #22]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008e12:	8afb      	ldrh	r3, [r7, #22]
 8008e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d007      	beq.n	8008e2c <put_lfn+0x6c>
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	1c5a      	adds	r2, r3, #1
 8008e20:	61fa      	str	r2, [r7, #28]
 8008e22:	005b      	lsls	r3, r3, #1
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	4413      	add	r3, r2
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008e2c:	4a17      	ldr	r2, [pc, #92]	; (8008e8c <put_lfn+0xcc>)
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	4413      	add	r3, r2
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	4413      	add	r3, r2
 8008e3a:	8afa      	ldrh	r2, [r7, #22]
 8008e3c:	4611      	mov	r1, r2
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fe ff93 	bl	8007d6a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008e44:	8afb      	ldrh	r3, [r7, #22]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d102      	bne.n	8008e50 <put_lfn+0x90>
 8008e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e4e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	3301      	adds	r3, #1
 8008e54:	61bb      	str	r3, [r7, #24]
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	2b0c      	cmp	r3, #12
 8008e5a:	d9da      	bls.n	8008e12 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008e5c:	8afb      	ldrh	r3, [r7, #22]
 8008e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d006      	beq.n	8008e74 <put_lfn+0xb4>
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	005b      	lsls	r3, r3, #1
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d103      	bne.n	8008e7c <put_lfn+0xbc>
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e7a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	79fa      	ldrb	r2, [r7, #7]
 8008e80:	701a      	strb	r2, [r3, #0]
}
 8008e82:	bf00      	nop
 8008e84:	3720      	adds	r7, #32
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	0800b560 	.word	0x0800b560

08008e90 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08c      	sub	sp, #48	; 0x30
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
 8008e9c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008e9e:	220b      	movs	r2, #11
 8008ea0:	68b9      	ldr	r1, [r7, #8]
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f7fe ffa8 	bl	8007df8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	d92b      	bls.n	8008f06 <gen_numname+0x76>
		sr = seq;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008eb2:	e022      	b.n	8008efa <gen_numname+0x6a>
			wc = *lfn++;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	1c9a      	adds	r2, r3, #2
 8008eb8:	607a      	str	r2, [r7, #4]
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ec2:	e017      	b.n	8008ef4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	005a      	lsls	r2, r3, #1
 8008ec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	4413      	add	r3, r2
 8008ed0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008ed2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ed4:	085b      	lsrs	r3, r3, #1
 8008ed6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d005      	beq.n	8008eee <gen_numname+0x5e>
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008ee8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008eec:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	2b0f      	cmp	r3, #15
 8008ef8:	d9e4      	bls.n	8008ec4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1d8      	bne.n	8008eb4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008f06:	2307      	movs	r3, #7
 8008f08:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	3330      	adds	r3, #48	; 0x30
 8008f16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f1e:	2b39      	cmp	r3, #57	; 0x39
 8008f20:	d904      	bls.n	8008f2c <gen_numname+0x9c>
 8008f22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f26:	3307      	adds	r3, #7
 8008f28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2e:	1e5a      	subs	r2, r3, #1
 8008f30:	62ba      	str	r2, [r7, #40]	; 0x28
 8008f32:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008f36:	4413      	add	r3, r2
 8008f38:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008f3c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	091b      	lsrs	r3, r3, #4
 8008f44:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1de      	bne.n	8008f0a <gen_numname+0x7a>
	ns[i] = '~';
 8008f4c:	f107 0214 	add.w	r2, r7, #20
 8008f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f52:	4413      	add	r3, r2
 8008f54:	227e      	movs	r2, #126	; 0x7e
 8008f56:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008f58:	2300      	movs	r3, #0
 8008f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f5c:	e002      	b.n	8008f64 <gen_numname+0xd4>
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f60:	3301      	adds	r3, #1
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24
 8008f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d205      	bcs.n	8008f78 <gen_numname+0xe8>
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	4413      	add	r3, r2
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b20      	cmp	r3, #32
 8008f76:	d1f2      	bne.n	8008f5e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	2b07      	cmp	r3, #7
 8008f7c:	d808      	bhi.n	8008f90 <gen_numname+0x100>
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	1c5a      	adds	r2, r3, #1
 8008f82:	62ba      	str	r2, [r7, #40]	; 0x28
 8008f84:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008f88:	4413      	add	r3, r2
 8008f8a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008f8e:	e000      	b.n	8008f92 <gen_numname+0x102>
 8008f90:	2120      	movs	r1, #32
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	627a      	str	r2, [r7, #36]	; 0x24
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	460a      	mov	r2, r1
 8008f9e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	2b07      	cmp	r3, #7
 8008fa4:	d9e8      	bls.n	8008f78 <gen_numname+0xe8>
}
 8008fa6:	bf00      	nop
 8008fa8:	bf00      	nop
 8008faa:	3730      	adds	r7, #48	; 0x30
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008fbc:	230b      	movs	r3, #11
 8008fbe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	0852      	lsrs	r2, r2, #1
 8008fc6:	01db      	lsls	r3, r3, #7
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	1c59      	adds	r1, r3, #1
 8008fd0:	6079      	str	r1, [r7, #4]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	60bb      	str	r3, [r7, #8]
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1ed      	bne.n	8008fc0 <sum_sfn+0x10>
	return sum;
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b086      	sub	sp, #24
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009000:	2100      	movs	r1, #0
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7ff fca6 	bl	8008954 <dir_sdi>
 8009008:	4603      	mov	r3, r0
 800900a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800900c:	7dfb      	ldrb	r3, [r7, #23]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <dir_find+0x24>
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	e0a9      	b.n	800916a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009016:	23ff      	movs	r3, #255	; 0xff
 8009018:	753b      	strb	r3, [r7, #20]
 800901a:	7d3b      	ldrb	r3, [r7, #20]
 800901c:	757b      	strb	r3, [r7, #21]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f04f 32ff 	mov.w	r2, #4294967295
 8009024:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	4619      	mov	r1, r3
 800902c:	6938      	ldr	r0, [r7, #16]
 800902e:	f7ff f911 	bl	8008254 <move_window>
 8009032:	4603      	mov	r3, r0
 8009034:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009036:	7dfb      	ldrb	r3, [r7, #23]
 8009038:	2b00      	cmp	r3, #0
 800903a:	f040 8090 	bne.w	800915e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009046:	7dbb      	ldrb	r3, [r7, #22]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d102      	bne.n	8009052 <dir_find+0x60>
 800904c:	2304      	movs	r3, #4
 800904e:	75fb      	strb	r3, [r7, #23]
 8009050:	e08a      	b.n	8009168 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	330b      	adds	r3, #11
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800905e:	73fb      	strb	r3, [r7, #15]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	7bfa      	ldrb	r2, [r7, #15]
 8009064:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009066:	7dbb      	ldrb	r3, [r7, #22]
 8009068:	2be5      	cmp	r3, #229	; 0xe5
 800906a:	d007      	beq.n	800907c <dir_find+0x8a>
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b00      	cmp	r3, #0
 8009074:	d009      	beq.n	800908a <dir_find+0x98>
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	2b0f      	cmp	r3, #15
 800907a:	d006      	beq.n	800908a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800907c:	23ff      	movs	r3, #255	; 0xff
 800907e:	757b      	strb	r3, [r7, #21]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f04f 32ff 	mov.w	r2, #4294967295
 8009086:	631a      	str	r2, [r3, #48]	; 0x30
 8009088:	e05e      	b.n	8009148 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800908a:	7bfb      	ldrb	r3, [r7, #15]
 800908c:	2b0f      	cmp	r3, #15
 800908e:	d136      	bne.n	80090fe <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909a:	2b00      	cmp	r3, #0
 800909c:	d154      	bne.n	8009148 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800909e:	7dbb      	ldrb	r3, [r7, #22]
 80090a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00d      	beq.n	80090c4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	7b5b      	ldrb	r3, [r3, #13]
 80090ae:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80090b0:	7dbb      	ldrb	r3, [r7, #22]
 80090b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090b6:	75bb      	strb	r3, [r7, #22]
 80090b8:	7dbb      	ldrb	r3, [r7, #22]
 80090ba:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	695a      	ldr	r2, [r3, #20]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80090c4:	7dba      	ldrb	r2, [r7, #22]
 80090c6:	7d7b      	ldrb	r3, [r7, #21]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d115      	bne.n	80090f8 <dir_find+0x106>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	330d      	adds	r3, #13
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	7d3a      	ldrb	r2, [r7, #20]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d10e      	bne.n	80090f8 <dir_find+0x106>
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	4619      	mov	r1, r3
 80090e4:	4610      	mov	r0, r2
 80090e6:	f7ff fdfb 	bl	8008ce0 <cmp_lfn>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <dir_find+0x106>
 80090f0:	7d7b      	ldrb	r3, [r7, #21]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	e000      	b.n	80090fa <dir_find+0x108>
 80090f8:	23ff      	movs	r3, #255	; 0xff
 80090fa:	757b      	strb	r3, [r7, #21]
 80090fc:	e024      	b.n	8009148 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80090fe:	7d7b      	ldrb	r3, [r7, #21]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <dir_find+0x126>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a1b      	ldr	r3, [r3, #32]
 8009108:	4618      	mov	r0, r3
 800910a:	f7ff ff51 	bl	8008fb0 <sum_sfn>
 800910e:	4603      	mov	r3, r0
 8009110:	461a      	mov	r2, r3
 8009112:	7d3b      	ldrb	r3, [r7, #20]
 8009114:	4293      	cmp	r3, r2
 8009116:	d024      	beq.n	8009162 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10a      	bne.n	800913c <dir_find+0x14a>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a18      	ldr	r0, [r3, #32]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	3324      	adds	r3, #36	; 0x24
 800912e:	220b      	movs	r2, #11
 8009130:	4619      	mov	r1, r3
 8009132:	f7fe fe9d 	bl	8007e70 <mem_cmp>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d014      	beq.n	8009166 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800913c:	23ff      	movs	r3, #255	; 0xff
 800913e:	757b      	strb	r3, [r7, #21]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f04f 32ff 	mov.w	r2, #4294967295
 8009146:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009148:	2100      	movs	r1, #0
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7ff fc7d 	bl	8008a4a <dir_next>
 8009150:	4603      	mov	r3, r0
 8009152:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009154:	7dfb      	ldrb	r3, [r7, #23]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f43f af65 	beq.w	8009026 <dir_find+0x34>
 800915c:	e004      	b.n	8009168 <dir_find+0x176>
		if (res != FR_OK) break;
 800915e:	bf00      	nop
 8009160:	e002      	b.n	8009168 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009162:	bf00      	nop
 8009164:	e000      	b.n	8009168 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009166:	bf00      	nop

	return res;
 8009168:	7dfb      	ldrb	r3, [r7, #23]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3718      	adds	r7, #24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
	...

08009174 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b08c      	sub	sp, #48	; 0x30
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009188:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d001      	beq.n	8009194 <dir_register+0x20>
 8009190:	2306      	movs	r3, #6
 8009192:	e0e0      	b.n	8009356 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009194:	2300      	movs	r3, #0
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
 8009198:	e002      	b.n	80091a0 <dir_register+0x2c>
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	3301      	adds	r3, #1
 800919e:	627b      	str	r3, [r7, #36]	; 0x24
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	68da      	ldr	r2, [r3, #12]
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	4413      	add	r3, r2
 80091aa:	881b      	ldrh	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1f4      	bne.n	800919a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80091b6:	f107 030c 	add.w	r3, r7, #12
 80091ba:	220c      	movs	r2, #12
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fe fe1b 	bl	8007df8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d032      	beq.n	8009232 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2240      	movs	r2, #64	; 0x40
 80091d0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80091d4:	2301      	movs	r3, #1
 80091d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80091d8:	e016      	b.n	8009208 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	f107 010c 	add.w	r1, r7, #12
 80091e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ea:	f7ff fe51 	bl	8008e90 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f7ff feff 	bl	8008ff2 <dir_find>
 80091f4:	4603      	mov	r3, r0
 80091f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80091fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009204:	3301      	adds	r3, #1
 8009206:	62bb      	str	r3, [r7, #40]	; 0x28
 8009208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920a:	2b63      	cmp	r3, #99	; 0x63
 800920c:	d9e5      	bls.n	80091da <dir_register+0x66>
 800920e:	e000      	b.n	8009212 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009210:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009214:	2b64      	cmp	r3, #100	; 0x64
 8009216:	d101      	bne.n	800921c <dir_register+0xa8>
 8009218:	2307      	movs	r3, #7
 800921a:	e09c      	b.n	8009356 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800921c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009220:	2b04      	cmp	r3, #4
 8009222:	d002      	beq.n	800922a <dir_register+0xb6>
 8009224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009228:	e095      	b.n	8009356 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800922a:	7dfa      	ldrb	r2, [r7, #23]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009232:	7dfb      	ldrb	r3, [r7, #23]
 8009234:	f003 0302 	and.w	r3, r3, #2
 8009238:	2b00      	cmp	r3, #0
 800923a:	d007      	beq.n	800924c <dir_register+0xd8>
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	330c      	adds	r3, #12
 8009240:	4a47      	ldr	r2, [pc, #284]	; (8009360 <dir_register+0x1ec>)
 8009242:	fba2 2303 	umull	r2, r3, r2, r3
 8009246:	089b      	lsrs	r3, r3, #2
 8009248:	3301      	adds	r3, #1
 800924a:	e000      	b.n	800924e <dir_register+0xda>
 800924c:	2301      	movs	r3, #1
 800924e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009250:	6a39      	ldr	r1, [r7, #32]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7ff fcbe 	bl	8008bd4 <dir_alloc>
 8009258:	4603      	mov	r3, r0
 800925a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800925e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009262:	2b00      	cmp	r3, #0
 8009264:	d148      	bne.n	80092f8 <dir_register+0x184>
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	3b01      	subs	r3, #1
 800926a:	623b      	str	r3, [r7, #32]
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d042      	beq.n	80092f8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	695a      	ldr	r2, [r3, #20]
 8009276:	6a3b      	ldr	r3, [r7, #32]
 8009278:	015b      	lsls	r3, r3, #5
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff fb68 	bl	8008954 <dir_sdi>
 8009284:	4603      	mov	r3, r0
 8009286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800928a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800928e:	2b00      	cmp	r3, #0
 8009290:	d132      	bne.n	80092f8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	3324      	adds	r3, #36	; 0x24
 8009296:	4618      	mov	r0, r3
 8009298:	f7ff fe8a 	bl	8008fb0 <sum_sfn>
 800929c:	4603      	mov	r3, r0
 800929e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	4619      	mov	r1, r3
 80092a6:	69f8      	ldr	r0, [r7, #28]
 80092a8:	f7fe ffd4 	bl	8008254 <move_window>
 80092ac:	4603      	mov	r3, r0
 80092ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80092b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d11d      	bne.n	80092f6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	68d8      	ldr	r0, [r3, #12]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a19      	ldr	r1, [r3, #32]
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	7efb      	ldrb	r3, [r7, #27]
 80092c8:	f7ff fd7a 	bl	8008dc0 <put_lfn>
				fs->wflag = 1;
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	2201      	movs	r2, #1
 80092d0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80092d2:	2100      	movs	r1, #0
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7ff fbb8 	bl	8008a4a <dir_next>
 80092da:	4603      	mov	r3, r0
 80092dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80092e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d107      	bne.n	80092f8 <dir_register+0x184>
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	623b      	str	r3, [r7, #32]
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1d5      	bne.n	80092a0 <dir_register+0x12c>
 80092f4:	e000      	b.n	80092f8 <dir_register+0x184>
				if (res != FR_OK) break;
 80092f6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80092f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d128      	bne.n	8009352 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	4619      	mov	r1, r3
 8009306:	69f8      	ldr	r0, [r7, #28]
 8009308:	f7fe ffa4 	bl	8008254 <move_window>
 800930c:	4603      	mov	r3, r0
 800930e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009316:	2b00      	cmp	r3, #0
 8009318:	d11b      	bne.n	8009352 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	2220      	movs	r2, #32
 8009320:	2100      	movs	r1, #0
 8009322:	4618      	mov	r0, r3
 8009324:	f7fe fd89 	bl	8007e3a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a18      	ldr	r0, [r3, #32]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3324      	adds	r3, #36	; 0x24
 8009330:	220b      	movs	r2, #11
 8009332:	4619      	mov	r1, r3
 8009334:	f7fe fd60 	bl	8007df8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	330c      	adds	r3, #12
 8009344:	f002 0218 	and.w	r2, r2, #24
 8009348:	b2d2      	uxtb	r2, r2
 800934a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	2201      	movs	r2, #1
 8009350:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009356:	4618      	mov	r0, r3
 8009358:	3730      	adds	r7, #48	; 0x30
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	4ec4ec4f 	.word	0x4ec4ec4f

08009364 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b08a      	sub	sp, #40	; 0x28
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	613b      	str	r3, [r7, #16]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	2300      	movs	r3, #0
 800937e:	617b      	str	r3, [r7, #20]
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	1c5a      	adds	r2, r3, #1
 8009388:	61ba      	str	r2, [r7, #24]
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	4413      	add	r3, r2
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009394:	2b1f      	cmp	r3, #31
 8009396:	d940      	bls.n	800941a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800939a:	2b2f      	cmp	r3, #47	; 0x2f
 800939c:	d006      	beq.n	80093ac <create_name+0x48>
 800939e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093a0:	2b5c      	cmp	r3, #92	; 0x5c
 80093a2:	d110      	bne.n	80093c6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80093a4:	e002      	b.n	80093ac <create_name+0x48>
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	3301      	adds	r3, #1
 80093aa:	61bb      	str	r3, [r7, #24]
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	4413      	add	r3, r2
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	2b2f      	cmp	r3, #47	; 0x2f
 80093b6:	d0f6      	beq.n	80093a6 <create_name+0x42>
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	4413      	add	r3, r2
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	2b5c      	cmp	r3, #92	; 0x5c
 80093c2:	d0f0      	beq.n	80093a6 <create_name+0x42>
			break;
 80093c4:	e02a      	b.n	800941c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2b0e      	cmp	r3, #14
 80093ca:	d901      	bls.n	80093d0 <create_name+0x6c>
 80093cc:	2306      	movs	r3, #6
 80093ce:	e177      	b.n	80096c0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80093d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80093d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093d8:	2101      	movs	r1, #1
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 fa92 	bl	800a904 <ff_convert>
 80093e0:	4603      	mov	r3, r0
 80093e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80093e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d101      	bne.n	80093ee <create_name+0x8a>
 80093ea:	2306      	movs	r3, #6
 80093ec:	e168      	b.n	80096c0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80093ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093f0:	2b7f      	cmp	r3, #127	; 0x7f
 80093f2:	d809      	bhi.n	8009408 <create_name+0xa4>
 80093f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093f6:	4619      	mov	r1, r3
 80093f8:	48b3      	ldr	r0, [pc, #716]	; (80096c8 <create_name+0x364>)
 80093fa:	f7fe fd60 	bl	8007ebe <chk_chr>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <create_name+0xa4>
 8009404:	2306      	movs	r3, #6
 8009406:	e15b      	b.n	80096c0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	617a      	str	r2, [r7, #20]
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	4413      	add	r3, r2
 8009414:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009416:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009418:	e7b4      	b.n	8009384 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800941a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	441a      	add	r2, r3
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009428:	2b1f      	cmp	r3, #31
 800942a:	d801      	bhi.n	8009430 <create_name+0xcc>
 800942c:	2304      	movs	r3, #4
 800942e:	e000      	b.n	8009432 <create_name+0xce>
 8009430:	2300      	movs	r3, #0
 8009432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009436:	e011      	b.n	800945c <create_name+0xf8>
		w = lfn[di - 1];
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800943e:	3b01      	subs	r3, #1
 8009440:	005b      	lsls	r3, r3, #1
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	4413      	add	r3, r2
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800944a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800944c:	2b20      	cmp	r3, #32
 800944e:	d002      	beq.n	8009456 <create_name+0xf2>
 8009450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009452:	2b2e      	cmp	r3, #46	; 0x2e
 8009454:	d106      	bne.n	8009464 <create_name+0x100>
		di--;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	3b01      	subs	r3, #1
 800945a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1ea      	bne.n	8009438 <create_name+0xd4>
 8009462:	e000      	b.n	8009466 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009464:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	4413      	add	r3, r2
 800946e:	2200      	movs	r2, #0
 8009470:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <create_name+0x118>
 8009478:	2306      	movs	r3, #6
 800947a:	e121      	b.n	80096c0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3324      	adds	r3, #36	; 0x24
 8009480:	220b      	movs	r2, #11
 8009482:	2120      	movs	r1, #32
 8009484:	4618      	mov	r0, r3
 8009486:	f7fe fcd8 	bl	8007e3a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800948a:	2300      	movs	r3, #0
 800948c:	61bb      	str	r3, [r7, #24]
 800948e:	e002      	b.n	8009496 <create_name+0x132>
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	3301      	adds	r3, #1
 8009494:	61bb      	str	r3, [r7, #24]
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	005b      	lsls	r3, r3, #1
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	4413      	add	r3, r2
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	2b20      	cmp	r3, #32
 80094a2:	d0f5      	beq.n	8009490 <create_name+0x12c>
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	005b      	lsls	r3, r3, #1
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	4413      	add	r3, r2
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	2b2e      	cmp	r3, #46	; 0x2e
 80094b0:	d0ee      	beq.n	8009490 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d009      	beq.n	80094cc <create_name+0x168>
 80094b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094bc:	f043 0303 	orr.w	r3, r3, #3
 80094c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80094c4:	e002      	b.n	80094cc <create_name+0x168>
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	3b01      	subs	r3, #1
 80094ca:	617b      	str	r3, [r7, #20]
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d009      	beq.n	80094e6 <create_name+0x182>
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80094d8:	3b01      	subs	r3, #1
 80094da:	005b      	lsls	r3, r3, #1
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	4413      	add	r3, r2
 80094e0:	881b      	ldrh	r3, [r3, #0]
 80094e2:	2b2e      	cmp	r3, #46	; 0x2e
 80094e4:	d1ef      	bne.n	80094c6 <create_name+0x162>

	i = b = 0; ni = 8;
 80094e6:	2300      	movs	r3, #0
 80094e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80094ec:	2300      	movs	r3, #0
 80094ee:	623b      	str	r3, [r7, #32]
 80094f0:	2308      	movs	r3, #8
 80094f2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	1c5a      	adds	r2, r3, #1
 80094f8:	61ba      	str	r2, [r7, #24]
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	4413      	add	r3, r2
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009504:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009506:	2b00      	cmp	r3, #0
 8009508:	f000 8090 	beq.w	800962c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800950c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800950e:	2b20      	cmp	r3, #32
 8009510:	d006      	beq.n	8009520 <create_name+0x1bc>
 8009512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009514:	2b2e      	cmp	r3, #46	; 0x2e
 8009516:	d10a      	bne.n	800952e <create_name+0x1ca>
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	429a      	cmp	r2, r3
 800951e:	d006      	beq.n	800952e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009524:	f043 0303 	orr.w	r3, r3, #3
 8009528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800952c:	e07d      	b.n	800962a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800952e:	6a3a      	ldr	r2, [r7, #32]
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	429a      	cmp	r2, r3
 8009534:	d203      	bcs.n	800953e <create_name+0x1da>
 8009536:	69ba      	ldr	r2, [r7, #24]
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	429a      	cmp	r2, r3
 800953c:	d123      	bne.n	8009586 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	2b0b      	cmp	r3, #11
 8009542:	d106      	bne.n	8009552 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009548:	f043 0303 	orr.w	r3, r3, #3
 800954c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009550:	e06f      	b.n	8009632 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	429a      	cmp	r2, r3
 8009558:	d005      	beq.n	8009566 <create_name+0x202>
 800955a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800955e:	f043 0303 	orr.w	r3, r3, #3
 8009562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	429a      	cmp	r2, r3
 800956c:	d860      	bhi.n	8009630 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	61bb      	str	r3, [r7, #24]
 8009572:	2308      	movs	r3, #8
 8009574:	623b      	str	r3, [r7, #32]
 8009576:	230b      	movs	r3, #11
 8009578:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800957a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009584:	e051      	b.n	800962a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009588:	2b7f      	cmp	r3, #127	; 0x7f
 800958a:	d914      	bls.n	80095b6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800958c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800958e:	2100      	movs	r1, #0
 8009590:	4618      	mov	r0, r3
 8009592:	f001 f9b7 	bl	800a904 <ff_convert>
 8009596:	4603      	mov	r3, r0
 8009598:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800959a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <create_name+0x246>
 80095a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095a2:	3b80      	subs	r3, #128	; 0x80
 80095a4:	4a49      	ldr	r2, [pc, #292]	; (80096cc <create_name+0x368>)
 80095a6:	5cd3      	ldrb	r3, [r2, r3]
 80095a8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80095aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095ae:	f043 0302 	orr.w	r3, r3, #2
 80095b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80095b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d007      	beq.n	80095cc <create_name+0x268>
 80095bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095be:	4619      	mov	r1, r3
 80095c0:	4843      	ldr	r0, [pc, #268]	; (80096d0 <create_name+0x36c>)
 80095c2:	f7fe fc7c 	bl	8007ebe <chk_chr>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d008      	beq.n	80095de <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80095cc:	235f      	movs	r3, #95	; 0x5f
 80095ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 80095d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095d4:	f043 0303 	orr.w	r3, r3, #3
 80095d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095dc:	e01b      	b.n	8009616 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80095de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095e0:	2b40      	cmp	r3, #64	; 0x40
 80095e2:	d909      	bls.n	80095f8 <create_name+0x294>
 80095e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095e6:	2b5a      	cmp	r3, #90	; 0x5a
 80095e8:	d806      	bhi.n	80095f8 <create_name+0x294>
					b |= 2;
 80095ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80095ee:	f043 0302 	orr.w	r3, r3, #2
 80095f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80095f6:	e00e      	b.n	8009616 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80095f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095fa:	2b60      	cmp	r3, #96	; 0x60
 80095fc:	d90b      	bls.n	8009616 <create_name+0x2b2>
 80095fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009600:	2b7a      	cmp	r3, #122	; 0x7a
 8009602:	d808      	bhi.n	8009616 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009604:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009608:	f043 0301 	orr.w	r3, r3, #1
 800960c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009612:	3b20      	subs	r3, #32
 8009614:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	1c5a      	adds	r2, r3, #1
 800961a:	623a      	str	r2, [r7, #32]
 800961c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800961e:	b2d1      	uxtb	r1, r2
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	4413      	add	r3, r2
 8009624:	460a      	mov	r2, r1
 8009626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800962a:	e763      	b.n	80094f4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800962c:	bf00      	nop
 800962e:	e000      	b.n	8009632 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8009630:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009638:	2be5      	cmp	r3, #229	; 0xe5
 800963a:	d103      	bne.n	8009644 <create_name+0x2e0>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2205      	movs	r2, #5
 8009640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	2b08      	cmp	r3, #8
 8009648:	d104      	bne.n	8009654 <create_name+0x2f0>
 800964a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009654:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009658:	f003 030c 	and.w	r3, r3, #12
 800965c:	2b0c      	cmp	r3, #12
 800965e:	d005      	beq.n	800966c <create_name+0x308>
 8009660:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009664:	f003 0303 	and.w	r3, r3, #3
 8009668:	2b03      	cmp	r3, #3
 800966a:	d105      	bne.n	8009678 <create_name+0x314>
 800966c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009670:	f043 0302 	orr.w	r3, r3, #2
 8009674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800967c:	f003 0302 	and.w	r3, r3, #2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d117      	bne.n	80096b4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009684:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009688:	f003 0303 	and.w	r3, r3, #3
 800968c:	2b01      	cmp	r3, #1
 800968e:	d105      	bne.n	800969c <create_name+0x338>
 8009690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009694:	f043 0310 	orr.w	r3, r3, #16
 8009698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800969c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80096a0:	f003 030c 	and.w	r3, r3, #12
 80096a4:	2b04      	cmp	r3, #4
 80096a6:	d105      	bne.n	80096b4 <create_name+0x350>
 80096a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096ac:	f043 0308 	orr.w	r3, r3, #8
 80096b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80096ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80096be:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3728      	adds	r7, #40	; 0x28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	0800b478 	.word	0x0800b478
 80096cc:	0800b4e0 	.word	0x0800b4e0
 80096d0:	0800b484 	.word	0x0800b484

080096d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80096e8:	e002      	b.n	80096f0 <follow_path+0x1c>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	3301      	adds	r3, #1
 80096ee:	603b      	str	r3, [r7, #0]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b2f      	cmp	r3, #47	; 0x2f
 80096f6:	d0f8      	beq.n	80096ea <follow_path+0x16>
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	2b5c      	cmp	r3, #92	; 0x5c
 80096fe:	d0f4      	beq.n	80096ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	2200      	movs	r2, #0
 8009704:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	2b1f      	cmp	r3, #31
 800970c:	d80a      	bhi.n	8009724 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2280      	movs	r2, #128	; 0x80
 8009712:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009716:	2100      	movs	r1, #0
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff f91b 	bl	8008954 <dir_sdi>
 800971e:	4603      	mov	r3, r0
 8009720:	75fb      	strb	r3, [r7, #23]
 8009722:	e043      	b.n	80097ac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009724:	463b      	mov	r3, r7
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7ff fe1b 	bl	8009364 <create_name>
 800972e:	4603      	mov	r3, r0
 8009730:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009732:	7dfb      	ldrb	r3, [r7, #23]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d134      	bne.n	80097a2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7ff fc5a 	bl	8008ff2 <dir_find>
 800973e:	4603      	mov	r3, r0
 8009740:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009748:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00a      	beq.n	8009766 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009750:	7dfb      	ldrb	r3, [r7, #23]
 8009752:	2b04      	cmp	r3, #4
 8009754:	d127      	bne.n	80097a6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009756:	7afb      	ldrb	r3, [r7, #11]
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b00      	cmp	r3, #0
 800975e:	d122      	bne.n	80097a6 <follow_path+0xd2>
 8009760:	2305      	movs	r3, #5
 8009762:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009764:	e01f      	b.n	80097a6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009766:	7afb      	ldrb	r3, [r7, #11]
 8009768:	f003 0304 	and.w	r3, r3, #4
 800976c:	2b00      	cmp	r3, #0
 800976e:	d11c      	bne.n	80097aa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	799b      	ldrb	r3, [r3, #6]
 8009774:	f003 0310 	and.w	r3, r3, #16
 8009778:	2b00      	cmp	r3, #0
 800977a:	d102      	bne.n	8009782 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800977c:	2305      	movs	r3, #5
 800977e:	75fb      	strb	r3, [r7, #23]
 8009780:	e014      	b.n	80097ac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009790:	4413      	add	r3, r2
 8009792:	4619      	mov	r1, r3
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f7ff fa64 	bl	8008c62 <ld_clust>
 800979a:	4602      	mov	r2, r0
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80097a0:	e7c0      	b.n	8009724 <follow_path+0x50>
			if (res != FR_OK) break;
 80097a2:	bf00      	nop
 80097a4:	e002      	b.n	80097ac <follow_path+0xd8>
				break;
 80097a6:	bf00      	nop
 80097a8:	e000      	b.n	80097ac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80097aa:	bf00      	nop
			}
		}
	}

	return res;
 80097ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3718      	adds	r7, #24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b087      	sub	sp, #28
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80097be:	f04f 33ff 	mov.w	r3, #4294967295
 80097c2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d031      	beq.n	8009830 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	617b      	str	r3, [r7, #20]
 80097d2:	e002      	b.n	80097da <get_ldnumber+0x24>
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	3301      	adds	r3, #1
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b1f      	cmp	r3, #31
 80097e0:	d903      	bls.n	80097ea <get_ldnumber+0x34>
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	2b3a      	cmp	r3, #58	; 0x3a
 80097e8:	d1f4      	bne.n	80097d4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	2b3a      	cmp	r3, #58	; 0x3a
 80097f0:	d11c      	bne.n	800982c <get_ldnumber+0x76>
			tp = *path;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	60fa      	str	r2, [r7, #12]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	3b30      	subs	r3, #48	; 0x30
 8009802:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	2b09      	cmp	r3, #9
 8009808:	d80e      	bhi.n	8009828 <get_ldnumber+0x72>
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	429a      	cmp	r2, r3
 8009810:	d10a      	bne.n	8009828 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d107      	bne.n	8009828 <get_ldnumber+0x72>
					vol = (int)i;
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	3301      	adds	r3, #1
 8009820:	617b      	str	r3, [r7, #20]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	e002      	b.n	8009832 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800982c:	2300      	movs	r3, #0
 800982e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009830:	693b      	ldr	r3, [r7, #16]
}
 8009832:	4618      	mov	r0, r3
 8009834:	371c      	adds	r7, #28
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
	...

08009840 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	70da      	strb	r2, [r3, #3]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f04f 32ff 	mov.w	r2, #4294967295
 8009856:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f7fe fcfa 	bl	8008254 <move_window>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <check_fs+0x2a>
 8009866:	2304      	movs	r3, #4
 8009868:	e038      	b.n	80098dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3334      	adds	r3, #52	; 0x34
 800986e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009872:	4618      	mov	r0, r3
 8009874:	f7fe fa3e 	bl	8007cf4 <ld_word>
 8009878:	4603      	mov	r3, r0
 800987a:	461a      	mov	r2, r3
 800987c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009880:	429a      	cmp	r2, r3
 8009882:	d001      	beq.n	8009888 <check_fs+0x48>
 8009884:	2303      	movs	r3, #3
 8009886:	e029      	b.n	80098dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800988e:	2be9      	cmp	r3, #233	; 0xe9
 8009890:	d009      	beq.n	80098a6 <check_fs+0x66>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009898:	2beb      	cmp	r3, #235	; 0xeb
 800989a:	d11e      	bne.n	80098da <check_fs+0x9a>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80098a2:	2b90      	cmp	r3, #144	; 0x90
 80098a4:	d119      	bne.n	80098da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	3334      	adds	r3, #52	; 0x34
 80098aa:	3336      	adds	r3, #54	; 0x36
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe fa39 	bl	8007d24 <ld_dword>
 80098b2:	4603      	mov	r3, r0
 80098b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80098b8:	4a0a      	ldr	r2, [pc, #40]	; (80098e4 <check_fs+0xa4>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d101      	bne.n	80098c2 <check_fs+0x82>
 80098be:	2300      	movs	r3, #0
 80098c0:	e00c      	b.n	80098dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3334      	adds	r3, #52	; 0x34
 80098c6:	3352      	adds	r3, #82	; 0x52
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fe fa2b 	bl	8007d24 <ld_dword>
 80098ce:	4603      	mov	r3, r0
 80098d0:	4a05      	ldr	r2, [pc, #20]	; (80098e8 <check_fs+0xa8>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d101      	bne.n	80098da <check_fs+0x9a>
 80098d6:	2300      	movs	r3, #0
 80098d8:	e000      	b.n	80098dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80098da:	2302      	movs	r3, #2
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	00544146 	.word	0x00544146
 80098e8:	33544146 	.word	0x33544146

080098ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b096      	sub	sp, #88	; 0x58
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	4613      	mov	r3, r2
 80098f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2200      	movs	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f7ff ff58 	bl	80097b6 <get_ldnumber>
 8009906:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800990a:	2b00      	cmp	r3, #0
 800990c:	da01      	bge.n	8009912 <find_volume+0x26>
 800990e:	230b      	movs	r3, #11
 8009910:	e231      	b.n	8009d76 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009912:	4aa8      	ldr	r2, [pc, #672]	; (8009bb4 <find_volume+0x2c8>)
 8009914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800991a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800991c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <find_volume+0x3a>
 8009922:	230c      	movs	r3, #12
 8009924:	e227      	b.n	8009d76 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800992a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800992c:	79fb      	ldrb	r3, [r7, #7]
 800992e:	f023 0301 	bic.w	r3, r3, #1
 8009932:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d01a      	beq.n	8009972 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800993c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993e:	785b      	ldrb	r3, [r3, #1]
 8009940:	4618      	mov	r0, r3
 8009942:	f7fe f939 	bl	8007bb8 <disk_status>
 8009946:	4603      	mov	r3, r0
 8009948:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800994c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10c      	bne.n	8009972 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009958:	79fb      	ldrb	r3, [r7, #7]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d007      	beq.n	800996e <find_volume+0x82>
 800995e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009962:	f003 0304 	and.w	r3, r3, #4
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800996a:	230a      	movs	r3, #10
 800996c:	e203      	b.n	8009d76 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800996e:	2300      	movs	r3, #0
 8009970:	e201      	b.n	8009d76 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009974:	2200      	movs	r2, #0
 8009976:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800997a:	b2da      	uxtb	r2, r3
 800997c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009982:	785b      	ldrb	r3, [r3, #1]
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe f931 	bl	8007bec <disk_initialize>
 800998a:	4603      	mov	r3, r0
 800998c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009990:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	2b00      	cmp	r3, #0
 800999a:	d001      	beq.n	80099a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800999c:	2303      	movs	r3, #3
 800999e:	e1ea      	b.n	8009d76 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80099a0:	79fb      	ldrb	r3, [r7, #7]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d007      	beq.n	80099b6 <find_volume+0xca>
 80099a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099aa:	f003 0304 	and.w	r3, r3, #4
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80099b2:	230a      	movs	r3, #10
 80099b4:	e1df      	b.n	8009d76 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80099ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099be:	f7ff ff3f 	bl	8009840 <check_fs>
 80099c2:	4603      	mov	r3, r0
 80099c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80099c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d14b      	bne.n	8009a68 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80099d0:	2300      	movs	r3, #0
 80099d2:	643b      	str	r3, [r7, #64]	; 0x40
 80099d4:	e01f      	b.n	8009a16 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80099dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099de:	011b      	lsls	r3, r3, #4
 80099e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80099e4:	4413      	add	r3, r2
 80099e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	3304      	adds	r3, #4
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d006      	beq.n	8009a00 <find_volume+0x114>
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	3308      	adds	r3, #8
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fe f994 	bl	8007d24 <ld_dword>
 80099fc:	4602      	mov	r2, r0
 80099fe:	e000      	b.n	8009a02 <find_volume+0x116>
 8009a00:	2200      	movs	r2, #0
 8009a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009a0a:	440b      	add	r3, r1
 8009a0c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a12:	3301      	adds	r3, #1
 8009a14:	643b      	str	r3, [r7, #64]	; 0x40
 8009a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	d9dc      	bls.n	80099d6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d002      	beq.n	8009a2c <find_volume+0x140>
 8009a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009a34:	4413      	add	r3, r2
 8009a36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009a3a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d005      	beq.n	8009a4e <find_volume+0x162>
 8009a42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a46:	f7ff fefb 	bl	8009840 <check_fs>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	e000      	b.n	8009a50 <find_volume+0x164>
 8009a4e:	2303      	movs	r3, #3
 8009a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009a54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d905      	bls.n	8009a68 <find_volume+0x17c>
 8009a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a5e:	3301      	adds	r3, #1
 8009a60:	643b      	str	r3, [r7, #64]	; 0x40
 8009a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a64:	2b03      	cmp	r3, #3
 8009a66:	d9e1      	bls.n	8009a2c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a6c:	2b04      	cmp	r3, #4
 8009a6e:	d101      	bne.n	8009a74 <find_volume+0x188>
 8009a70:	2301      	movs	r3, #1
 8009a72:	e180      	b.n	8009d76 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009a74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d901      	bls.n	8009a80 <find_volume+0x194>
 8009a7c:	230d      	movs	r3, #13
 8009a7e:	e17a      	b.n	8009d76 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a82:	3334      	adds	r3, #52	; 0x34
 8009a84:	330b      	adds	r3, #11
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe f934 	bl	8007cf4 <ld_word>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a92:	d001      	beq.n	8009a98 <find_volume+0x1ac>
 8009a94:	230d      	movs	r3, #13
 8009a96:	e16e      	b.n	8009d76 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9a:	3334      	adds	r3, #52	; 0x34
 8009a9c:	3316      	adds	r3, #22
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fe f928 	bl	8007cf4 <ld_word>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d106      	bne.n	8009abc <find_volume+0x1d0>
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	3334      	adds	r3, #52	; 0x34
 8009ab2:	3324      	adds	r3, #36	; 0x24
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fe f935 	bl	8007d24 <ld_dword>
 8009aba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ac0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ace:	789b      	ldrb	r3, [r3, #2]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d005      	beq.n	8009ae0 <find_volume+0x1f4>
 8009ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad6:	789b      	ldrb	r3, [r3, #2]
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d001      	beq.n	8009ae0 <find_volume+0x1f4>
 8009adc:	230d      	movs	r3, #13
 8009ade:	e14a      	b.n	8009d76 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae2:	789b      	ldrb	r3, [r3, #2]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ae8:	fb02 f303 	mul.w	r3, r2, r3
 8009aec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afc:	895b      	ldrh	r3, [r3, #10]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d008      	beq.n	8009b14 <find_volume+0x228>
 8009b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b04:	895b      	ldrh	r3, [r3, #10]
 8009b06:	461a      	mov	r2, r3
 8009b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0a:	895b      	ldrh	r3, [r3, #10]
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	4013      	ands	r3, r2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d001      	beq.n	8009b18 <find_volume+0x22c>
 8009b14:	230d      	movs	r3, #13
 8009b16:	e12e      	b.n	8009d76 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	3334      	adds	r3, #52	; 0x34
 8009b1c:	3311      	adds	r3, #17
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fe f8e8 	bl	8007cf4 <ld_word>
 8009b24:	4603      	mov	r3, r0
 8009b26:	461a      	mov	r2, r3
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2e:	891b      	ldrh	r3, [r3, #8]
 8009b30:	f003 030f 	and.w	r3, r3, #15
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <find_volume+0x252>
 8009b3a:	230d      	movs	r3, #13
 8009b3c:	e11b      	b.n	8009d76 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b40:	3334      	adds	r3, #52	; 0x34
 8009b42:	3313      	adds	r3, #19
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe f8d5 	bl	8007cf4 <ld_word>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d106      	bne.n	8009b62 <find_volume+0x276>
 8009b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b56:	3334      	adds	r3, #52	; 0x34
 8009b58:	3320      	adds	r3, #32
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fe f8e2 	bl	8007d24 <ld_dword>
 8009b60:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b64:	3334      	adds	r3, #52	; 0x34
 8009b66:	330e      	adds	r3, #14
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe f8c3 	bl	8007cf4 <ld_word>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009b72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d101      	bne.n	8009b7c <find_volume+0x290>
 8009b78:	230d      	movs	r3, #13
 8009b7a:	e0fc      	b.n	8009d76 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009b7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b80:	4413      	add	r3, r2
 8009b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b84:	8912      	ldrh	r2, [r2, #8]
 8009b86:	0912      	lsrs	r2, r2, #4
 8009b88:	b292      	uxth	r2, r2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009b8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d201      	bcs.n	8009b9a <find_volume+0x2ae>
 8009b96:	230d      	movs	r3, #13
 8009b98:	e0ed      	b.n	8009d76 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ba2:	8952      	ldrh	r2, [r2, #10]
 8009ba4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ba8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d103      	bne.n	8009bb8 <find_volume+0x2cc>
 8009bb0:	230d      	movs	r3, #13
 8009bb2:	e0e0      	b.n	8009d76 <find_volume+0x48a>
 8009bb4:	200000dc 	.word	0x200000dc
		fmt = FS_FAT32;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d802      	bhi.n	8009bce <find_volume+0x2e2>
 8009bc8:	2302      	movs	r3, #2
 8009bca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d802      	bhi.n	8009bde <find_volume+0x2f2>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	1c9a      	adds	r2, r3, #2
 8009be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009bea:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009bec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bf0:	441a      	add	r2, r3
 8009bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009bf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfa:	441a      	add	r2, r3
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfe:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009c00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d11e      	bne.n	8009c46 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0a:	3334      	adds	r3, #52	; 0x34
 8009c0c:	332a      	adds	r3, #42	; 0x2a
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe f870 	bl	8007cf4 <ld_word>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <find_volume+0x332>
 8009c1a:	230d      	movs	r3, #13
 8009c1c:	e0ab      	b.n	8009d76 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c20:	891b      	ldrh	r3, [r3, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <find_volume+0x33e>
 8009c26:	230d      	movs	r3, #13
 8009c28:	e0a5      	b.n	8009d76 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2c:	3334      	adds	r3, #52	; 0x34
 8009c2e:	332c      	adds	r3, #44	; 0x2c
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7fe f877 	bl	8007d24 <ld_dword>
 8009c36:	4602      	mov	r2, r0
 8009c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	647b      	str	r3, [r7, #68]	; 0x44
 8009c44:	e01f      	b.n	8009c86 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c48:	891b      	ldrh	r3, [r3, #8]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d101      	bne.n	8009c52 <find_volume+0x366>
 8009c4e:	230d      	movs	r3, #13
 8009c50:	e091      	b.n	8009d76 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c58:	441a      	add	r2, r3
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009c5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d103      	bne.n	8009c6e <find_volume+0x382>
 8009c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	005b      	lsls	r3, r3, #1
 8009c6c:	e00a      	b.n	8009c84 <find_volume+0x398>
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c70:	699a      	ldr	r2, [r3, #24]
 8009c72:	4613      	mov	r3, r2
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	4413      	add	r3, r2
 8009c78:	085a      	lsrs	r2, r3, #1
 8009c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009c84:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c88:	69da      	ldr	r2, [r3, #28]
 8009c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c8c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009c90:	0a5b      	lsrs	r3, r3, #9
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d201      	bcs.n	8009c9a <find_volume+0x3ae>
 8009c96:	230d      	movs	r3, #13
 8009c98:	e06d      	b.n	8009d76 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca0:	615a      	str	r2, [r3, #20]
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca4:	695a      	ldr	r2, [r3, #20]
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cac:	2280      	movs	r2, #128	; 0x80
 8009cae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cb4:	2b03      	cmp	r3, #3
 8009cb6:	d149      	bne.n	8009d4c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cba:	3334      	adds	r3, #52	; 0x34
 8009cbc:	3330      	adds	r3, #48	; 0x30
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fe f818 	bl	8007cf4 <ld_word>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d140      	bne.n	8009d4c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ccc:	3301      	adds	r3, #1
 8009cce:	4619      	mov	r1, r3
 8009cd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009cd2:	f7fe fabf 	bl	8008254 <move_window>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d137      	bne.n	8009d4c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8009cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cde:	2200      	movs	r2, #0
 8009ce0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce4:	3334      	adds	r3, #52	; 0x34
 8009ce6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe f802 	bl	8007cf4 <ld_word>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d127      	bne.n	8009d4c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfe:	3334      	adds	r3, #52	; 0x34
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fe f80f 	bl	8007d24 <ld_dword>
 8009d06:	4603      	mov	r3, r0
 8009d08:	4a1d      	ldr	r2, [pc, #116]	; (8009d80 <find_volume+0x494>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d11e      	bne.n	8009d4c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d10:	3334      	adds	r3, #52	; 0x34
 8009d12:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe f804 	bl	8007d24 <ld_dword>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	4a19      	ldr	r2, [pc, #100]	; (8009d84 <find_volume+0x498>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d113      	bne.n	8009d4c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	3334      	adds	r3, #52	; 0x34
 8009d28:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7fd fff9 	bl	8007d24 <ld_dword>
 8009d32:	4602      	mov	r2, r0
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	3334      	adds	r3, #52	; 0x34
 8009d3c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fd ffef 	bl	8007d24 <ld_dword>
 8009d46:	4602      	mov	r2, r0
 8009d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009d52:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009d54:	4b0c      	ldr	r3, [pc, #48]	; (8009d88 <find_volume+0x49c>)
 8009d56:	881b      	ldrh	r3, [r3, #0]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	4b0a      	ldr	r3, [pc, #40]	; (8009d88 <find_volume+0x49c>)
 8009d5e:	801a      	strh	r2, [r3, #0]
 8009d60:	4b09      	ldr	r3, [pc, #36]	; (8009d88 <find_volume+0x49c>)
 8009d62:	881a      	ldrh	r2, [r3, #0]
 8009d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d66:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6a:	4a08      	ldr	r2, [pc, #32]	; (8009d8c <find_volume+0x4a0>)
 8009d6c:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009d6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d70:	f7fe fa08 	bl	8008184 <clear_lock>
#endif
	return FR_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3758      	adds	r7, #88	; 0x58
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	41615252 	.word	0x41615252
 8009d84:	61417272 	.word	0x61417272
 8009d88:	200000e0 	.word	0x200000e0
 8009d8c:	20000104 	.word	0x20000104

08009d90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009d9a:	2309      	movs	r3, #9
 8009d9c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d01c      	beq.n	8009dde <validate+0x4e>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d018      	beq.n	8009dde <validate+0x4e>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d013      	beq.n	8009dde <validate+0x4e>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	889a      	ldrh	r2, [r3, #4]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	88db      	ldrh	r3, [r3, #6]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d10c      	bne.n	8009dde <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	785b      	ldrb	r3, [r3, #1]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fd fef4 	bl	8007bb8 <disk_status>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <validate+0x4e>
			res = FR_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d102      	bne.n	8009dea <validate+0x5a>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	e000      	b.n	8009dec <validate+0x5c>
 8009dea:	2300      	movs	r3, #0
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	6013      	str	r3, [r2, #0]
	return res;
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
	...

08009dfc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b088      	sub	sp, #32
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	4613      	mov	r3, r2
 8009e08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009e0e:	f107 0310 	add.w	r3, r7, #16
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7ff fccf 	bl	80097b6 <get_ldnumber>
 8009e18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	da01      	bge.n	8009e24 <f_mount+0x28>
 8009e20:	230b      	movs	r3, #11
 8009e22:	e02b      	b.n	8009e7c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009e24:	4a17      	ldr	r2, [pc, #92]	; (8009e84 <f_mount+0x88>)
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d005      	beq.n	8009e40 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009e34:	69b8      	ldr	r0, [r7, #24]
 8009e36:	f7fe f9a5 	bl	8008184 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d002      	beq.n	8009e4c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	490d      	ldr	r1, [pc, #52]	; (8009e84 <f_mount+0x88>)
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d002      	beq.n	8009e62 <f_mount+0x66>
 8009e5c:	79fb      	ldrb	r3, [r7, #7]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d001      	beq.n	8009e66 <f_mount+0x6a>
 8009e62:	2300      	movs	r3, #0
 8009e64:	e00a      	b.n	8009e7c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009e66:	f107 010c 	add.w	r1, r7, #12
 8009e6a:	f107 0308 	add.w	r3, r7, #8
 8009e6e:	2200      	movs	r2, #0
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7ff fd3b 	bl	80098ec <find_volume>
 8009e76:	4603      	mov	r3, r0
 8009e78:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3720      	adds	r7, #32
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	200000dc 	.word	0x200000dc

08009e88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b09a      	sub	sp, #104	; 0x68
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	4613      	mov	r3, r2
 8009e94:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <f_open+0x18>
 8009e9c:	2309      	movs	r3, #9
 8009e9e:	e1ad      	b.n	800a1fc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009ea0:	79fb      	ldrb	r3, [r7, #7]
 8009ea2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ea6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009ea8:	79fa      	ldrb	r2, [r7, #7]
 8009eaa:	f107 0114 	add.w	r1, r7, #20
 8009eae:	f107 0308 	add.w	r3, r7, #8
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7ff fd1a 	bl	80098ec <find_volume>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009ebe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f040 8191 	bne.w	800a1ea <f_open+0x362>
		dj.obj.fs = fs;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	f107 0318 	add.w	r3, r7, #24
 8009ed2:	4611      	mov	r1, r2
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7ff fbfd 	bl	80096d4 <follow_path>
 8009eda:	4603      	mov	r3, r0
 8009edc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009ee0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d11a      	bne.n	8009f1e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009ee8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009eec:	b25b      	sxtb	r3, r3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	da03      	bge.n	8009efa <f_open+0x72>
				res = FR_INVALID_NAME;
 8009ef2:	2306      	movs	r3, #6
 8009ef4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009ef8:	e011      	b.n	8009f1e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009efa:	79fb      	ldrb	r3, [r7, #7]
 8009efc:	f023 0301 	bic.w	r3, r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	bf14      	ite	ne
 8009f04:	2301      	movne	r3, #1
 8009f06:	2300      	moveq	r3, #0
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f107 0318 	add.w	r3, r7, #24
 8009f10:	4611      	mov	r1, r2
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fd ffee 	bl	8007ef4 <chk_lock>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009f1e:	79fb      	ldrb	r3, [r7, #7]
 8009f20:	f003 031c 	and.w	r3, r3, #28
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d07f      	beq.n	800a028 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009f28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d017      	beq.n	8009f60 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009f30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	d10e      	bne.n	8009f56 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009f38:	f7fe f838 	bl	8007fac <enq_lock>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d006      	beq.n	8009f50 <f_open+0xc8>
 8009f42:	f107 0318 	add.w	r3, r7, #24
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff f914 	bl	8009174 <dir_register>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	e000      	b.n	8009f52 <f_open+0xca>
 8009f50:	2312      	movs	r3, #18
 8009f52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009f56:	79fb      	ldrb	r3, [r7, #7]
 8009f58:	f043 0308 	orr.w	r3, r3, #8
 8009f5c:	71fb      	strb	r3, [r7, #7]
 8009f5e:	e010      	b.n	8009f82 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009f60:	7fbb      	ldrb	r3, [r7, #30]
 8009f62:	f003 0311 	and.w	r3, r3, #17
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d003      	beq.n	8009f72 <f_open+0xea>
					res = FR_DENIED;
 8009f6a:	2307      	movs	r3, #7
 8009f6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009f70:	e007      	b.n	8009f82 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009f72:	79fb      	ldrb	r3, [r7, #7]
 8009f74:	f003 0304 	and.w	r3, r3, #4
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <f_open+0xfa>
 8009f7c:	2308      	movs	r3, #8
 8009f7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009f82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d168      	bne.n	800a05c <f_open+0x1d4>
 8009f8a:	79fb      	ldrb	r3, [r7, #7]
 8009f8c:	f003 0308 	and.w	r3, r3, #8
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d063      	beq.n	800a05c <f_open+0x1d4>
				dw = GET_FATTIME();
 8009f94:	f7fd f8de 	bl	8007154 <get_fattime>
 8009f98:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9c:	330e      	adds	r3, #14
 8009f9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fd fefd 	bl	8007da0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	3316      	adds	r3, #22
 8009faa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7fd fef7 	bl	8007da0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb4:	330b      	adds	r3, #11
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fbe:	4611      	mov	r1, r2
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fe fe4e 	bl	8008c62 <ld_clust>
 8009fc6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fcc:	2200      	movs	r2, #0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fe fe66 	bl	8008ca0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	331c      	adds	r3, #28
 8009fd8:	2100      	movs	r1, #0
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fd fee0 	bl	8007da0 <st_dword>
					fs->wflag = 1;
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d037      	beq.n	800a05c <f_open+0x1d4>
						dw = fs->winsect;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009ff2:	f107 0318 	add.w	r3, r7, #24
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fe fb79 	bl	80086f2 <remove_chain>
 800a000:	4603      	mov	r3, r0
 800a002:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a006:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d126      	bne.n	800a05c <f_open+0x1d4>
							res = move_window(fs, dw);
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a012:	4618      	mov	r0, r3
 800a014:	f7fe f91e 	bl	8008254 <move_window>
 800a018:	4603      	mov	r3, r0
 800a01a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a022:	3a01      	subs	r2, #1
 800a024:	611a      	str	r2, [r3, #16]
 800a026:	e019      	b.n	800a05c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a028:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d115      	bne.n	800a05c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a030:	7fbb      	ldrb	r3, [r7, #30]
 800a032:	f003 0310 	and.w	r3, r3, #16
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a03a:	2304      	movs	r3, #4
 800a03c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a040:	e00c      	b.n	800a05c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a042:	79fb      	ldrb	r3, [r7, #7]
 800a044:	f003 0302 	and.w	r3, r3, #2
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d007      	beq.n	800a05c <f_open+0x1d4>
 800a04c:	7fbb      	ldrb	r3, [r7, #30]
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b00      	cmp	r3, #0
 800a054:	d002      	beq.n	800a05c <f_open+0x1d4>
						res = FR_DENIED;
 800a056:	2307      	movs	r3, #7
 800a058:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a05c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a060:	2b00      	cmp	r3, #0
 800a062:	d128      	bne.n	800a0b6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	f003 0308 	and.w	r3, r3, #8
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d003      	beq.n	800a076 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a06e:	79fb      	ldrb	r3, [r7, #7]
 800a070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a074:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a07e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a084:	79fb      	ldrb	r3, [r7, #7]
 800a086:	f023 0301 	bic.w	r3, r3, #1
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	bf14      	ite	ne
 800a08e:	2301      	movne	r3, #1
 800a090:	2300      	moveq	r3, #0
 800a092:	b2db      	uxtb	r3, r3
 800a094:	461a      	mov	r2, r3
 800a096:	f107 0318 	add.w	r3, r7, #24
 800a09a:	4611      	mov	r1, r2
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fd ffa7 	bl	8007ff0 <inc_lock>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d102      	bne.n	800a0b6 <f_open+0x22e>
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a0b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f040 8095 	bne.w	800a1ea <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe fdcb 	bl	8008c62 <ld_clust>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d4:	331c      	adds	r3, #28
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fd fe24 	bl	8007d24 <ld_dword>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	88da      	ldrh	r2, [r3, #6]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	79fa      	ldrb	r2, [r7, #7]
 800a0fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	3330      	adds	r3, #48	; 0x30
 800a112:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a116:	2100      	movs	r1, #0
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fd fe8e 	bl	8007e3a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a11e:	79fb      	ldrb	r3, [r7, #7]
 800a120:	f003 0320 	and.w	r3, r3, #32
 800a124:	2b00      	cmp	r3, #0
 800a126:	d060      	beq.n	800a1ea <f_open+0x362>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d05c      	beq.n	800a1ea <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	68da      	ldr	r2, [r3, #12]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	895b      	ldrh	r3, [r3, #10]
 800a13c:	025b      	lsls	r3, r3, #9
 800a13e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a14c:	e016      	b.n	800a17c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a152:	4618      	mov	r0, r3
 800a154:	f7fe f939 	bl	80083ca <get_fat>
 800a158:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a15a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d802      	bhi.n	800a166 <f_open+0x2de>
 800a160:	2302      	movs	r3, #2
 800a162:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16c:	d102      	bne.n	800a174 <f_open+0x2ec>
 800a16e:	2301      	movs	r3, #1
 800a170:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a174:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a17c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a180:	2b00      	cmp	r3, #0
 800a182:	d103      	bne.n	800a18c <f_open+0x304>
 800a184:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a188:	429a      	cmp	r2, r3
 800a18a:	d8e0      	bhi.n	800a14e <f_open+0x2c6>
				}
				fp->clust = clst;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a190:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a192:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a196:	2b00      	cmp	r3, #0
 800a198:	d127      	bne.n	800a1ea <f_open+0x362>
 800a19a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a19c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d022      	beq.n	800a1ea <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7fe f8ef 	bl	800838c <clust2sect>
 800a1ae:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a1b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d103      	bne.n	800a1be <f_open+0x336>
						res = FR_INT_ERR;
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a1bc:	e015      	b.n	800a1ea <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a1be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1c0:	0a5a      	lsrs	r2, r3, #9
 800a1c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1c4:	441a      	add	r2, r3
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	7858      	ldrb	r0, [r3, #1]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6a1a      	ldr	r2, [r3, #32]
 800a1d8:	2301      	movs	r3, #1
 800a1da:	f7fd fd2d 	bl	8007c38 <disk_read>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <f_open+0x362>
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a1ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d002      	beq.n	800a1f8 <f_open+0x370>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a1f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3768      	adds	r7, #104	; 0x68
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b08c      	sub	sp, #48	; 0x30
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
 800a210:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f107 0210 	add.w	r2, r7, #16
 800a222:	4611      	mov	r1, r2
 800a224:	4618      	mov	r0, r3
 800a226:	f7ff fdb3 	bl	8009d90 <validate>
 800a22a:	4603      	mov	r3, r0
 800a22c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a230:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a234:	2b00      	cmp	r3, #0
 800a236:	d107      	bne.n	800a248 <f_write+0x44>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	7d5b      	ldrb	r3, [r3, #21]
 800a23c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <f_write+0x4a>
 800a248:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a24c:	e14b      	b.n	800a4e6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	7d1b      	ldrb	r3, [r3, #20]
 800a252:	f003 0302 	and.w	r3, r3, #2
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <f_write+0x5a>
 800a25a:	2307      	movs	r3, #7
 800a25c:	e143      	b.n	800a4e6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	699a      	ldr	r2, [r3, #24]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	441a      	add	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	f080 812d 	bcs.w	800a4ca <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	43db      	mvns	r3, r3
 800a276:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a278:	e127      	b.n	800a4ca <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a282:	2b00      	cmp	r3, #0
 800a284:	f040 80e3 	bne.w	800a44e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	0a5b      	lsrs	r3, r3, #9
 800a28e:	693a      	ldr	r2, [r7, #16]
 800a290:	8952      	ldrh	r2, [r2, #10]
 800a292:	3a01      	subs	r2, #1
 800a294:	4013      	ands	r3, r2
 800a296:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d143      	bne.n	800a326 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10c      	bne.n	800a2c0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d11a      	bne.n	800a2e8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fe fa80 	bl	80087bc <create_chain>
 800a2bc:	62b8      	str	r0, [r7, #40]	; 0x28
 800a2be:	e013      	b.n	800a2e8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d007      	beq.n	800a2d8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f7fe fb0c 	bl	80088ec <clmt_clust>
 800a2d4:	62b8      	str	r0, [r7, #40]	; 0x28
 800a2d6:	e007      	b.n	800a2e8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	69db      	ldr	r3, [r3, #28]
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4610      	mov	r0, r2
 800a2e2:	f7fe fa6b 	bl	80087bc <create_chain>
 800a2e6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f000 80f2 	beq.w	800a4d4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d104      	bne.n	800a300 <f_write+0xfc>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2202      	movs	r2, #2
 800a2fa:	755a      	strb	r2, [r3, #21]
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	e0f2      	b.n	800a4e6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a306:	d104      	bne.n	800a312 <f_write+0x10e>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2201      	movs	r2, #1
 800a30c:	755a      	strb	r2, [r3, #21]
 800a30e:	2301      	movs	r3, #1
 800a310:	e0e9      	b.n	800a4e6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a316:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d102      	bne.n	800a326 <f_write+0x122>
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a324:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	7d1b      	ldrb	r3, [r3, #20]
 800a32a:	b25b      	sxtb	r3, r3
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	da18      	bge.n	800a362 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	7858      	ldrb	r0, [r3, #1]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6a1a      	ldr	r2, [r3, #32]
 800a33e:	2301      	movs	r3, #1
 800a340:	f7fd fc9a 	bl	8007c78 <disk_write>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d004      	beq.n	800a354 <f_write+0x150>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2201      	movs	r2, #1
 800a34e:	755a      	strb	r2, [r3, #21]
 800a350:	2301      	movs	r3, #1
 800a352:	e0c8      	b.n	800a4e6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	7d1b      	ldrb	r3, [r3, #20]
 800a358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a362:	693a      	ldr	r2, [r7, #16]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	69db      	ldr	r3, [r3, #28]
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f7fe f80e 	bl	800838c <clust2sect>
 800a370:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d104      	bne.n	800a382 <f_write+0x17e>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2202      	movs	r2, #2
 800a37c:	755a      	strb	r2, [r3, #21]
 800a37e:	2302      	movs	r3, #2
 800a380:	e0b1      	b.n	800a4e6 <f_write+0x2e2>
			sect += csect;
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	4413      	add	r3, r2
 800a388:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	0a5b      	lsrs	r3, r3, #9
 800a38e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a390:	6a3b      	ldr	r3, [r7, #32]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d03c      	beq.n	800a410 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a396:	69ba      	ldr	r2, [r7, #24]
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	4413      	add	r3, r2
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	8952      	ldrh	r2, [r2, #10]
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d905      	bls.n	800a3b0 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	895b      	ldrh	r3, [r3, #10]
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	7858      	ldrb	r0, [r3, #1]
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	69f9      	ldr	r1, [r7, #28]
 800a3ba:	f7fd fc5d 	bl	8007c78 <disk_write>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d004      	beq.n	800a3ce <f_write+0x1ca>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	755a      	strb	r2, [r3, #21]
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e08b      	b.n	800a4e6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6a1a      	ldr	r2, [r3, #32]
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	6a3a      	ldr	r2, [r7, #32]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d915      	bls.n	800a408 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6a1a      	ldr	r2, [r3, #32]
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	025b      	lsls	r3, r3, #9
 800a3ec:	69fa      	ldr	r2, [r7, #28]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	f7fd fcff 	bl	8007df8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	7d1b      	ldrb	r3, [r3, #20]
 800a3fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a402:	b2da      	uxtb	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a408:	6a3b      	ldr	r3, [r7, #32]
 800a40a:	025b      	lsls	r3, r3, #9
 800a40c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a40e:	e03f      	b.n	800a490 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	429a      	cmp	r2, r3
 800a418:	d016      	beq.n	800a448 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	699a      	ldr	r2, [r3, #24]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a422:	429a      	cmp	r2, r3
 800a424:	d210      	bcs.n	800a448 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	7858      	ldrb	r0, [r3, #1]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a430:	2301      	movs	r3, #1
 800a432:	697a      	ldr	r2, [r7, #20]
 800a434:	f7fd fc00 	bl	8007c38 <disk_read>
 800a438:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d004      	beq.n	800a448 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2201      	movs	r2, #1
 800a442:	755a      	strb	r2, [r3, #21]
 800a444:	2301      	movs	r3, #1
 800a446:	e04e      	b.n	800a4e6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a456:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a45a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a45c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	429a      	cmp	r2, r3
 800a462:	d901      	bls.n	800a468 <f_write+0x264>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a476:	4413      	add	r3, r2
 800a478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a47a:	69f9      	ldr	r1, [r7, #28]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fd fcbb 	bl	8007df8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	7d1b      	ldrb	r3, [r3, #20]
 800a486:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a490:	69fa      	ldr	r2, [r7, #28]
 800a492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a494:	4413      	add	r3, r2
 800a496:	61fb      	str	r3, [r7, #28]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	699a      	ldr	r2, [r3, #24]
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	441a      	add	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	619a      	str	r2, [r3, #24]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	68da      	ldr	r2, [r3, #12]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	bf38      	it	cc
 800a4b0:	461a      	movcc	r2, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	60da      	str	r2, [r3, #12]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	441a      	add	r2, r3
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	601a      	str	r2, [r3, #0]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f47f aed4 	bne.w	800a27a <f_write+0x76>
 800a4d2:	e000      	b.n	800a4d6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a4d4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	7d1b      	ldrb	r3, [r3, #20]
 800a4da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3730      	adds	r7, #48	; 0x30
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b086      	sub	sp, #24
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f107 0208 	add.w	r2, r7, #8
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7ff fc46 	bl	8009d90 <validate>
 800a504:	4603      	mov	r3, r0
 800a506:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a508:	7dfb      	ldrb	r3, [r7, #23]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d168      	bne.n	800a5e0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	7d1b      	ldrb	r3, [r3, #20]
 800a512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a516:	2b00      	cmp	r3, #0
 800a518:	d062      	beq.n	800a5e0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	7d1b      	ldrb	r3, [r3, #20]
 800a51e:	b25b      	sxtb	r3, r3
 800a520:	2b00      	cmp	r3, #0
 800a522:	da15      	bge.n	800a550 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	7858      	ldrb	r0, [r3, #1]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a1a      	ldr	r2, [r3, #32]
 800a532:	2301      	movs	r3, #1
 800a534:	f7fd fba0 	bl	8007c78 <disk_write>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <f_sync+0x54>
 800a53e:	2301      	movs	r3, #1
 800a540:	e04f      	b.n	800a5e2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	7d1b      	ldrb	r3, [r3, #20]
 800a546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a550:	f7fc fe00 	bl	8007154 <get_fattime>
 800a554:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	4619      	mov	r1, r3
 800a55e:	4610      	mov	r0, r2
 800a560:	f7fd fe78 	bl	8008254 <move_window>
 800a564:	4603      	mov	r3, r0
 800a566:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a568:	7dfb      	ldrb	r3, [r7, #23]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d138      	bne.n	800a5e0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a572:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	330b      	adds	r3, #11
 800a578:	781a      	ldrb	r2, [r3, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	330b      	adds	r3, #11
 800a57e:	f042 0220 	orr.w	r2, r2, #32
 800a582:	b2d2      	uxtb	r2, r2
 800a584:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6818      	ldr	r0, [r3, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	461a      	mov	r2, r3
 800a590:	68f9      	ldr	r1, [r7, #12]
 800a592:	f7fe fb85 	bl	8008ca0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f103 021c 	add.w	r2, r3, #28
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	f7fd fbfc 	bl	8007da0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	3316      	adds	r3, #22
 800a5ac:	6939      	ldr	r1, [r7, #16]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fd fbf6 	bl	8007da0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	3312      	adds	r3, #18
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fd fbd5 	bl	8007d6a <st_word>
					fs->wflag = 1;
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fd fe71 	bl	80082b0 <sync_fs>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	7d1b      	ldrb	r3, [r3, #20]
 800a5d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3718      	adds	r7, #24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7ff ff7b 	bl	800a4ee <f_sync>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d118      	bne.n	800a634 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f107 0208 	add.w	r2, r7, #8
 800a608:	4611      	mov	r1, r2
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff fbc0 	bl	8009d90 <validate>
 800a610:	4603      	mov	r3, r0
 800a612:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a614:	7bfb      	ldrb	r3, [r7, #15]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10c      	bne.n	800a634 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fd fd74 	bl	800810c <dec_lock>
 800a624:	4603      	mov	r3, r0
 800a626:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a628:	7bfb      	ldrb	r3, [r7, #15]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d102      	bne.n	800a634 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a634:	7bfb      	ldrb	r3, [r7, #15]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b098      	sub	sp, #96	; 0x60
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a646:	f107 010c 	add.w	r1, r7, #12
 800a64a:	1d3b      	adds	r3, r7, #4
 800a64c:	2202      	movs	r2, #2
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff f94c 	bl	80098ec <find_volume>
 800a654:	4603      	mov	r3, r0
 800a656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800a65e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a662:	2b00      	cmp	r3, #0
 800a664:	f040 80ec 	bne.w	800a840 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	f107 0310 	add.w	r3, r7, #16
 800a66e:	4611      	mov	r1, r2
 800a670:	4618      	mov	r0, r3
 800a672:	f7ff f82f 	bl	80096d4 <follow_path>
 800a676:	4603      	mov	r3, r0
 800a678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800a67c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a680:	2b00      	cmp	r3, #0
 800a682:	d102      	bne.n	800a68a <f_mkdir+0x4c>
 800a684:	2308      	movs	r3, #8
 800a686:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800a68a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a68e:	2b04      	cmp	r3, #4
 800a690:	f040 80d6 	bne.w	800a840 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800a694:	f107 0310 	add.w	r3, r7, #16
 800a698:	2100      	movs	r1, #0
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fe f88e 	bl	80087bc <create_chain>
 800a6a0:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	895b      	ldrh	r3, [r3, #10]
 800a6a6:	025b      	lsls	r3, r3, #9
 800a6a8:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800a6b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d102      	bne.n	800a6bc <f_mkdir+0x7e>
 800a6b6:	2307      	movs	r3, #7
 800a6b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800a6bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d102      	bne.n	800a6c8 <f_mkdir+0x8a>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a6c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ce:	d102      	bne.n	800a6d6 <f_mkdir+0x98>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800a6d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d106      	bne.n	800a6ec <f_mkdir+0xae>
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fd fd73 	bl	80081cc <sync_window>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800a6ec:	f7fc fd32 	bl	8007154 <get_fattime>
 800a6f0:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800a6f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d16a      	bne.n	800a7d0 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fd fe44 	bl	800838c <clust2sect>
 800a704:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	3334      	adds	r3, #52	; 0x34
 800a70a:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800a70c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a710:	2100      	movs	r1, #0
 800a712:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a714:	f7fd fb91 	bl	8007e3a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800a718:	220b      	movs	r2, #11
 800a71a:	2120      	movs	r1, #32
 800a71c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a71e:	f7fd fb8c 	bl	8007e3a <mem_set>
					dir[DIR_Name] = '.';
 800a722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a724:	222e      	movs	r2, #46	; 0x2e
 800a726:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800a728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a72a:	330b      	adds	r3, #11
 800a72c:	2210      	movs	r2, #16
 800a72e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800a730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a732:	3316      	adds	r3, #22
 800a734:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a736:	4618      	mov	r0, r3
 800a738:	f7fd fb32 	bl	8007da0 <st_dword>
					st_clust(fs, dir, dcl);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a740:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a742:	4618      	mov	r0, r3
 800a744:	f7fe faac 	bl	8008ca0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800a748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a74a:	3320      	adds	r3, #32
 800a74c:	2220      	movs	r2, #32
 800a74e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a750:	4618      	mov	r0, r3
 800a752:	f7fd fb51 	bl	8007df8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800a756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a758:	3321      	adds	r3, #33	; 0x21
 800a75a:	222e      	movs	r2, #46	; 0x2e
 800a75c:	701a      	strb	r2, [r3, #0]
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2b03      	cmp	r3, #3
 800a768:	d106      	bne.n	800a778 <f_mkdir+0x13a>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a770:	429a      	cmp	r2, r3
 800a772:	d101      	bne.n	800a778 <f_mkdir+0x13a>
 800a774:	2300      	movs	r3, #0
 800a776:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a77c:	3320      	adds	r3, #32
 800a77e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a780:	4619      	mov	r1, r3
 800a782:	f7fe fa8d 	bl	8008ca0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	895b      	ldrh	r3, [r3, #10]
 800a78a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a78c:	e01b      	b.n	800a7c6 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800a78e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a790:	1c5a      	adds	r2, r3, #1
 800a792:	657a      	str	r2, [r7, #84]	; 0x54
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2201      	movs	r2, #1
 800a79c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7fd fd13 	bl	80081cc <sync_window>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800a7ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10c      	bne.n	800a7ce <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800a7b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a7bc:	f7fd fb3d 	bl	8007e3a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800a7c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1e0      	bne.n	800a78e <f_mkdir+0x150>
 800a7cc:	e000      	b.n	800a7d0 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800a7ce:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800a7d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d107      	bne.n	800a7e8 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800a7d8:	f107 0310 	add.w	r3, r7, #16
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7fe fcc9 	bl	8009174 <dir_register>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800a7e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d120      	bne.n	800a832 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800a7f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7f6:	3316      	adds	r3, #22
 800a7f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fd fad0 	bl	8007da0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a804:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a806:	4618      	mov	r0, r3
 800a808:	f7fe fa4a 	bl	8008ca0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800a80c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a80e:	330b      	adds	r3, #11
 800a810:	2210      	movs	r2, #16
 800a812:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2201      	movs	r2, #1
 800a818:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800a81a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10e      	bne.n	800a840 <f_mkdir+0x202>
					res = sync_fs(fs);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	4618      	mov	r0, r3
 800a826:	f7fd fd43 	bl	80082b0 <sync_fs>
 800a82a:	4603      	mov	r3, r0
 800a82c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a830:	e006      	b.n	800a840 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800a832:	f107 0310 	add.w	r3, r7, #16
 800a836:	2200      	movs	r2, #0
 800a838:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fd ff59 	bl	80086f2 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a840:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a844:	4618      	mov	r0, r3
 800a846:	3760      	adds	r7, #96	; 0x60
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b087      	sub	sp, #28
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	4613      	mov	r3, r2
 800a858:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a85a:	2301      	movs	r3, #1
 800a85c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a862:	4b1f      	ldr	r3, [pc, #124]	; (800a8e0 <FATFS_LinkDriverEx+0x94>)
 800a864:	7a5b      	ldrb	r3, [r3, #9]
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d131      	bne.n	800a8d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a86c:	4b1c      	ldr	r3, [pc, #112]	; (800a8e0 <FATFS_LinkDriverEx+0x94>)
 800a86e:	7a5b      	ldrb	r3, [r3, #9]
 800a870:	b2db      	uxtb	r3, r3
 800a872:	461a      	mov	r2, r3
 800a874:	4b1a      	ldr	r3, [pc, #104]	; (800a8e0 <FATFS_LinkDriverEx+0x94>)
 800a876:	2100      	movs	r1, #0
 800a878:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a87a:	4b19      	ldr	r3, [pc, #100]	; (800a8e0 <FATFS_LinkDriverEx+0x94>)
 800a87c:	7a5b      	ldrb	r3, [r3, #9]
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	4a17      	ldr	r2, [pc, #92]	; (800a8e0 <FATFS_LinkDriverEx+0x94>)
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a88a:	4b15      	ldr	r3, [pc, #84]	; (800a8e0 <FATFS_LinkDriverEx+0x94>)
 800a88c:	7a5b      	ldrb	r3, [r3, #9]
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	461a      	mov	r2, r3
 800a892:	4b13      	ldr	r3, [pc, #76]	; (800a8e0 <FATFS_LinkDriverEx+0x94>)
 800a894:	4413      	add	r3, r2
 800a896:	79fa      	ldrb	r2, [r7, #7]
 800a898:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a89a:	4b11      	ldr	r3, [pc, #68]	; (800a8e0 <FATFS_LinkDriverEx+0x94>)
 800a89c:	7a5b      	ldrb	r3, [r3, #9]
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	1c5a      	adds	r2, r3, #1
 800a8a2:	b2d1      	uxtb	r1, r2
 800a8a4:	4a0e      	ldr	r2, [pc, #56]	; (800a8e0 <FATFS_LinkDriverEx+0x94>)
 800a8a6:	7251      	strb	r1, [r2, #9]
 800a8a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a8aa:	7dbb      	ldrb	r3, [r7, #22]
 800a8ac:	3330      	adds	r3, #48	; 0x30
 800a8ae:	b2da      	uxtb	r2, r3
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	223a      	movs	r2, #58	; 0x3a
 800a8ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	3302      	adds	r3, #2
 800a8c0:	222f      	movs	r2, #47	; 0x2f
 800a8c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	3303      	adds	r3, #3
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a8d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	371c      	adds	r7, #28
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	20000124 	.word	0x20000124

0800a8e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	6839      	ldr	r1, [r7, #0]
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7ff ffaa 	bl	800a84c <FATFS_LinkDriverEx>
 800a8f8:	4603      	mov	r3, r0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
	...

0800a904 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	4603      	mov	r3, r0
 800a90c:	6039      	str	r1, [r7, #0]
 800a90e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a910:	88fb      	ldrh	r3, [r7, #6]
 800a912:	2b7f      	cmp	r3, #127	; 0x7f
 800a914:	d802      	bhi.n	800a91c <ff_convert+0x18>
		c = chr;
 800a916:	88fb      	ldrh	r3, [r7, #6]
 800a918:	81fb      	strh	r3, [r7, #14]
 800a91a:	e025      	b.n	800a968 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00b      	beq.n	800a93a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a922:	88fb      	ldrh	r3, [r7, #6]
 800a924:	2bff      	cmp	r3, #255	; 0xff
 800a926:	d805      	bhi.n	800a934 <ff_convert+0x30>
 800a928:	88fb      	ldrh	r3, [r7, #6]
 800a92a:	3b80      	subs	r3, #128	; 0x80
 800a92c:	4a12      	ldr	r2, [pc, #72]	; (800a978 <ff_convert+0x74>)
 800a92e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a932:	e000      	b.n	800a936 <ff_convert+0x32>
 800a934:	2300      	movs	r3, #0
 800a936:	81fb      	strh	r3, [r7, #14]
 800a938:	e016      	b.n	800a968 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a93a:	2300      	movs	r3, #0
 800a93c:	81fb      	strh	r3, [r7, #14]
 800a93e:	e009      	b.n	800a954 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a940:	89fb      	ldrh	r3, [r7, #14]
 800a942:	4a0d      	ldr	r2, [pc, #52]	; (800a978 <ff_convert+0x74>)
 800a944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a948:	88fa      	ldrh	r2, [r7, #6]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d006      	beq.n	800a95c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a94e:	89fb      	ldrh	r3, [r7, #14]
 800a950:	3301      	adds	r3, #1
 800a952:	81fb      	strh	r3, [r7, #14]
 800a954:	89fb      	ldrh	r3, [r7, #14]
 800a956:	2b7f      	cmp	r3, #127	; 0x7f
 800a958:	d9f2      	bls.n	800a940 <ff_convert+0x3c>
 800a95a:	e000      	b.n	800a95e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a95c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a95e:	89fb      	ldrh	r3, [r7, #14]
 800a960:	3380      	adds	r3, #128	; 0x80
 800a962:	b29b      	uxth	r3, r3
 800a964:	b2db      	uxtb	r3, r3
 800a966:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a968:	89fb      	ldrh	r3, [r7, #14]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	0800b570 	.word	0x0800b570

0800a97c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a986:	88fb      	ldrh	r3, [r7, #6]
 800a988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a98c:	d201      	bcs.n	800a992 <ff_wtoupper+0x16>
 800a98e:	4b3e      	ldr	r3, [pc, #248]	; (800aa88 <ff_wtoupper+0x10c>)
 800a990:	e000      	b.n	800a994 <ff_wtoupper+0x18>
 800a992:	4b3e      	ldr	r3, [pc, #248]	; (800aa8c <ff_wtoupper+0x110>)
 800a994:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	1c9a      	adds	r2, r3, #2
 800a99a:	617a      	str	r2, [r7, #20]
 800a99c:	881b      	ldrh	r3, [r3, #0]
 800a99e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a9a0:	8a7b      	ldrh	r3, [r7, #18]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d068      	beq.n	800aa78 <ff_wtoupper+0xfc>
 800a9a6:	88fa      	ldrh	r2, [r7, #6]
 800a9a8:	8a7b      	ldrh	r3, [r7, #18]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d364      	bcc.n	800aa78 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	1c9a      	adds	r2, r3, #2
 800a9b2:	617a      	str	r2, [r7, #20]
 800a9b4:	881b      	ldrh	r3, [r3, #0]
 800a9b6:	823b      	strh	r3, [r7, #16]
 800a9b8:	8a3b      	ldrh	r3, [r7, #16]
 800a9ba:	0a1b      	lsrs	r3, r3, #8
 800a9bc:	81fb      	strh	r3, [r7, #14]
 800a9be:	8a3b      	ldrh	r3, [r7, #16]
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a9c4:	88fa      	ldrh	r2, [r7, #6]
 800a9c6:	8a79      	ldrh	r1, [r7, #18]
 800a9c8:	8a3b      	ldrh	r3, [r7, #16]
 800a9ca:	440b      	add	r3, r1
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	da49      	bge.n	800aa64 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a9d0:	89fb      	ldrh	r3, [r7, #14]
 800a9d2:	2b08      	cmp	r3, #8
 800a9d4:	d84f      	bhi.n	800aa76 <ff_wtoupper+0xfa>
 800a9d6:	a201      	add	r2, pc, #4	; (adr r2, 800a9dc <ff_wtoupper+0x60>)
 800a9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9dc:	0800aa01 	.word	0x0800aa01
 800a9e0:	0800aa13 	.word	0x0800aa13
 800a9e4:	0800aa29 	.word	0x0800aa29
 800a9e8:	0800aa31 	.word	0x0800aa31
 800a9ec:	0800aa39 	.word	0x0800aa39
 800a9f0:	0800aa41 	.word	0x0800aa41
 800a9f4:	0800aa49 	.word	0x0800aa49
 800a9f8:	0800aa51 	.word	0x0800aa51
 800a9fc:	0800aa59 	.word	0x0800aa59
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800aa00:	88fa      	ldrh	r2, [r7, #6]
 800aa02:	8a7b      	ldrh	r3, [r7, #18]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	80fb      	strh	r3, [r7, #6]
 800aa10:	e027      	b.n	800aa62 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800aa12:	88fa      	ldrh	r2, [r7, #6]
 800aa14:	8a7b      	ldrh	r3, [r7, #18]
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	f003 0301 	and.w	r3, r3, #1
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	88fa      	ldrh	r2, [r7, #6]
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	80fb      	strh	r3, [r7, #6]
 800aa26:	e01c      	b.n	800aa62 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800aa28:	88fb      	ldrh	r3, [r7, #6]
 800aa2a:	3b10      	subs	r3, #16
 800aa2c:	80fb      	strh	r3, [r7, #6]
 800aa2e:	e018      	b.n	800aa62 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800aa30:	88fb      	ldrh	r3, [r7, #6]
 800aa32:	3b20      	subs	r3, #32
 800aa34:	80fb      	strh	r3, [r7, #6]
 800aa36:	e014      	b.n	800aa62 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800aa38:	88fb      	ldrh	r3, [r7, #6]
 800aa3a:	3b30      	subs	r3, #48	; 0x30
 800aa3c:	80fb      	strh	r3, [r7, #6]
 800aa3e:	e010      	b.n	800aa62 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800aa40:	88fb      	ldrh	r3, [r7, #6]
 800aa42:	3b1a      	subs	r3, #26
 800aa44:	80fb      	strh	r3, [r7, #6]
 800aa46:	e00c      	b.n	800aa62 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800aa48:	88fb      	ldrh	r3, [r7, #6]
 800aa4a:	3308      	adds	r3, #8
 800aa4c:	80fb      	strh	r3, [r7, #6]
 800aa4e:	e008      	b.n	800aa62 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800aa50:	88fb      	ldrh	r3, [r7, #6]
 800aa52:	3b50      	subs	r3, #80	; 0x50
 800aa54:	80fb      	strh	r3, [r7, #6]
 800aa56:	e004      	b.n	800aa62 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800aa58:	88fb      	ldrh	r3, [r7, #6]
 800aa5a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800aa5e:	80fb      	strh	r3, [r7, #6]
 800aa60:	bf00      	nop
			}
			break;
 800aa62:	e008      	b.n	800aa76 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800aa64:	89fb      	ldrh	r3, [r7, #14]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d195      	bne.n	800a996 <ff_wtoupper+0x1a>
 800aa6a:	8a3b      	ldrh	r3, [r7, #16]
 800aa6c:	005b      	lsls	r3, r3, #1
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	4413      	add	r3, r2
 800aa72:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800aa74:	e78f      	b.n	800a996 <ff_wtoupper+0x1a>
			break;
 800aa76:	bf00      	nop
	}

	return chr;
 800aa78:	88fb      	ldrh	r3, [r7, #6]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	371c      	adds	r7, #28
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	0800b670 	.word	0x0800b670
 800aa8c:	0800b864 	.word	0x0800b864

0800aa90 <__errno>:
 800aa90:	4b01      	ldr	r3, [pc, #4]	; (800aa98 <__errno+0x8>)
 800aa92:	6818      	ldr	r0, [r3, #0]
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	20000028 	.word	0x20000028

0800aa9c <__libc_init_array>:
 800aa9c:	b570      	push	{r4, r5, r6, lr}
 800aa9e:	4d0d      	ldr	r5, [pc, #52]	; (800aad4 <__libc_init_array+0x38>)
 800aaa0:	4c0d      	ldr	r4, [pc, #52]	; (800aad8 <__libc_init_array+0x3c>)
 800aaa2:	1b64      	subs	r4, r4, r5
 800aaa4:	10a4      	asrs	r4, r4, #2
 800aaa6:	2600      	movs	r6, #0
 800aaa8:	42a6      	cmp	r6, r4
 800aaaa:	d109      	bne.n	800aac0 <__libc_init_array+0x24>
 800aaac:	4d0b      	ldr	r5, [pc, #44]	; (800aadc <__libc_init_array+0x40>)
 800aaae:	4c0c      	ldr	r4, [pc, #48]	; (800aae0 <__libc_init_array+0x44>)
 800aab0:	f000 fc4e 	bl	800b350 <_init>
 800aab4:	1b64      	subs	r4, r4, r5
 800aab6:	10a4      	asrs	r4, r4, #2
 800aab8:	2600      	movs	r6, #0
 800aaba:	42a6      	cmp	r6, r4
 800aabc:	d105      	bne.n	800aaca <__libc_init_array+0x2e>
 800aabe:	bd70      	pop	{r4, r5, r6, pc}
 800aac0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aac4:	4798      	blx	r3
 800aac6:	3601      	adds	r6, #1
 800aac8:	e7ee      	b.n	800aaa8 <__libc_init_array+0xc>
 800aaca:	f855 3b04 	ldr.w	r3, [r5], #4
 800aace:	4798      	blx	r3
 800aad0:	3601      	adds	r6, #1
 800aad2:	e7f2      	b.n	800aaba <__libc_init_array+0x1e>
 800aad4:	0800b95c 	.word	0x0800b95c
 800aad8:	0800b95c 	.word	0x0800b95c
 800aadc:	0800b95c 	.word	0x0800b95c
 800aae0:	0800b960 	.word	0x0800b960

0800aae4 <memset>:
 800aae4:	4402      	add	r2, r0
 800aae6:	4603      	mov	r3, r0
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d100      	bne.n	800aaee <memset+0xa>
 800aaec:	4770      	bx	lr
 800aaee:	f803 1b01 	strb.w	r1, [r3], #1
 800aaf2:	e7f9      	b.n	800aae8 <memset+0x4>

0800aaf4 <siprintf>:
 800aaf4:	b40e      	push	{r1, r2, r3}
 800aaf6:	b500      	push	{lr}
 800aaf8:	b09c      	sub	sp, #112	; 0x70
 800aafa:	ab1d      	add	r3, sp, #116	; 0x74
 800aafc:	9002      	str	r0, [sp, #8]
 800aafe:	9006      	str	r0, [sp, #24]
 800ab00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab04:	4809      	ldr	r0, [pc, #36]	; (800ab2c <siprintf+0x38>)
 800ab06:	9107      	str	r1, [sp, #28]
 800ab08:	9104      	str	r1, [sp, #16]
 800ab0a:	4909      	ldr	r1, [pc, #36]	; (800ab30 <siprintf+0x3c>)
 800ab0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab10:	9105      	str	r1, [sp, #20]
 800ab12:	6800      	ldr	r0, [r0, #0]
 800ab14:	9301      	str	r3, [sp, #4]
 800ab16:	a902      	add	r1, sp, #8
 800ab18:	f000 f868 	bl	800abec <_svfiprintf_r>
 800ab1c:	9b02      	ldr	r3, [sp, #8]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	701a      	strb	r2, [r3, #0]
 800ab22:	b01c      	add	sp, #112	; 0x70
 800ab24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab28:	b003      	add	sp, #12
 800ab2a:	4770      	bx	lr
 800ab2c:	20000028 	.word	0x20000028
 800ab30:	ffff0208 	.word	0xffff0208

0800ab34 <__ssputs_r>:
 800ab34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab38:	688e      	ldr	r6, [r1, #8]
 800ab3a:	429e      	cmp	r6, r3
 800ab3c:	4682      	mov	sl, r0
 800ab3e:	460c      	mov	r4, r1
 800ab40:	4690      	mov	r8, r2
 800ab42:	461f      	mov	r7, r3
 800ab44:	d838      	bhi.n	800abb8 <__ssputs_r+0x84>
 800ab46:	898a      	ldrh	r2, [r1, #12]
 800ab48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab4c:	d032      	beq.n	800abb4 <__ssputs_r+0x80>
 800ab4e:	6825      	ldr	r5, [r4, #0]
 800ab50:	6909      	ldr	r1, [r1, #16]
 800ab52:	eba5 0901 	sub.w	r9, r5, r1
 800ab56:	6965      	ldr	r5, [r4, #20]
 800ab58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab60:	3301      	adds	r3, #1
 800ab62:	444b      	add	r3, r9
 800ab64:	106d      	asrs	r5, r5, #1
 800ab66:	429d      	cmp	r5, r3
 800ab68:	bf38      	it	cc
 800ab6a:	461d      	movcc	r5, r3
 800ab6c:	0553      	lsls	r3, r2, #21
 800ab6e:	d531      	bpl.n	800abd4 <__ssputs_r+0xa0>
 800ab70:	4629      	mov	r1, r5
 800ab72:	f000 fb47 	bl	800b204 <_malloc_r>
 800ab76:	4606      	mov	r6, r0
 800ab78:	b950      	cbnz	r0, 800ab90 <__ssputs_r+0x5c>
 800ab7a:	230c      	movs	r3, #12
 800ab7c:	f8ca 3000 	str.w	r3, [sl]
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab86:	81a3      	strh	r3, [r4, #12]
 800ab88:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab90:	6921      	ldr	r1, [r4, #16]
 800ab92:	464a      	mov	r2, r9
 800ab94:	f000 fabe 	bl	800b114 <memcpy>
 800ab98:	89a3      	ldrh	r3, [r4, #12]
 800ab9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aba2:	81a3      	strh	r3, [r4, #12]
 800aba4:	6126      	str	r6, [r4, #16]
 800aba6:	6165      	str	r5, [r4, #20]
 800aba8:	444e      	add	r6, r9
 800abaa:	eba5 0509 	sub.w	r5, r5, r9
 800abae:	6026      	str	r6, [r4, #0]
 800abb0:	60a5      	str	r5, [r4, #8]
 800abb2:	463e      	mov	r6, r7
 800abb4:	42be      	cmp	r6, r7
 800abb6:	d900      	bls.n	800abba <__ssputs_r+0x86>
 800abb8:	463e      	mov	r6, r7
 800abba:	4632      	mov	r2, r6
 800abbc:	6820      	ldr	r0, [r4, #0]
 800abbe:	4641      	mov	r1, r8
 800abc0:	f000 fab6 	bl	800b130 <memmove>
 800abc4:	68a3      	ldr	r3, [r4, #8]
 800abc6:	6822      	ldr	r2, [r4, #0]
 800abc8:	1b9b      	subs	r3, r3, r6
 800abca:	4432      	add	r2, r6
 800abcc:	60a3      	str	r3, [r4, #8]
 800abce:	6022      	str	r2, [r4, #0]
 800abd0:	2000      	movs	r0, #0
 800abd2:	e7db      	b.n	800ab8c <__ssputs_r+0x58>
 800abd4:	462a      	mov	r2, r5
 800abd6:	f000 fb6f 	bl	800b2b8 <_realloc_r>
 800abda:	4606      	mov	r6, r0
 800abdc:	2800      	cmp	r0, #0
 800abde:	d1e1      	bne.n	800aba4 <__ssputs_r+0x70>
 800abe0:	6921      	ldr	r1, [r4, #16]
 800abe2:	4650      	mov	r0, sl
 800abe4:	f000 fabe 	bl	800b164 <_free_r>
 800abe8:	e7c7      	b.n	800ab7a <__ssputs_r+0x46>
	...

0800abec <_svfiprintf_r>:
 800abec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf0:	4698      	mov	r8, r3
 800abf2:	898b      	ldrh	r3, [r1, #12]
 800abf4:	061b      	lsls	r3, r3, #24
 800abf6:	b09d      	sub	sp, #116	; 0x74
 800abf8:	4607      	mov	r7, r0
 800abfa:	460d      	mov	r5, r1
 800abfc:	4614      	mov	r4, r2
 800abfe:	d50e      	bpl.n	800ac1e <_svfiprintf_r+0x32>
 800ac00:	690b      	ldr	r3, [r1, #16]
 800ac02:	b963      	cbnz	r3, 800ac1e <_svfiprintf_r+0x32>
 800ac04:	2140      	movs	r1, #64	; 0x40
 800ac06:	f000 fafd 	bl	800b204 <_malloc_r>
 800ac0a:	6028      	str	r0, [r5, #0]
 800ac0c:	6128      	str	r0, [r5, #16]
 800ac0e:	b920      	cbnz	r0, 800ac1a <_svfiprintf_r+0x2e>
 800ac10:	230c      	movs	r3, #12
 800ac12:	603b      	str	r3, [r7, #0]
 800ac14:	f04f 30ff 	mov.w	r0, #4294967295
 800ac18:	e0d1      	b.n	800adbe <_svfiprintf_r+0x1d2>
 800ac1a:	2340      	movs	r3, #64	; 0x40
 800ac1c:	616b      	str	r3, [r5, #20]
 800ac1e:	2300      	movs	r3, #0
 800ac20:	9309      	str	r3, [sp, #36]	; 0x24
 800ac22:	2320      	movs	r3, #32
 800ac24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac28:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac2c:	2330      	movs	r3, #48	; 0x30
 800ac2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800add8 <_svfiprintf_r+0x1ec>
 800ac32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac36:	f04f 0901 	mov.w	r9, #1
 800ac3a:	4623      	mov	r3, r4
 800ac3c:	469a      	mov	sl, r3
 800ac3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac42:	b10a      	cbz	r2, 800ac48 <_svfiprintf_r+0x5c>
 800ac44:	2a25      	cmp	r2, #37	; 0x25
 800ac46:	d1f9      	bne.n	800ac3c <_svfiprintf_r+0x50>
 800ac48:	ebba 0b04 	subs.w	fp, sl, r4
 800ac4c:	d00b      	beq.n	800ac66 <_svfiprintf_r+0x7a>
 800ac4e:	465b      	mov	r3, fp
 800ac50:	4622      	mov	r2, r4
 800ac52:	4629      	mov	r1, r5
 800ac54:	4638      	mov	r0, r7
 800ac56:	f7ff ff6d 	bl	800ab34 <__ssputs_r>
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	f000 80aa 	beq.w	800adb4 <_svfiprintf_r+0x1c8>
 800ac60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac62:	445a      	add	r2, fp
 800ac64:	9209      	str	r2, [sp, #36]	; 0x24
 800ac66:	f89a 3000 	ldrb.w	r3, [sl]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f000 80a2 	beq.w	800adb4 <_svfiprintf_r+0x1c8>
 800ac70:	2300      	movs	r3, #0
 800ac72:	f04f 32ff 	mov.w	r2, #4294967295
 800ac76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac7a:	f10a 0a01 	add.w	sl, sl, #1
 800ac7e:	9304      	str	r3, [sp, #16]
 800ac80:	9307      	str	r3, [sp, #28]
 800ac82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac86:	931a      	str	r3, [sp, #104]	; 0x68
 800ac88:	4654      	mov	r4, sl
 800ac8a:	2205      	movs	r2, #5
 800ac8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac90:	4851      	ldr	r0, [pc, #324]	; (800add8 <_svfiprintf_r+0x1ec>)
 800ac92:	f7f5 faad 	bl	80001f0 <memchr>
 800ac96:	9a04      	ldr	r2, [sp, #16]
 800ac98:	b9d8      	cbnz	r0, 800acd2 <_svfiprintf_r+0xe6>
 800ac9a:	06d0      	lsls	r0, r2, #27
 800ac9c:	bf44      	itt	mi
 800ac9e:	2320      	movmi	r3, #32
 800aca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aca4:	0711      	lsls	r1, r2, #28
 800aca6:	bf44      	itt	mi
 800aca8:	232b      	movmi	r3, #43	; 0x2b
 800acaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acae:	f89a 3000 	ldrb.w	r3, [sl]
 800acb2:	2b2a      	cmp	r3, #42	; 0x2a
 800acb4:	d015      	beq.n	800ace2 <_svfiprintf_r+0xf6>
 800acb6:	9a07      	ldr	r2, [sp, #28]
 800acb8:	4654      	mov	r4, sl
 800acba:	2000      	movs	r0, #0
 800acbc:	f04f 0c0a 	mov.w	ip, #10
 800acc0:	4621      	mov	r1, r4
 800acc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acc6:	3b30      	subs	r3, #48	; 0x30
 800acc8:	2b09      	cmp	r3, #9
 800acca:	d94e      	bls.n	800ad6a <_svfiprintf_r+0x17e>
 800accc:	b1b0      	cbz	r0, 800acfc <_svfiprintf_r+0x110>
 800acce:	9207      	str	r2, [sp, #28]
 800acd0:	e014      	b.n	800acfc <_svfiprintf_r+0x110>
 800acd2:	eba0 0308 	sub.w	r3, r0, r8
 800acd6:	fa09 f303 	lsl.w	r3, r9, r3
 800acda:	4313      	orrs	r3, r2
 800acdc:	9304      	str	r3, [sp, #16]
 800acde:	46a2      	mov	sl, r4
 800ace0:	e7d2      	b.n	800ac88 <_svfiprintf_r+0x9c>
 800ace2:	9b03      	ldr	r3, [sp, #12]
 800ace4:	1d19      	adds	r1, r3, #4
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	9103      	str	r1, [sp, #12]
 800acea:	2b00      	cmp	r3, #0
 800acec:	bfbb      	ittet	lt
 800acee:	425b      	neglt	r3, r3
 800acf0:	f042 0202 	orrlt.w	r2, r2, #2
 800acf4:	9307      	strge	r3, [sp, #28]
 800acf6:	9307      	strlt	r3, [sp, #28]
 800acf8:	bfb8      	it	lt
 800acfa:	9204      	strlt	r2, [sp, #16]
 800acfc:	7823      	ldrb	r3, [r4, #0]
 800acfe:	2b2e      	cmp	r3, #46	; 0x2e
 800ad00:	d10c      	bne.n	800ad1c <_svfiprintf_r+0x130>
 800ad02:	7863      	ldrb	r3, [r4, #1]
 800ad04:	2b2a      	cmp	r3, #42	; 0x2a
 800ad06:	d135      	bne.n	800ad74 <_svfiprintf_r+0x188>
 800ad08:	9b03      	ldr	r3, [sp, #12]
 800ad0a:	1d1a      	adds	r2, r3, #4
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	9203      	str	r2, [sp, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	bfb8      	it	lt
 800ad14:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad18:	3402      	adds	r4, #2
 800ad1a:	9305      	str	r3, [sp, #20]
 800ad1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ade8 <_svfiprintf_r+0x1fc>
 800ad20:	7821      	ldrb	r1, [r4, #0]
 800ad22:	2203      	movs	r2, #3
 800ad24:	4650      	mov	r0, sl
 800ad26:	f7f5 fa63 	bl	80001f0 <memchr>
 800ad2a:	b140      	cbz	r0, 800ad3e <_svfiprintf_r+0x152>
 800ad2c:	2340      	movs	r3, #64	; 0x40
 800ad2e:	eba0 000a 	sub.w	r0, r0, sl
 800ad32:	fa03 f000 	lsl.w	r0, r3, r0
 800ad36:	9b04      	ldr	r3, [sp, #16]
 800ad38:	4303      	orrs	r3, r0
 800ad3a:	3401      	adds	r4, #1
 800ad3c:	9304      	str	r3, [sp, #16]
 800ad3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad42:	4826      	ldr	r0, [pc, #152]	; (800addc <_svfiprintf_r+0x1f0>)
 800ad44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad48:	2206      	movs	r2, #6
 800ad4a:	f7f5 fa51 	bl	80001f0 <memchr>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	d038      	beq.n	800adc4 <_svfiprintf_r+0x1d8>
 800ad52:	4b23      	ldr	r3, [pc, #140]	; (800ade0 <_svfiprintf_r+0x1f4>)
 800ad54:	bb1b      	cbnz	r3, 800ad9e <_svfiprintf_r+0x1b2>
 800ad56:	9b03      	ldr	r3, [sp, #12]
 800ad58:	3307      	adds	r3, #7
 800ad5a:	f023 0307 	bic.w	r3, r3, #7
 800ad5e:	3308      	adds	r3, #8
 800ad60:	9303      	str	r3, [sp, #12]
 800ad62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad64:	4433      	add	r3, r6
 800ad66:	9309      	str	r3, [sp, #36]	; 0x24
 800ad68:	e767      	b.n	800ac3a <_svfiprintf_r+0x4e>
 800ad6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad6e:	460c      	mov	r4, r1
 800ad70:	2001      	movs	r0, #1
 800ad72:	e7a5      	b.n	800acc0 <_svfiprintf_r+0xd4>
 800ad74:	2300      	movs	r3, #0
 800ad76:	3401      	adds	r4, #1
 800ad78:	9305      	str	r3, [sp, #20]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	f04f 0c0a 	mov.w	ip, #10
 800ad80:	4620      	mov	r0, r4
 800ad82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad86:	3a30      	subs	r2, #48	; 0x30
 800ad88:	2a09      	cmp	r2, #9
 800ad8a:	d903      	bls.n	800ad94 <_svfiprintf_r+0x1a8>
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d0c5      	beq.n	800ad1c <_svfiprintf_r+0x130>
 800ad90:	9105      	str	r1, [sp, #20]
 800ad92:	e7c3      	b.n	800ad1c <_svfiprintf_r+0x130>
 800ad94:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad98:	4604      	mov	r4, r0
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e7f0      	b.n	800ad80 <_svfiprintf_r+0x194>
 800ad9e:	ab03      	add	r3, sp, #12
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	462a      	mov	r2, r5
 800ada4:	4b0f      	ldr	r3, [pc, #60]	; (800ade4 <_svfiprintf_r+0x1f8>)
 800ada6:	a904      	add	r1, sp, #16
 800ada8:	4638      	mov	r0, r7
 800adaa:	f3af 8000 	nop.w
 800adae:	1c42      	adds	r2, r0, #1
 800adb0:	4606      	mov	r6, r0
 800adb2:	d1d6      	bne.n	800ad62 <_svfiprintf_r+0x176>
 800adb4:	89ab      	ldrh	r3, [r5, #12]
 800adb6:	065b      	lsls	r3, r3, #25
 800adb8:	f53f af2c 	bmi.w	800ac14 <_svfiprintf_r+0x28>
 800adbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adbe:	b01d      	add	sp, #116	; 0x74
 800adc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc4:	ab03      	add	r3, sp, #12
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	462a      	mov	r2, r5
 800adca:	4b06      	ldr	r3, [pc, #24]	; (800ade4 <_svfiprintf_r+0x1f8>)
 800adcc:	a904      	add	r1, sp, #16
 800adce:	4638      	mov	r0, r7
 800add0:	f000 f87a 	bl	800aec8 <_printf_i>
 800add4:	e7eb      	b.n	800adae <_svfiprintf_r+0x1c2>
 800add6:	bf00      	nop
 800add8:	0800b920 	.word	0x0800b920
 800addc:	0800b92a 	.word	0x0800b92a
 800ade0:	00000000 	.word	0x00000000
 800ade4:	0800ab35 	.word	0x0800ab35
 800ade8:	0800b926 	.word	0x0800b926

0800adec <_printf_common>:
 800adec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adf0:	4616      	mov	r6, r2
 800adf2:	4699      	mov	r9, r3
 800adf4:	688a      	ldr	r2, [r1, #8]
 800adf6:	690b      	ldr	r3, [r1, #16]
 800adf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800adfc:	4293      	cmp	r3, r2
 800adfe:	bfb8      	it	lt
 800ae00:	4613      	movlt	r3, r2
 800ae02:	6033      	str	r3, [r6, #0]
 800ae04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae08:	4607      	mov	r7, r0
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	b10a      	cbz	r2, 800ae12 <_printf_common+0x26>
 800ae0e:	3301      	adds	r3, #1
 800ae10:	6033      	str	r3, [r6, #0]
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	0699      	lsls	r1, r3, #26
 800ae16:	bf42      	ittt	mi
 800ae18:	6833      	ldrmi	r3, [r6, #0]
 800ae1a:	3302      	addmi	r3, #2
 800ae1c:	6033      	strmi	r3, [r6, #0]
 800ae1e:	6825      	ldr	r5, [r4, #0]
 800ae20:	f015 0506 	ands.w	r5, r5, #6
 800ae24:	d106      	bne.n	800ae34 <_printf_common+0x48>
 800ae26:	f104 0a19 	add.w	sl, r4, #25
 800ae2a:	68e3      	ldr	r3, [r4, #12]
 800ae2c:	6832      	ldr	r2, [r6, #0]
 800ae2e:	1a9b      	subs	r3, r3, r2
 800ae30:	42ab      	cmp	r3, r5
 800ae32:	dc26      	bgt.n	800ae82 <_printf_common+0x96>
 800ae34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae38:	1e13      	subs	r3, r2, #0
 800ae3a:	6822      	ldr	r2, [r4, #0]
 800ae3c:	bf18      	it	ne
 800ae3e:	2301      	movne	r3, #1
 800ae40:	0692      	lsls	r2, r2, #26
 800ae42:	d42b      	bmi.n	800ae9c <_printf_common+0xb0>
 800ae44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae48:	4649      	mov	r1, r9
 800ae4a:	4638      	mov	r0, r7
 800ae4c:	47c0      	blx	r8
 800ae4e:	3001      	adds	r0, #1
 800ae50:	d01e      	beq.n	800ae90 <_printf_common+0xa4>
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	68e5      	ldr	r5, [r4, #12]
 800ae56:	6832      	ldr	r2, [r6, #0]
 800ae58:	f003 0306 	and.w	r3, r3, #6
 800ae5c:	2b04      	cmp	r3, #4
 800ae5e:	bf08      	it	eq
 800ae60:	1aad      	subeq	r5, r5, r2
 800ae62:	68a3      	ldr	r3, [r4, #8]
 800ae64:	6922      	ldr	r2, [r4, #16]
 800ae66:	bf0c      	ite	eq
 800ae68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae6c:	2500      	movne	r5, #0
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	bfc4      	itt	gt
 800ae72:	1a9b      	subgt	r3, r3, r2
 800ae74:	18ed      	addgt	r5, r5, r3
 800ae76:	2600      	movs	r6, #0
 800ae78:	341a      	adds	r4, #26
 800ae7a:	42b5      	cmp	r5, r6
 800ae7c:	d11a      	bne.n	800aeb4 <_printf_common+0xc8>
 800ae7e:	2000      	movs	r0, #0
 800ae80:	e008      	b.n	800ae94 <_printf_common+0xa8>
 800ae82:	2301      	movs	r3, #1
 800ae84:	4652      	mov	r2, sl
 800ae86:	4649      	mov	r1, r9
 800ae88:	4638      	mov	r0, r7
 800ae8a:	47c0      	blx	r8
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	d103      	bne.n	800ae98 <_printf_common+0xac>
 800ae90:	f04f 30ff 	mov.w	r0, #4294967295
 800ae94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae98:	3501      	adds	r5, #1
 800ae9a:	e7c6      	b.n	800ae2a <_printf_common+0x3e>
 800ae9c:	18e1      	adds	r1, r4, r3
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	2030      	movs	r0, #48	; 0x30
 800aea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aea6:	4422      	add	r2, r4
 800aea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aeac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aeb0:	3302      	adds	r3, #2
 800aeb2:	e7c7      	b.n	800ae44 <_printf_common+0x58>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	4622      	mov	r2, r4
 800aeb8:	4649      	mov	r1, r9
 800aeba:	4638      	mov	r0, r7
 800aebc:	47c0      	blx	r8
 800aebe:	3001      	adds	r0, #1
 800aec0:	d0e6      	beq.n	800ae90 <_printf_common+0xa4>
 800aec2:	3601      	adds	r6, #1
 800aec4:	e7d9      	b.n	800ae7a <_printf_common+0x8e>
	...

0800aec8 <_printf_i>:
 800aec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aecc:	460c      	mov	r4, r1
 800aece:	4691      	mov	r9, r2
 800aed0:	7e27      	ldrb	r7, [r4, #24]
 800aed2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aed4:	2f78      	cmp	r7, #120	; 0x78
 800aed6:	4680      	mov	r8, r0
 800aed8:	469a      	mov	sl, r3
 800aeda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aede:	d807      	bhi.n	800aef0 <_printf_i+0x28>
 800aee0:	2f62      	cmp	r7, #98	; 0x62
 800aee2:	d80a      	bhi.n	800aefa <_printf_i+0x32>
 800aee4:	2f00      	cmp	r7, #0
 800aee6:	f000 80d8 	beq.w	800b09a <_printf_i+0x1d2>
 800aeea:	2f58      	cmp	r7, #88	; 0x58
 800aeec:	f000 80a3 	beq.w	800b036 <_printf_i+0x16e>
 800aef0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aef8:	e03a      	b.n	800af70 <_printf_i+0xa8>
 800aefa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aefe:	2b15      	cmp	r3, #21
 800af00:	d8f6      	bhi.n	800aef0 <_printf_i+0x28>
 800af02:	a001      	add	r0, pc, #4	; (adr r0, 800af08 <_printf_i+0x40>)
 800af04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800af08:	0800af61 	.word	0x0800af61
 800af0c:	0800af75 	.word	0x0800af75
 800af10:	0800aef1 	.word	0x0800aef1
 800af14:	0800aef1 	.word	0x0800aef1
 800af18:	0800aef1 	.word	0x0800aef1
 800af1c:	0800aef1 	.word	0x0800aef1
 800af20:	0800af75 	.word	0x0800af75
 800af24:	0800aef1 	.word	0x0800aef1
 800af28:	0800aef1 	.word	0x0800aef1
 800af2c:	0800aef1 	.word	0x0800aef1
 800af30:	0800aef1 	.word	0x0800aef1
 800af34:	0800b081 	.word	0x0800b081
 800af38:	0800afa5 	.word	0x0800afa5
 800af3c:	0800b063 	.word	0x0800b063
 800af40:	0800aef1 	.word	0x0800aef1
 800af44:	0800aef1 	.word	0x0800aef1
 800af48:	0800b0a3 	.word	0x0800b0a3
 800af4c:	0800aef1 	.word	0x0800aef1
 800af50:	0800afa5 	.word	0x0800afa5
 800af54:	0800aef1 	.word	0x0800aef1
 800af58:	0800aef1 	.word	0x0800aef1
 800af5c:	0800b06b 	.word	0x0800b06b
 800af60:	680b      	ldr	r3, [r1, #0]
 800af62:	1d1a      	adds	r2, r3, #4
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	600a      	str	r2, [r1, #0]
 800af68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800af6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af70:	2301      	movs	r3, #1
 800af72:	e0a3      	b.n	800b0bc <_printf_i+0x1f4>
 800af74:	6825      	ldr	r5, [r4, #0]
 800af76:	6808      	ldr	r0, [r1, #0]
 800af78:	062e      	lsls	r6, r5, #24
 800af7a:	f100 0304 	add.w	r3, r0, #4
 800af7e:	d50a      	bpl.n	800af96 <_printf_i+0xce>
 800af80:	6805      	ldr	r5, [r0, #0]
 800af82:	600b      	str	r3, [r1, #0]
 800af84:	2d00      	cmp	r5, #0
 800af86:	da03      	bge.n	800af90 <_printf_i+0xc8>
 800af88:	232d      	movs	r3, #45	; 0x2d
 800af8a:	426d      	negs	r5, r5
 800af8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af90:	485e      	ldr	r0, [pc, #376]	; (800b10c <_printf_i+0x244>)
 800af92:	230a      	movs	r3, #10
 800af94:	e019      	b.n	800afca <_printf_i+0x102>
 800af96:	f015 0f40 	tst.w	r5, #64	; 0x40
 800af9a:	6805      	ldr	r5, [r0, #0]
 800af9c:	600b      	str	r3, [r1, #0]
 800af9e:	bf18      	it	ne
 800afa0:	b22d      	sxthne	r5, r5
 800afa2:	e7ef      	b.n	800af84 <_printf_i+0xbc>
 800afa4:	680b      	ldr	r3, [r1, #0]
 800afa6:	6825      	ldr	r5, [r4, #0]
 800afa8:	1d18      	adds	r0, r3, #4
 800afaa:	6008      	str	r0, [r1, #0]
 800afac:	0628      	lsls	r0, r5, #24
 800afae:	d501      	bpl.n	800afb4 <_printf_i+0xec>
 800afb0:	681d      	ldr	r5, [r3, #0]
 800afb2:	e002      	b.n	800afba <_printf_i+0xf2>
 800afb4:	0669      	lsls	r1, r5, #25
 800afb6:	d5fb      	bpl.n	800afb0 <_printf_i+0xe8>
 800afb8:	881d      	ldrh	r5, [r3, #0]
 800afba:	4854      	ldr	r0, [pc, #336]	; (800b10c <_printf_i+0x244>)
 800afbc:	2f6f      	cmp	r7, #111	; 0x6f
 800afbe:	bf0c      	ite	eq
 800afc0:	2308      	moveq	r3, #8
 800afc2:	230a      	movne	r3, #10
 800afc4:	2100      	movs	r1, #0
 800afc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afca:	6866      	ldr	r6, [r4, #4]
 800afcc:	60a6      	str	r6, [r4, #8]
 800afce:	2e00      	cmp	r6, #0
 800afd0:	bfa2      	ittt	ge
 800afd2:	6821      	ldrge	r1, [r4, #0]
 800afd4:	f021 0104 	bicge.w	r1, r1, #4
 800afd8:	6021      	strge	r1, [r4, #0]
 800afda:	b90d      	cbnz	r5, 800afe0 <_printf_i+0x118>
 800afdc:	2e00      	cmp	r6, #0
 800afde:	d04d      	beq.n	800b07c <_printf_i+0x1b4>
 800afe0:	4616      	mov	r6, r2
 800afe2:	fbb5 f1f3 	udiv	r1, r5, r3
 800afe6:	fb03 5711 	mls	r7, r3, r1, r5
 800afea:	5dc7      	ldrb	r7, [r0, r7]
 800afec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aff0:	462f      	mov	r7, r5
 800aff2:	42bb      	cmp	r3, r7
 800aff4:	460d      	mov	r5, r1
 800aff6:	d9f4      	bls.n	800afe2 <_printf_i+0x11a>
 800aff8:	2b08      	cmp	r3, #8
 800affa:	d10b      	bne.n	800b014 <_printf_i+0x14c>
 800affc:	6823      	ldr	r3, [r4, #0]
 800affe:	07df      	lsls	r7, r3, #31
 800b000:	d508      	bpl.n	800b014 <_printf_i+0x14c>
 800b002:	6923      	ldr	r3, [r4, #16]
 800b004:	6861      	ldr	r1, [r4, #4]
 800b006:	4299      	cmp	r1, r3
 800b008:	bfde      	ittt	le
 800b00a:	2330      	movle	r3, #48	; 0x30
 800b00c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b010:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b014:	1b92      	subs	r2, r2, r6
 800b016:	6122      	str	r2, [r4, #16]
 800b018:	f8cd a000 	str.w	sl, [sp]
 800b01c:	464b      	mov	r3, r9
 800b01e:	aa03      	add	r2, sp, #12
 800b020:	4621      	mov	r1, r4
 800b022:	4640      	mov	r0, r8
 800b024:	f7ff fee2 	bl	800adec <_printf_common>
 800b028:	3001      	adds	r0, #1
 800b02a:	d14c      	bne.n	800b0c6 <_printf_i+0x1fe>
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295
 800b030:	b004      	add	sp, #16
 800b032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b036:	4835      	ldr	r0, [pc, #212]	; (800b10c <_printf_i+0x244>)
 800b038:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	680e      	ldr	r6, [r1, #0]
 800b040:	061f      	lsls	r7, r3, #24
 800b042:	f856 5b04 	ldr.w	r5, [r6], #4
 800b046:	600e      	str	r6, [r1, #0]
 800b048:	d514      	bpl.n	800b074 <_printf_i+0x1ac>
 800b04a:	07d9      	lsls	r1, r3, #31
 800b04c:	bf44      	itt	mi
 800b04e:	f043 0320 	orrmi.w	r3, r3, #32
 800b052:	6023      	strmi	r3, [r4, #0]
 800b054:	b91d      	cbnz	r5, 800b05e <_printf_i+0x196>
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	f023 0320 	bic.w	r3, r3, #32
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	2310      	movs	r3, #16
 800b060:	e7b0      	b.n	800afc4 <_printf_i+0xfc>
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	f043 0320 	orr.w	r3, r3, #32
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	2378      	movs	r3, #120	; 0x78
 800b06c:	4828      	ldr	r0, [pc, #160]	; (800b110 <_printf_i+0x248>)
 800b06e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b072:	e7e3      	b.n	800b03c <_printf_i+0x174>
 800b074:	065e      	lsls	r6, r3, #25
 800b076:	bf48      	it	mi
 800b078:	b2ad      	uxthmi	r5, r5
 800b07a:	e7e6      	b.n	800b04a <_printf_i+0x182>
 800b07c:	4616      	mov	r6, r2
 800b07e:	e7bb      	b.n	800aff8 <_printf_i+0x130>
 800b080:	680b      	ldr	r3, [r1, #0]
 800b082:	6826      	ldr	r6, [r4, #0]
 800b084:	6960      	ldr	r0, [r4, #20]
 800b086:	1d1d      	adds	r5, r3, #4
 800b088:	600d      	str	r5, [r1, #0]
 800b08a:	0635      	lsls	r5, r6, #24
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	d501      	bpl.n	800b094 <_printf_i+0x1cc>
 800b090:	6018      	str	r0, [r3, #0]
 800b092:	e002      	b.n	800b09a <_printf_i+0x1d2>
 800b094:	0671      	lsls	r1, r6, #25
 800b096:	d5fb      	bpl.n	800b090 <_printf_i+0x1c8>
 800b098:	8018      	strh	r0, [r3, #0]
 800b09a:	2300      	movs	r3, #0
 800b09c:	6123      	str	r3, [r4, #16]
 800b09e:	4616      	mov	r6, r2
 800b0a0:	e7ba      	b.n	800b018 <_printf_i+0x150>
 800b0a2:	680b      	ldr	r3, [r1, #0]
 800b0a4:	1d1a      	adds	r2, r3, #4
 800b0a6:	600a      	str	r2, [r1, #0]
 800b0a8:	681e      	ldr	r6, [r3, #0]
 800b0aa:	6862      	ldr	r2, [r4, #4]
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	f7f5 f89e 	bl	80001f0 <memchr>
 800b0b4:	b108      	cbz	r0, 800b0ba <_printf_i+0x1f2>
 800b0b6:	1b80      	subs	r0, r0, r6
 800b0b8:	6060      	str	r0, [r4, #4]
 800b0ba:	6863      	ldr	r3, [r4, #4]
 800b0bc:	6123      	str	r3, [r4, #16]
 800b0be:	2300      	movs	r3, #0
 800b0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0c4:	e7a8      	b.n	800b018 <_printf_i+0x150>
 800b0c6:	6923      	ldr	r3, [r4, #16]
 800b0c8:	4632      	mov	r2, r6
 800b0ca:	4649      	mov	r1, r9
 800b0cc:	4640      	mov	r0, r8
 800b0ce:	47d0      	blx	sl
 800b0d0:	3001      	adds	r0, #1
 800b0d2:	d0ab      	beq.n	800b02c <_printf_i+0x164>
 800b0d4:	6823      	ldr	r3, [r4, #0]
 800b0d6:	079b      	lsls	r3, r3, #30
 800b0d8:	d413      	bmi.n	800b102 <_printf_i+0x23a>
 800b0da:	68e0      	ldr	r0, [r4, #12]
 800b0dc:	9b03      	ldr	r3, [sp, #12]
 800b0de:	4298      	cmp	r0, r3
 800b0e0:	bfb8      	it	lt
 800b0e2:	4618      	movlt	r0, r3
 800b0e4:	e7a4      	b.n	800b030 <_printf_i+0x168>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	4632      	mov	r2, r6
 800b0ea:	4649      	mov	r1, r9
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	47d0      	blx	sl
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d09b      	beq.n	800b02c <_printf_i+0x164>
 800b0f4:	3501      	adds	r5, #1
 800b0f6:	68e3      	ldr	r3, [r4, #12]
 800b0f8:	9903      	ldr	r1, [sp, #12]
 800b0fa:	1a5b      	subs	r3, r3, r1
 800b0fc:	42ab      	cmp	r3, r5
 800b0fe:	dcf2      	bgt.n	800b0e6 <_printf_i+0x21e>
 800b100:	e7eb      	b.n	800b0da <_printf_i+0x212>
 800b102:	2500      	movs	r5, #0
 800b104:	f104 0619 	add.w	r6, r4, #25
 800b108:	e7f5      	b.n	800b0f6 <_printf_i+0x22e>
 800b10a:	bf00      	nop
 800b10c:	0800b931 	.word	0x0800b931
 800b110:	0800b942 	.word	0x0800b942

0800b114 <memcpy>:
 800b114:	440a      	add	r2, r1
 800b116:	4291      	cmp	r1, r2
 800b118:	f100 33ff 	add.w	r3, r0, #4294967295
 800b11c:	d100      	bne.n	800b120 <memcpy+0xc>
 800b11e:	4770      	bx	lr
 800b120:	b510      	push	{r4, lr}
 800b122:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b12a:	4291      	cmp	r1, r2
 800b12c:	d1f9      	bne.n	800b122 <memcpy+0xe>
 800b12e:	bd10      	pop	{r4, pc}

0800b130 <memmove>:
 800b130:	4288      	cmp	r0, r1
 800b132:	b510      	push	{r4, lr}
 800b134:	eb01 0402 	add.w	r4, r1, r2
 800b138:	d902      	bls.n	800b140 <memmove+0x10>
 800b13a:	4284      	cmp	r4, r0
 800b13c:	4623      	mov	r3, r4
 800b13e:	d807      	bhi.n	800b150 <memmove+0x20>
 800b140:	1e43      	subs	r3, r0, #1
 800b142:	42a1      	cmp	r1, r4
 800b144:	d008      	beq.n	800b158 <memmove+0x28>
 800b146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b14a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b14e:	e7f8      	b.n	800b142 <memmove+0x12>
 800b150:	4402      	add	r2, r0
 800b152:	4601      	mov	r1, r0
 800b154:	428a      	cmp	r2, r1
 800b156:	d100      	bne.n	800b15a <memmove+0x2a>
 800b158:	bd10      	pop	{r4, pc}
 800b15a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b15e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b162:	e7f7      	b.n	800b154 <memmove+0x24>

0800b164 <_free_r>:
 800b164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b166:	2900      	cmp	r1, #0
 800b168:	d048      	beq.n	800b1fc <_free_r+0x98>
 800b16a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b16e:	9001      	str	r0, [sp, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	f1a1 0404 	sub.w	r4, r1, #4
 800b176:	bfb8      	it	lt
 800b178:	18e4      	addlt	r4, r4, r3
 800b17a:	f000 f8d3 	bl	800b324 <__malloc_lock>
 800b17e:	4a20      	ldr	r2, [pc, #128]	; (800b200 <_free_r+0x9c>)
 800b180:	9801      	ldr	r0, [sp, #4]
 800b182:	6813      	ldr	r3, [r2, #0]
 800b184:	4615      	mov	r5, r2
 800b186:	b933      	cbnz	r3, 800b196 <_free_r+0x32>
 800b188:	6063      	str	r3, [r4, #4]
 800b18a:	6014      	str	r4, [r2, #0]
 800b18c:	b003      	add	sp, #12
 800b18e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b192:	f000 b8cd 	b.w	800b330 <__malloc_unlock>
 800b196:	42a3      	cmp	r3, r4
 800b198:	d90b      	bls.n	800b1b2 <_free_r+0x4e>
 800b19a:	6821      	ldr	r1, [r4, #0]
 800b19c:	1862      	adds	r2, r4, r1
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	bf04      	itt	eq
 800b1a2:	681a      	ldreq	r2, [r3, #0]
 800b1a4:	685b      	ldreq	r3, [r3, #4]
 800b1a6:	6063      	str	r3, [r4, #4]
 800b1a8:	bf04      	itt	eq
 800b1aa:	1852      	addeq	r2, r2, r1
 800b1ac:	6022      	streq	r2, [r4, #0]
 800b1ae:	602c      	str	r4, [r5, #0]
 800b1b0:	e7ec      	b.n	800b18c <_free_r+0x28>
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	b10b      	cbz	r3, 800b1bc <_free_r+0x58>
 800b1b8:	42a3      	cmp	r3, r4
 800b1ba:	d9fa      	bls.n	800b1b2 <_free_r+0x4e>
 800b1bc:	6811      	ldr	r1, [r2, #0]
 800b1be:	1855      	adds	r5, r2, r1
 800b1c0:	42a5      	cmp	r5, r4
 800b1c2:	d10b      	bne.n	800b1dc <_free_r+0x78>
 800b1c4:	6824      	ldr	r4, [r4, #0]
 800b1c6:	4421      	add	r1, r4
 800b1c8:	1854      	adds	r4, r2, r1
 800b1ca:	42a3      	cmp	r3, r4
 800b1cc:	6011      	str	r1, [r2, #0]
 800b1ce:	d1dd      	bne.n	800b18c <_free_r+0x28>
 800b1d0:	681c      	ldr	r4, [r3, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	6053      	str	r3, [r2, #4]
 800b1d6:	4421      	add	r1, r4
 800b1d8:	6011      	str	r1, [r2, #0]
 800b1da:	e7d7      	b.n	800b18c <_free_r+0x28>
 800b1dc:	d902      	bls.n	800b1e4 <_free_r+0x80>
 800b1de:	230c      	movs	r3, #12
 800b1e0:	6003      	str	r3, [r0, #0]
 800b1e2:	e7d3      	b.n	800b18c <_free_r+0x28>
 800b1e4:	6825      	ldr	r5, [r4, #0]
 800b1e6:	1961      	adds	r1, r4, r5
 800b1e8:	428b      	cmp	r3, r1
 800b1ea:	bf04      	itt	eq
 800b1ec:	6819      	ldreq	r1, [r3, #0]
 800b1ee:	685b      	ldreq	r3, [r3, #4]
 800b1f0:	6063      	str	r3, [r4, #4]
 800b1f2:	bf04      	itt	eq
 800b1f4:	1949      	addeq	r1, r1, r5
 800b1f6:	6021      	streq	r1, [r4, #0]
 800b1f8:	6054      	str	r4, [r2, #4]
 800b1fa:	e7c7      	b.n	800b18c <_free_r+0x28>
 800b1fc:	b003      	add	sp, #12
 800b1fe:	bd30      	pop	{r4, r5, pc}
 800b200:	20000130 	.word	0x20000130

0800b204 <_malloc_r>:
 800b204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b206:	1ccd      	adds	r5, r1, #3
 800b208:	f025 0503 	bic.w	r5, r5, #3
 800b20c:	3508      	adds	r5, #8
 800b20e:	2d0c      	cmp	r5, #12
 800b210:	bf38      	it	cc
 800b212:	250c      	movcc	r5, #12
 800b214:	2d00      	cmp	r5, #0
 800b216:	4606      	mov	r6, r0
 800b218:	db01      	blt.n	800b21e <_malloc_r+0x1a>
 800b21a:	42a9      	cmp	r1, r5
 800b21c:	d903      	bls.n	800b226 <_malloc_r+0x22>
 800b21e:	230c      	movs	r3, #12
 800b220:	6033      	str	r3, [r6, #0]
 800b222:	2000      	movs	r0, #0
 800b224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b226:	f000 f87d 	bl	800b324 <__malloc_lock>
 800b22a:	4921      	ldr	r1, [pc, #132]	; (800b2b0 <_malloc_r+0xac>)
 800b22c:	680a      	ldr	r2, [r1, #0]
 800b22e:	4614      	mov	r4, r2
 800b230:	b99c      	cbnz	r4, 800b25a <_malloc_r+0x56>
 800b232:	4f20      	ldr	r7, [pc, #128]	; (800b2b4 <_malloc_r+0xb0>)
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	b923      	cbnz	r3, 800b242 <_malloc_r+0x3e>
 800b238:	4621      	mov	r1, r4
 800b23a:	4630      	mov	r0, r6
 800b23c:	f000 f862 	bl	800b304 <_sbrk_r>
 800b240:	6038      	str	r0, [r7, #0]
 800b242:	4629      	mov	r1, r5
 800b244:	4630      	mov	r0, r6
 800b246:	f000 f85d 	bl	800b304 <_sbrk_r>
 800b24a:	1c43      	adds	r3, r0, #1
 800b24c:	d123      	bne.n	800b296 <_malloc_r+0x92>
 800b24e:	230c      	movs	r3, #12
 800b250:	6033      	str	r3, [r6, #0]
 800b252:	4630      	mov	r0, r6
 800b254:	f000 f86c 	bl	800b330 <__malloc_unlock>
 800b258:	e7e3      	b.n	800b222 <_malloc_r+0x1e>
 800b25a:	6823      	ldr	r3, [r4, #0]
 800b25c:	1b5b      	subs	r3, r3, r5
 800b25e:	d417      	bmi.n	800b290 <_malloc_r+0x8c>
 800b260:	2b0b      	cmp	r3, #11
 800b262:	d903      	bls.n	800b26c <_malloc_r+0x68>
 800b264:	6023      	str	r3, [r4, #0]
 800b266:	441c      	add	r4, r3
 800b268:	6025      	str	r5, [r4, #0]
 800b26a:	e004      	b.n	800b276 <_malloc_r+0x72>
 800b26c:	6863      	ldr	r3, [r4, #4]
 800b26e:	42a2      	cmp	r2, r4
 800b270:	bf0c      	ite	eq
 800b272:	600b      	streq	r3, [r1, #0]
 800b274:	6053      	strne	r3, [r2, #4]
 800b276:	4630      	mov	r0, r6
 800b278:	f000 f85a 	bl	800b330 <__malloc_unlock>
 800b27c:	f104 000b 	add.w	r0, r4, #11
 800b280:	1d23      	adds	r3, r4, #4
 800b282:	f020 0007 	bic.w	r0, r0, #7
 800b286:	1ac2      	subs	r2, r0, r3
 800b288:	d0cc      	beq.n	800b224 <_malloc_r+0x20>
 800b28a:	1a1b      	subs	r3, r3, r0
 800b28c:	50a3      	str	r3, [r4, r2]
 800b28e:	e7c9      	b.n	800b224 <_malloc_r+0x20>
 800b290:	4622      	mov	r2, r4
 800b292:	6864      	ldr	r4, [r4, #4]
 800b294:	e7cc      	b.n	800b230 <_malloc_r+0x2c>
 800b296:	1cc4      	adds	r4, r0, #3
 800b298:	f024 0403 	bic.w	r4, r4, #3
 800b29c:	42a0      	cmp	r0, r4
 800b29e:	d0e3      	beq.n	800b268 <_malloc_r+0x64>
 800b2a0:	1a21      	subs	r1, r4, r0
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	f000 f82e 	bl	800b304 <_sbrk_r>
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	d1dd      	bne.n	800b268 <_malloc_r+0x64>
 800b2ac:	e7cf      	b.n	800b24e <_malloc_r+0x4a>
 800b2ae:	bf00      	nop
 800b2b0:	20000130 	.word	0x20000130
 800b2b4:	20000134 	.word	0x20000134

0800b2b8 <_realloc_r>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	4614      	mov	r4, r2
 800b2be:	460e      	mov	r6, r1
 800b2c0:	b921      	cbnz	r1, 800b2cc <_realloc_r+0x14>
 800b2c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	f7ff bf9c 	b.w	800b204 <_malloc_r>
 800b2cc:	b922      	cbnz	r2, 800b2d8 <_realloc_r+0x20>
 800b2ce:	f7ff ff49 	bl	800b164 <_free_r>
 800b2d2:	4625      	mov	r5, r4
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2d8:	f000 f830 	bl	800b33c <_malloc_usable_size_r>
 800b2dc:	42a0      	cmp	r0, r4
 800b2de:	d20f      	bcs.n	800b300 <_realloc_r+0x48>
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	f7ff ff8e 	bl	800b204 <_malloc_r>
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d0f2      	beq.n	800b2d4 <_realloc_r+0x1c>
 800b2ee:	4631      	mov	r1, r6
 800b2f0:	4622      	mov	r2, r4
 800b2f2:	f7ff ff0f 	bl	800b114 <memcpy>
 800b2f6:	4631      	mov	r1, r6
 800b2f8:	4638      	mov	r0, r7
 800b2fa:	f7ff ff33 	bl	800b164 <_free_r>
 800b2fe:	e7e9      	b.n	800b2d4 <_realloc_r+0x1c>
 800b300:	4635      	mov	r5, r6
 800b302:	e7e7      	b.n	800b2d4 <_realloc_r+0x1c>

0800b304 <_sbrk_r>:
 800b304:	b538      	push	{r3, r4, r5, lr}
 800b306:	4d06      	ldr	r5, [pc, #24]	; (800b320 <_sbrk_r+0x1c>)
 800b308:	2300      	movs	r3, #0
 800b30a:	4604      	mov	r4, r0
 800b30c:	4608      	mov	r0, r1
 800b30e:	602b      	str	r3, [r5, #0]
 800b310:	f7f6 fe52 	bl	8001fb8 <_sbrk>
 800b314:	1c43      	adds	r3, r0, #1
 800b316:	d102      	bne.n	800b31e <_sbrk_r+0x1a>
 800b318:	682b      	ldr	r3, [r5, #0]
 800b31a:	b103      	cbz	r3, 800b31e <_sbrk_r+0x1a>
 800b31c:	6023      	str	r3, [r4, #0]
 800b31e:	bd38      	pop	{r3, r4, r5, pc}
 800b320:	20000ce4 	.word	0x20000ce4

0800b324 <__malloc_lock>:
 800b324:	4801      	ldr	r0, [pc, #4]	; (800b32c <__malloc_lock+0x8>)
 800b326:	f000 b811 	b.w	800b34c <__retarget_lock_acquire_recursive>
 800b32a:	bf00      	nop
 800b32c:	20000cec 	.word	0x20000cec

0800b330 <__malloc_unlock>:
 800b330:	4801      	ldr	r0, [pc, #4]	; (800b338 <__malloc_unlock+0x8>)
 800b332:	f000 b80c 	b.w	800b34e <__retarget_lock_release_recursive>
 800b336:	bf00      	nop
 800b338:	20000cec 	.word	0x20000cec

0800b33c <_malloc_usable_size_r>:
 800b33c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b340:	1f18      	subs	r0, r3, #4
 800b342:	2b00      	cmp	r3, #0
 800b344:	bfbc      	itt	lt
 800b346:	580b      	ldrlt	r3, [r1, r0]
 800b348:	18c0      	addlt	r0, r0, r3
 800b34a:	4770      	bx	lr

0800b34c <__retarget_lock_acquire_recursive>:
 800b34c:	4770      	bx	lr

0800b34e <__retarget_lock_release_recursive>:
 800b34e:	4770      	bx	lr

0800b350 <_init>:
 800b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b352:	bf00      	nop
 800b354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b356:	bc08      	pop	{r3}
 800b358:	469e      	mov	lr, r3
 800b35a:	4770      	bx	lr

0800b35c <_fini>:
 800b35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35e:	bf00      	nop
 800b360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b362:	bc08      	pop	{r3}
 800b364:	469e      	mov	lr, r3
 800b366:	4770      	bx	lr
