
Cadenas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b258  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800b3f8  0800b3f8  0001b3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9d4  0800b9d4  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9d4  0800b9d4  0001b9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9dc  0800b9dc  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9dc  0800b9dc  0001b9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9e0  0800b9e0  0001b9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800b9e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c0  200000a0  0800ba84  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  0800ba84  00020860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f5ed  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003df4  00000000  00000000  0003f6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  000434b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  00044bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b878  00000000  00000000  00046150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dcb8  00000000  00000000  000619c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a473e  00000000  00000000  0007f680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123dbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000647c  00000000  00000000  00123e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b3e0 	.word	0x0800b3e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	0800b3e0 	.word	0x0800b3e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <copy>:

EncodeurStruct encodeur;

/* Copy a in b */
void copy(uint16_t *a, uint16_t *b)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
	int i = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
	for(i = 0; i<4; i++)
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	e00c      	b.n	80005b6 <copy+0x2e>
	{
		b[i] = a[i];
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	441a      	add	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	6839      	ldr	r1, [r7, #0]
 80005aa:	440b      	add	r3, r1
 80005ac:	8812      	ldrh	r2, [r2, #0]
 80005ae:	801a      	strh	r2, [r3, #0]
	for(i = 0; i<4; i++)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3301      	adds	r3, #1
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2b03      	cmp	r3, #3
 80005ba:	ddef      	ble.n	800059c <copy+0x14>
	}
}
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <compare>:

/* return 1 if a == b */
int compare(uint16_t *a, uint16_t *b)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	6039      	str	r1, [r7, #0]
	int i = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
	for(i = 0; i<4; i++)
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	e010      	b.n	8000600 <compare+0x36>
	{
		if(b[i] != a[i])
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	881a      	ldrh	r2, [r3, #0]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	440b      	add	r3, r1
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d001      	beq.n	80005fa <compare+0x30>
		return 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	e006      	b.n	8000608 <compare+0x3e>
	for(i = 0; i<4; i++)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3301      	adds	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b03      	cmp	r3, #3
 8000604:	ddeb      	ble.n	80005de <compare+0x14>
	}
	return 1;
 8000606:	2301      	movs	r3, #1
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <initLCD>:

/* Initialize the LCD */
void initLCD(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HD44780_Init(16, 2);
 8000618:	2102      	movs	r1, #2
 800061a:	2010      	movs	r0, #16
 800061c:	f001 f876 	bl	800170c <HD44780_Init>
	HD44780_Puts(0, 0, "Lock"); //Put string to LCD
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <initLCD+0x64>)
 8000622:	2100      	movs	r1, #0
 8000624:	2000      	movs	r0, #0
 8000626:	f001 f8dd 	bl	80017e4 <HD44780_Puts>
	HAL_Delay(1000);
 800062a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062e:	f001 fdef 	bl	8002210 <HAL_Delay>
	HD44780_CursorOn(); //Show cursor
 8000632:	f001 f94b 	bl	80018cc <HD44780_CursorOn>

	HD44780_Clear();
 8000636:	f001 f8cb 	bl	80017d0 <HD44780_Clear>
	HD44780_Puts(0, 0, "0");
 800063a:	4a10      	ldr	r2, [pc, #64]	; (800067c <initLCD+0x68>)
 800063c:	2100      	movs	r1, #0
 800063e:	2000      	movs	r0, #0
 8000640:	f001 f8d0 	bl	80017e4 <HD44780_Puts>
	HD44780_Puts(1, 0, "0");
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <initLCD+0x68>)
 8000646:	2100      	movs	r1, #0
 8000648:	2001      	movs	r0, #1
 800064a:	f001 f8cb 	bl	80017e4 <HD44780_Puts>
	HD44780_Puts(2, 0, "0");
 800064e:	4a0b      	ldr	r2, [pc, #44]	; (800067c <initLCD+0x68>)
 8000650:	2100      	movs	r1, #0
 8000652:	2002      	movs	r0, #2
 8000654:	f001 f8c6 	bl	80017e4 <HD44780_Puts>
	HD44780_Puts(3, 0, "0");
 8000658:	4a08      	ldr	r2, [pc, #32]	; (800067c <initLCD+0x68>)
 800065a:	2100      	movs	r1, #0
 800065c:	2003      	movs	r0, #3
 800065e:	f001 f8c1 	bl	80017e4 <HD44780_Puts>
	HD44780_CursorSet(0,0);
 8000662:	2100      	movs	r1, #0
 8000664:	2000      	movs	r0, #0
 8000666:	f001 f9c9 	bl	80019fc <HD44780_CursorSet>
	HD44780_Puts(0, 1, "close");
 800066a:	4a05      	ldr	r2, [pc, #20]	; (8000680 <initLCD+0x6c>)
 800066c:	2101      	movs	r1, #1
 800066e:	2000      	movs	r0, #0
 8000670:	f001 f8b8 	bl	80017e4 <HD44780_Puts>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	0800b3f8 	.word	0x0800b3f8
 800067c:	0800b400 	.word	0x0800b400
 8000680:	0800b404 	.word	0x0800b404

08000684 <open>:



/* open the lock */
void open(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	TIM4->CCR2 = 25;
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <open+0x18>)
 800068a:	2219      	movs	r2, #25
 800068c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(2000);
 800068e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000692:	f001 fdbd 	bl	8002210 <HAL_Delay>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40000800 	.word	0x40000800

080006a0 <close>:

/* Close the lock */
void close(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	TIM4->CCR2 = 75;
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <close+0x18>)
 80006a6:	224b      	movs	r2, #75	; 0x4b
 80006a8:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(2000);
 80006aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ae:	f001 fdaf 	bl	8002210 <HAL_Delay>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40000800 	.word	0x40000800

080006bc <verifCombiUart>:

// Vérifie que les paramètres sont égaux
int verifCombiUart(char *a, uint16_t *b)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	int i = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
	for(i = 0; i<4; i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	e011      	b.n	80006f4 <verifCombiUart+0x38>
	{
		if(b[i] != a[i]-48) // conversion char vers int avec (-48)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	4619      	mov	r1, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	3b30      	subs	r3, #48	; 0x30
 80006e6:	4299      	cmp	r1, r3
 80006e8:	d001      	beq.n	80006ee <verifCombiUart+0x32>
		{
			return 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e006      	b.n	80006fc <verifCombiUart+0x40>
	for(i = 0; i<4; i++)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	3301      	adds	r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	ddea      	ble.n	80006d0 <verifCombiUart+0x14>
		}
	}
	return 1;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <changeTabUart>:


/* Copy a in b with conversion ascii to int */
void changeTabUart(char *a, uint16_t *b)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	int i;
	for(i=0; i<4; i++)
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	e00f      	b.n	8000738 <changeTabUart+0x30>
	{
		b[i] = a[i+4]-48;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3304      	adds	r3, #4
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b29a      	uxth	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	6839      	ldr	r1, [r7, #0]
 800072a:	440b      	add	r3, r1
 800072c:	3a30      	subs	r2, #48	; 0x30
 800072e:	b292      	uxth	r2, r2
 8000730:	801a      	strh	r2, [r3, #0]
	for(i=0; i<4; i++)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3301      	adds	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b03      	cmp	r3, #3
 800073c:	ddec      	ble.n	8000718 <changeTabUart+0x10>
	}
}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <changeCombiUart>:

// Nouvelle combinaison reçu par uart
void changeCombiUart(char *Rxbuff)
{
 800074c:	b5b0      	push	{r4, r5, r7, lr}
 800074e:	b08e      	sub	sp, #56	; 0x38
 8000750:	af00      	add	r7, sp, #0
 8000752:	61f8      	str	r0, [r7, #28]
	TimeHeure date;
	changeTabUart(Rxbuff, cadenas.combinaisonCorrect);
 8000754:	4918      	ldr	r1, [pc, #96]	; (80007b8 <changeCombiUart+0x6c>)
 8000756:	69f8      	ldr	r0, [r7, #28]
 8000758:	f7ff ffd6 	bl	8000708 <changeTabUart>
	date = get_time();
 800075c:	463b      	mov	r3, r7
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fb70 	bl	8000e44 <get_time>
 8000764:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000768:	463d      	mov	r5, r7
 800076a:	6828      	ldr	r0, [r5, #0]
 800076c:	6869      	ldr	r1, [r5, #4]
 800076e:	68aa      	ldr	r2, [r5, #8]
 8000770:	68eb      	ldr	r3, [r5, #12]
 8000772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000774:	6928      	ldr	r0, [r5, #16]
 8000776:	6020      	str	r0, [r4, #0]
	write_log(date.date);
 8000778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077c:	330a      	adds	r3, #10
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fab8 	bl	8000cf4 <write_log>
	write_log(" ");
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <changeCombiUart+0x70>)
 8000786:	f000 fab5 	bl	8000cf4 <write_log>
	write_log(date.time);
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fab0 	bl	8000cf4 <write_log>
	write_log(" ");
 8000794:	4809      	ldr	r0, [pc, #36]	; (80007bc <changeCombiUart+0x70>)
 8000796:	f000 faad 	bl	8000cf4 <write_log>
	write_log("Nouvelle combinaison part uart: ");
 800079a:	4809      	ldr	r0, [pc, #36]	; (80007c0 <changeCombiUart+0x74>)
 800079c:	f000 faaa 	bl	8000cf4 <write_log>
	write_log(Rxbuff+4);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	3304      	adds	r3, #4
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 faa5 	bl	8000cf4 <write_log>
	write_log("\n");
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <changeCombiUart+0x78>)
 80007ac:	f000 faa2 	bl	8000cf4 <write_log>
}
 80007b0:	bf00      	nop
 80007b2:	3738      	adds	r7, #56	; 0x38
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bdb0      	pop	{r4, r5, r7, pc}
 80007b8:	2000000e 	.word	0x2000000e
 80007bc:	0800b40c 	.word	0x0800b40c
 80007c0:	0800b410 	.word	0x0800b410
 80007c4:	0800b434 	.word	0x0800b434

080007c8 <buttonManager>:

/* Manage LCD's button */
void buttonManager(uint16_t adcVal,int debounce)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	80fb      	strh	r3, [r7, #6]
	// Nouvelle valeur de l'encodeur
	encodeur.encodeur = TIM3->CNT;
 80007d4:	4b8b      	ldr	r3, [pc, #556]	; (8000a04 <buttonManager+0x23c>)
 80007d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d8:	4a8b      	ldr	r2, [pc, #556]	; (8000a08 <buttonManager+0x240>)
 80007da:	6013      	str	r3, [r2, #0]
	if(adcVal>610 && adcVal<620) // bouton select
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	f240 2262 	movw	r2, #610	; 0x262
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d906      	bls.n	80007f4 <buttonManager+0x2c>
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80007ec:	d202      	bcs.n	80007f4 <buttonManager+0x2c>
	{
		selectManager();
 80007ee:	f000 f911 	bl	8000a14 <selectManager>
 80007f2:	e103      	b.n	80009fc <buttonManager+0x234>
	}
	else if(adcVal>850 && adcVal<860) // bouton gauche
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	f240 3252 	movw	r2, #850	; 0x352
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d918      	bls.n	8000830 <buttonManager+0x68>
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8000804:	d214      	bcs.n	8000830 <buttonManager+0x68>
	{
		if((debounce == 0)&&(cadenas.cursorVal>0))
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d10d      	bne.n	8000828 <buttonManager+0x60>
 800080c:	4b7f      	ldr	r3, [pc, #508]	; (8000a0c <buttonManager+0x244>)
 800080e:	899b      	ldrh	r3, [r3, #12]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d009      	beq.n	8000828 <buttonManager+0x60>
		{
			cadenas.cursorVal--;
 8000814:	4b7d      	ldr	r3, [pc, #500]	; (8000a0c <buttonManager+0x244>)
 8000816:	899b      	ldrh	r3, [r3, #12]
 8000818:	3b01      	subs	r3, #1
 800081a:	b29a      	uxth	r2, r3
 800081c:	4b7b      	ldr	r3, [pc, #492]	; (8000a0c <buttonManager+0x244>)
 800081e:	819a      	strh	r2, [r3, #12]
			HAL_Delay(1000);
 8000820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000824:	f001 fcf4 	bl	8002210 <HAL_Delay>
		}
		debounce++;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	e0e5      	b.n	80009fc <buttonManager+0x234>
	}

	 else if(adcVal>815 && adcVal<825) // bouton droite
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	f5b3 7f4c 	cmp.w	r3, #816	; 0x330
 8000836:	d318      	bcc.n	800086a <buttonManager+0xa2>
 8000838:	88fb      	ldrh	r3, [r7, #6]
 800083a:	f5b3 7f4e 	cmp.w	r3, #824	; 0x338
 800083e:	d814      	bhi.n	800086a <buttonManager+0xa2>
	 {
		 if((debounce == 0)&&(cadenas.cursorVal<3))
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d10d      	bne.n	8000862 <buttonManager+0x9a>
 8000846:	4b71      	ldr	r3, [pc, #452]	; (8000a0c <buttonManager+0x244>)
 8000848:	899b      	ldrh	r3, [r3, #12]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d809      	bhi.n	8000862 <buttonManager+0x9a>
		 {
			 cadenas.cursorVal++;
 800084e:	4b6f      	ldr	r3, [pc, #444]	; (8000a0c <buttonManager+0x244>)
 8000850:	899b      	ldrh	r3, [r3, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b6d      	ldr	r3, [pc, #436]	; (8000a0c <buttonManager+0x244>)
 8000858:	819a      	strh	r2, [r3, #12]
			 HAL_Delay(1000);
 800085a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085e:	f001 fcd7 	bl	8002210 <HAL_Delay>
		 }
		 debounce++;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	e0c8      	b.n	80009fc <buttonManager+0x234>
	 }

	 else if(adcVal>925 && adcVal<935) // bouton haut
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	f240 329d 	movw	r2, #925	; 0x39d
 8000870:	4293      	cmp	r3, r2
 8000872:	d930      	bls.n	80008d6 <buttonManager+0x10e>
 8000874:	88fb      	ldrh	r3, [r7, #6]
 8000876:	f240 32a6 	movw	r2, #934	; 0x3a6
 800087a:	4293      	cmp	r3, r2
 800087c:	d82b      	bhi.n	80008d6 <buttonManager+0x10e>
		 {
		 if((debounce == 0)&&(cadenas.numberDisplay[cadenas.cursorVal]<9))
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d124      	bne.n	80008ce <buttonManager+0x106>
 8000884:	4b61      	ldr	r3, [pc, #388]	; (8000a0c <buttonManager+0x244>)
 8000886:	899b      	ldrh	r3, [r3, #12]
 8000888:	4a60      	ldr	r2, [pc, #384]	; (8000a0c <buttonManager+0x244>)
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	4413      	add	r3, r2
 800088e:	889b      	ldrh	r3, [r3, #4]
 8000890:	2b08      	cmp	r3, #8
 8000892:	d81c      	bhi.n	80008ce <buttonManager+0x106>
		 {
			 cadenas.numberDisplay[cadenas.cursorVal]++;
 8000894:	4b5d      	ldr	r3, [pc, #372]	; (8000a0c <buttonManager+0x244>)
 8000896:	899b      	ldrh	r3, [r3, #12]
 8000898:	461a      	mov	r2, r3
 800089a:	495c      	ldr	r1, [pc, #368]	; (8000a0c <buttonManager+0x244>)
 800089c:	0053      	lsls	r3, r2, #1
 800089e:	440b      	add	r3, r1
 80008a0:	889b      	ldrh	r3, [r3, #4]
 80008a2:	3301      	adds	r3, #1
 80008a4:	b298      	uxth	r0, r3
 80008a6:	4959      	ldr	r1, [pc, #356]	; (8000a0c <buttonManager+0x244>)
 80008a8:	0053      	lsls	r3, r2, #1
 80008aa:	440b      	add	r3, r1
 80008ac:	4602      	mov	r2, r0
 80008ae:	809a      	strh	r2, [r3, #4]
			 sprintf(cadenas.numberBuffDisplay+cadenas.cursorVal,"%d",
 80008b0:	4b56      	ldr	r3, [pc, #344]	; (8000a0c <buttonManager+0x244>)
 80008b2:	899b      	ldrh	r3, [r3, #12]
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b55      	ldr	r3, [pc, #340]	; (8000a0c <buttonManager+0x244>)
 80008b8:	18d0      	adds	r0, r2, r3
					 cadenas.numberDisplay[cadenas.cursorVal]);
 80008ba:	4b54      	ldr	r3, [pc, #336]	; (8000a0c <buttonManager+0x244>)
 80008bc:	899b      	ldrh	r3, [r3, #12]
 80008be:	4a53      	ldr	r2, [pc, #332]	; (8000a0c <buttonManager+0x244>)
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	889b      	ldrh	r3, [r3, #4]
			 sprintf(cadenas.numberBuffDisplay+cadenas.cursorVal,"%d",
 80008c6:	461a      	mov	r2, r3
 80008c8:	4951      	ldr	r1, [pc, #324]	; (8000a10 <buttonManager+0x248>)
 80008ca:	f00a f95b 	bl	800ab84 <siprintf>
		 }
		 debounce++;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	3301      	adds	r3, #1
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	e092      	b.n	80009fc <buttonManager+0x234>
	 }
	 else if(adcVal>895 && adcVal<905) // bouton bas
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80008dc:	d32f      	bcc.n	800093e <buttonManager+0x176>
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	f5b3 7f62 	cmp.w	r3, #904	; 0x388
 80008e4:	d82b      	bhi.n	800093e <buttonManager+0x176>
	 {
		 if((debounce == 0)&&(cadenas.numberDisplay[cadenas.cursorVal]>0))
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d124      	bne.n	8000936 <buttonManager+0x16e>
 80008ec:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <buttonManager+0x244>)
 80008ee:	899b      	ldrh	r3, [r3, #12]
 80008f0:	4a46      	ldr	r2, [pc, #280]	; (8000a0c <buttonManager+0x244>)
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	4413      	add	r3, r2
 80008f6:	889b      	ldrh	r3, [r3, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d01c      	beq.n	8000936 <buttonManager+0x16e>
		 {
			 cadenas.numberDisplay[cadenas.cursorVal]--;
 80008fc:	4b43      	ldr	r3, [pc, #268]	; (8000a0c <buttonManager+0x244>)
 80008fe:	899b      	ldrh	r3, [r3, #12]
 8000900:	461a      	mov	r2, r3
 8000902:	4942      	ldr	r1, [pc, #264]	; (8000a0c <buttonManager+0x244>)
 8000904:	0053      	lsls	r3, r2, #1
 8000906:	440b      	add	r3, r1
 8000908:	889b      	ldrh	r3, [r3, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	b298      	uxth	r0, r3
 800090e:	493f      	ldr	r1, [pc, #252]	; (8000a0c <buttonManager+0x244>)
 8000910:	0053      	lsls	r3, r2, #1
 8000912:	440b      	add	r3, r1
 8000914:	4602      	mov	r2, r0
 8000916:	809a      	strh	r2, [r3, #4]
			 sprintf(cadenas.numberBuffDisplay+cadenas.cursorVal,"%d",cadenas.numberDisplay[cadenas.cursorVal]);
 8000918:	4b3c      	ldr	r3, [pc, #240]	; (8000a0c <buttonManager+0x244>)
 800091a:	899b      	ldrh	r3, [r3, #12]
 800091c:	461a      	mov	r2, r3
 800091e:	4b3b      	ldr	r3, [pc, #236]	; (8000a0c <buttonManager+0x244>)
 8000920:	18d0      	adds	r0, r2, r3
 8000922:	4b3a      	ldr	r3, [pc, #232]	; (8000a0c <buttonManager+0x244>)
 8000924:	899b      	ldrh	r3, [r3, #12]
 8000926:	4a39      	ldr	r2, [pc, #228]	; (8000a0c <buttonManager+0x244>)
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	889b      	ldrh	r3, [r3, #4]
 800092e:	461a      	mov	r2, r3
 8000930:	4937      	ldr	r1, [pc, #220]	; (8000a10 <buttonManager+0x248>)
 8000932:	f00a f927 	bl	800ab84 <siprintf>
		 }
		 debounce++;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	e05e      	b.n	80009fc <buttonManager+0x234>
	 }
	 else if(encodeur.encodeur!=encodeur.encodeur_ref)
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <buttonManager+0x240>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <buttonManager+0x240>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	429a      	cmp	r2, r3
 8000948:	d055      	beq.n	80009f6 <buttonManager+0x22e>
	 {

		 if(encodeur.encodeur<encodeur.encodeur_ref) // encodeur decrement
 800094a:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <buttonManager+0x240>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <buttonManager+0x240>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	429a      	cmp	r2, r3
 8000954:	d225      	bcs.n	80009a2 <buttonManager+0x1da>
		 {
			 if(cadenas.numberDisplay[cadenas.cursorVal]>0)
 8000956:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <buttonManager+0x244>)
 8000958:	899b      	ldrh	r3, [r3, #12]
 800095a:	4a2c      	ldr	r2, [pc, #176]	; (8000a0c <buttonManager+0x244>)
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	889b      	ldrh	r3, [r3, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d042      	beq.n	80009ec <buttonManager+0x224>
			 {
				 cadenas.numberDisplay[cadenas.cursorVal]--;
 8000966:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <buttonManager+0x244>)
 8000968:	899b      	ldrh	r3, [r3, #12]
 800096a:	461a      	mov	r2, r3
 800096c:	4927      	ldr	r1, [pc, #156]	; (8000a0c <buttonManager+0x244>)
 800096e:	0053      	lsls	r3, r2, #1
 8000970:	440b      	add	r3, r1
 8000972:	889b      	ldrh	r3, [r3, #4]
 8000974:	3b01      	subs	r3, #1
 8000976:	b298      	uxth	r0, r3
 8000978:	4924      	ldr	r1, [pc, #144]	; (8000a0c <buttonManager+0x244>)
 800097a:	0053      	lsls	r3, r2, #1
 800097c:	440b      	add	r3, r1
 800097e:	4602      	mov	r2, r0
 8000980:	809a      	strh	r2, [r3, #4]
		 		 sprintf(cadenas.numberBuffDisplay+cadenas.cursorVal,"%d",cadenas.numberDisplay[cadenas.cursorVal]);
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <buttonManager+0x244>)
 8000984:	899b      	ldrh	r3, [r3, #12]
 8000986:	461a      	mov	r2, r3
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <buttonManager+0x244>)
 800098a:	18d0      	adds	r0, r2, r3
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <buttonManager+0x244>)
 800098e:	899b      	ldrh	r3, [r3, #12]
 8000990:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <buttonManager+0x244>)
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	4413      	add	r3, r2
 8000996:	889b      	ldrh	r3, [r3, #4]
 8000998:	461a      	mov	r2, r3
 800099a:	491d      	ldr	r1, [pc, #116]	; (8000a10 <buttonManager+0x248>)
 800099c:	f00a f8f2 	bl	800ab84 <siprintf>
 80009a0:	e024      	b.n	80009ec <buttonManager+0x224>
		 	 }
		  }
		  else // encodeur increment
		  {
			  if(cadenas.numberDisplay[cadenas.cursorVal]<9)
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <buttonManager+0x244>)
 80009a4:	899b      	ldrh	r3, [r3, #12]
 80009a6:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <buttonManager+0x244>)
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	4413      	add	r3, r2
 80009ac:	889b      	ldrh	r3, [r3, #4]
 80009ae:	2b08      	cmp	r3, #8
 80009b0:	d81c      	bhi.n	80009ec <buttonManager+0x224>
			  {
			  	cadenas.numberDisplay[cadenas.cursorVal]++;
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <buttonManager+0x244>)
 80009b4:	899b      	ldrh	r3, [r3, #12]
 80009b6:	461a      	mov	r2, r3
 80009b8:	4914      	ldr	r1, [pc, #80]	; (8000a0c <buttonManager+0x244>)
 80009ba:	0053      	lsls	r3, r2, #1
 80009bc:	440b      	add	r3, r1
 80009be:	889b      	ldrh	r3, [r3, #4]
 80009c0:	3301      	adds	r3, #1
 80009c2:	b298      	uxth	r0, r3
 80009c4:	4911      	ldr	r1, [pc, #68]	; (8000a0c <buttonManager+0x244>)
 80009c6:	0053      	lsls	r3, r2, #1
 80009c8:	440b      	add	r3, r1
 80009ca:	4602      	mov	r2, r0
 80009cc:	809a      	strh	r2, [r3, #4]
				  sprintf(cadenas.numberBuffDisplay+cadenas.cursorVal,"%d",cadenas.numberDisplay[cadenas.cursorVal]);
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <buttonManager+0x244>)
 80009d0:	899b      	ldrh	r3, [r3, #12]
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <buttonManager+0x244>)
 80009d6:	18d0      	adds	r0, r2, r3
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <buttonManager+0x244>)
 80009da:	899b      	ldrh	r3, [r3, #12]
 80009dc:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <buttonManager+0x244>)
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	889b      	ldrh	r3, [r3, #4]
 80009e4:	461a      	mov	r2, r3
 80009e6:	490a      	ldr	r1, [pc, #40]	; (8000a10 <buttonManager+0x248>)
 80009e8:	f00a f8cc 	bl	800ab84 <siprintf>
			  }
		  }
		  encodeur.encodeur_ref = encodeur.encodeur;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <buttonManager+0x240>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <buttonManager+0x240>)
 80009f2:	6053      	str	r3, [r2, #4]
	 }
	 else
	 {
		 debounce = 0;
	 }
}
 80009f4:	e002      	b.n	80009fc <buttonManager+0x234>
		 debounce = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
}
 80009fa:	e7ff      	b.n	80009fc <buttonManager+0x234>
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40000400 	.word	0x40000400
 8000a08:	2000012c 	.word	0x2000012c
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	0800b438 	.word	0x0800b438

08000a14 <selectManager>:

/* Manage select button */
void selectManager(void)
{
 8000a14:	b5b0      	push	{r4, r5, r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
	TimeHeure date;
	if(cadenas.isOpen == 0) // Le cadenas est fermé
 8000a1a:	4b7d      	ldr	r3, [pc, #500]	; (8000c10 <selectManager+0x1fc>)
 8000a1c:	8adb      	ldrh	r3, [r3, #22]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d17f      	bne.n	8000b22 <selectManager+0x10e>
	{
		if(compare(cadenas.combinaisonCorrect,cadenas.numberDisplay)) // La combinaison est correct
 8000a22:	497c      	ldr	r1, [pc, #496]	; (8000c14 <selectManager+0x200>)
 8000a24:	487c      	ldr	r0, [pc, #496]	; (8000c18 <selectManager+0x204>)
 8000a26:	f7ff fdd0 	bl	80005ca <compare>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d048      	beq.n	8000ac2 <selectManager+0xae>
		{
			date = get_time();
 8000a30:	463b      	mov	r3, r7
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fa06 	bl	8000e44 <get_time>
 8000a38:	f107 041c 	add.w	r4, r7, #28
 8000a3c:	463d      	mov	r5, r7
 8000a3e:	6828      	ldr	r0, [r5, #0]
 8000a40:	6869      	ldr	r1, [r5, #4]
 8000a42:	68aa      	ldr	r2, [r5, #8]
 8000a44:	68eb      	ldr	r3, [r5, #12]
 8000a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a48:	6928      	ldr	r0, [r5, #16]
 8000a4a:	6020      	str	r0, [r4, #0]
			write_log(date.date);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	330a      	adds	r3, #10
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f94e 	bl	8000cf4 <write_log>
			write_log(" ");
 8000a58:	4870      	ldr	r0, [pc, #448]	; (8000c1c <selectManager+0x208>)
 8000a5a:	f000 f94b 	bl	8000cf4 <write_log>
			write_log(date.time);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f946 	bl	8000cf4 <write_log>
			write_log(" ");
 8000a68:	486c      	ldr	r0, [pc, #432]	; (8000c1c <selectManager+0x208>)
 8000a6a:	f000 f943 	bl	8000cf4 <write_log>
			write_log("Bonne combinaison: ");
 8000a6e:	486c      	ldr	r0, [pc, #432]	; (8000c20 <selectManager+0x20c>)
 8000a70:	f000 f940 	bl	8000cf4 <write_log>
			write_log(cadenas.numberBuffDisplay);
 8000a74:	4866      	ldr	r0, [pc, #408]	; (8000c10 <selectManager+0x1fc>)
 8000a76:	f000 f93d 	bl	8000cf4 <write_log>
			write_log("\n");
 8000a7a:	486a      	ldr	r0, [pc, #424]	; (8000c24 <selectManager+0x210>)
 8000a7c:	f000 f93a 	bl	8000cf4 <write_log>

			write_log(date.date);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	330a      	adds	r3, #10
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f934 	bl	8000cf4 <write_log>
			write_log(" ");
 8000a8c:	4863      	ldr	r0, [pc, #396]	; (8000c1c <selectManager+0x208>)
 8000a8e:	f000 f931 	bl	8000cf4 <write_log>
			write_log(date.time);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f92c 	bl	8000cf4 <write_log>
			write_log(" ");
 8000a9c:	485f      	ldr	r0, [pc, #380]	; (8000c1c <selectManager+0x208>)
 8000a9e:	f000 f929 	bl	8000cf4 <write_log>
			write_log("Ouverture du cadenas\n");
 8000aa2:	4861      	ldr	r0, [pc, #388]	; (8000c28 <selectManager+0x214>)
 8000aa4:	f000 f926 	bl	8000cf4 <write_log>
			HD44780_Clear();
 8000aa8:	f000 fe92 	bl	80017d0 <HD44780_Clear>
			HD44780_Puts(0, 1, "open");
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <selectManager+0x218>)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f000 fe97 	bl	80017e4 <HD44780_Puts>
			open();
 8000ab6:	f7ff fde5 	bl	8000684 <open>
			cadenas.isOpen = 1;
 8000aba:	4b55      	ldr	r3, [pc, #340]	; (8000c10 <selectManager+0x1fc>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	82da      	strh	r2, [r3, #22]
		sprintf(cadenas.numberBuffDisplay+3,"%d",cadenas.numberDisplay[3]);
		close();
		HD44780_Puts(0, 1, "close");
		cadenas.isOpen = 0;
	}
}
 8000ac0:	e0a1      	b.n	8000c06 <selectManager+0x1f2>
			date = get_time();
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f9bd 	bl	8000e44 <get_time>
 8000aca:	f107 041c 	add.w	r4, r7, #28
 8000ace:	463d      	mov	r5, r7
 8000ad0:	6828      	ldr	r0, [r5, #0]
 8000ad2:	6869      	ldr	r1, [r5, #4]
 8000ad4:	68aa      	ldr	r2, [r5, #8]
 8000ad6:	68eb      	ldr	r3, [r5, #12]
 8000ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ada:	6928      	ldr	r0, [r5, #16]
 8000adc:	6020      	str	r0, [r4, #0]
			write_log(date.date);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	330a      	adds	r3, #10
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f905 	bl	8000cf4 <write_log>
			write_log(" ");
 8000aea:	484c      	ldr	r0, [pc, #304]	; (8000c1c <selectManager+0x208>)
 8000aec:	f000 f902 	bl	8000cf4 <write_log>
			write_log(date.time);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f8fd 	bl	8000cf4 <write_log>
			write_log(" ");
 8000afa:	4848      	ldr	r0, [pc, #288]	; (8000c1c <selectManager+0x208>)
 8000afc:	f000 f8fa 	bl	8000cf4 <write_log>
			write_log("Mauvaise combinaison: ");
 8000b00:	484b      	ldr	r0, [pc, #300]	; (8000c30 <selectManager+0x21c>)
 8000b02:	f000 f8f7 	bl	8000cf4 <write_log>
			write_log(cadenas.numberBuffDisplay);
 8000b06:	4842      	ldr	r0, [pc, #264]	; (8000c10 <selectManager+0x1fc>)
 8000b08:	f000 f8f4 	bl	8000cf4 <write_log>
			write_log("\n");
 8000b0c:	4845      	ldr	r0, [pc, #276]	; (8000c24 <selectManager+0x210>)
 8000b0e:	f000 f8f1 	bl	8000cf4 <write_log>
			HD44780_Puts(0, 1, "close");
 8000b12:	4a48      	ldr	r2, [pc, #288]	; (8000c34 <selectManager+0x220>)
 8000b14:	2101      	movs	r1, #1
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 fe64 	bl	80017e4 <HD44780_Puts>
			close();
 8000b1c:	f7ff fdc0 	bl	80006a0 <close>
}
 8000b20:	e071      	b.n	8000c06 <selectManager+0x1f2>
		date = get_time();
 8000b22:	463b      	mov	r3, r7
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f98d 	bl	8000e44 <get_time>
 8000b2a:	f107 041c 	add.w	r4, r7, #28
 8000b2e:	463d      	mov	r5, r7
 8000b30:	6828      	ldr	r0, [r5, #0]
 8000b32:	6869      	ldr	r1, [r5, #4]
 8000b34:	68aa      	ldr	r2, [r5, #8]
 8000b36:	68eb      	ldr	r3, [r5, #12]
 8000b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3a:	6928      	ldr	r0, [r5, #16]
 8000b3c:	6020      	str	r0, [r4, #0]
		write_log(date.date);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	330a      	adds	r3, #10
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f8d5 	bl	8000cf4 <write_log>
		write_log(" ");
 8000b4a:	4834      	ldr	r0, [pc, #208]	; (8000c1c <selectManager+0x208>)
 8000b4c:	f000 f8d2 	bl	8000cf4 <write_log>
		write_log(date.time);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 f8cd 	bl	8000cf4 <write_log>
		write_log(" ");
 8000b5a:	4830      	ldr	r0, [pc, #192]	; (8000c1c <selectManager+0x208>)
 8000b5c:	f000 f8ca 	bl	8000cf4 <write_log>
		write_log("Nouvelle combinaison par LCD: ");
 8000b60:	4835      	ldr	r0, [pc, #212]	; (8000c38 <selectManager+0x224>)
 8000b62:	f000 f8c7 	bl	8000cf4 <write_log>
		write_log(cadenas.numberBuffDisplay);
 8000b66:	482a      	ldr	r0, [pc, #168]	; (8000c10 <selectManager+0x1fc>)
 8000b68:	f000 f8c4 	bl	8000cf4 <write_log>
		write_log("\n");
 8000b6c:	482d      	ldr	r0, [pc, #180]	; (8000c24 <selectManager+0x210>)
 8000b6e:	f000 f8c1 	bl	8000cf4 <write_log>
		write_log(date.date);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	330a      	adds	r3, #10
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f8bb 	bl	8000cf4 <write_log>
		write_log(" ");
 8000b7e:	4827      	ldr	r0, [pc, #156]	; (8000c1c <selectManager+0x208>)
 8000b80:	f000 f8b8 	bl	8000cf4 <write_log>
		write_log(date.time);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f8b3 	bl	8000cf4 <write_log>
		write_log(" ");
 8000b8e:	4823      	ldr	r0, [pc, #140]	; (8000c1c <selectManager+0x208>)
 8000b90:	f000 f8b0 	bl	8000cf4 <write_log>
		write_log("Fermeture du cadenas\n");
 8000b94:	4829      	ldr	r0, [pc, #164]	; (8000c3c <selectManager+0x228>)
 8000b96:	f000 f8ad 	bl	8000cf4 <write_log>
		copy(cadenas.numberDisplay,cadenas.combinaisonCorrect);
 8000b9a:	491f      	ldr	r1, [pc, #124]	; (8000c18 <selectManager+0x204>)
 8000b9c:	481d      	ldr	r0, [pc, #116]	; (8000c14 <selectManager+0x200>)
 8000b9e:	f7ff fcf3 	bl	8000588 <copy>
		cadenas.numberDisplay[0] = 0;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <selectManager+0x1fc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	809a      	strh	r2, [r3, #4]
		cadenas.numberDisplay[1] = 0;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <selectManager+0x1fc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	80da      	strh	r2, [r3, #6]
		cadenas.numberDisplay[2] = 0;
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <selectManager+0x1fc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	811a      	strh	r2, [r3, #8]
		cadenas.numberDisplay[3] = 0;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <selectManager+0x1fc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	815a      	strh	r2, [r3, #10]
		sprintf(cadenas.numberBuffDisplay+0,"%d",cadenas.numberDisplay[0]);
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <selectManager+0x1fc>)
 8000bbc:	889b      	ldrh	r3, [r3, #4]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	491f      	ldr	r1, [pc, #124]	; (8000c40 <selectManager+0x22c>)
 8000bc2:	4813      	ldr	r0, [pc, #76]	; (8000c10 <selectManager+0x1fc>)
 8000bc4:	f009 ffde 	bl	800ab84 <siprintf>
		sprintf(cadenas.numberBuffDisplay+1,"%d",cadenas.numberDisplay[1]);
 8000bc8:	481e      	ldr	r0, [pc, #120]	; (8000c44 <selectManager+0x230>)
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <selectManager+0x1fc>)
 8000bcc:	88db      	ldrh	r3, [r3, #6]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	491b      	ldr	r1, [pc, #108]	; (8000c40 <selectManager+0x22c>)
 8000bd2:	f009 ffd7 	bl	800ab84 <siprintf>
		sprintf(cadenas.numberBuffDisplay+2,"%d",cadenas.numberDisplay[2]);
 8000bd6:	481c      	ldr	r0, [pc, #112]	; (8000c48 <selectManager+0x234>)
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <selectManager+0x1fc>)
 8000bda:	891b      	ldrh	r3, [r3, #8]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4918      	ldr	r1, [pc, #96]	; (8000c40 <selectManager+0x22c>)
 8000be0:	f009 ffd0 	bl	800ab84 <siprintf>
		sprintf(cadenas.numberBuffDisplay+3,"%d",cadenas.numberDisplay[3]);
 8000be4:	4819      	ldr	r0, [pc, #100]	; (8000c4c <selectManager+0x238>)
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <selectManager+0x1fc>)
 8000be8:	895b      	ldrh	r3, [r3, #10]
 8000bea:	461a      	mov	r2, r3
 8000bec:	4914      	ldr	r1, [pc, #80]	; (8000c40 <selectManager+0x22c>)
 8000bee:	f009 ffc9 	bl	800ab84 <siprintf>
		close();
 8000bf2:	f7ff fd55 	bl	80006a0 <close>
		HD44780_Puts(0, 1, "close");
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <selectManager+0x220>)
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 fdf2 	bl	80017e4 <HD44780_Puts>
		cadenas.isOpen = 0;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <selectManager+0x1fc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	82da      	strh	r2, [r3, #22]
}
 8000c06:	bf00      	nop
 8000c08:	3730      	adds	r7, #48	; 0x30
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000
 8000c14:	20000004 	.word	0x20000004
 8000c18:	2000000e 	.word	0x2000000e
 8000c1c:	0800b40c 	.word	0x0800b40c
 8000c20:	0800b43c 	.word	0x0800b43c
 8000c24:	0800b434 	.word	0x0800b434
 8000c28:	0800b450 	.word	0x0800b450
 8000c2c:	0800b468 	.word	0x0800b468
 8000c30:	0800b470 	.word	0x0800b470
 8000c34:	0800b404 	.word	0x0800b404
 8000c38:	0800b488 	.word	0x0800b488
 8000c3c:	0800b4a8 	.word	0x0800b4a8
 8000c40:	0800b438 	.word	0x0800b438
 8000c44:	20000001 	.word	0x20000001
 8000c48:	20000002 	.word	0x20000002
 8000c4c:	20000003 	.word	0x20000003

08000c50 <miseAJourLcd>:

/* Refresh the lcd */
void miseAJourLcd(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	 // Affichage des valeurs des digits
	HD44780_Puts(cadenas.cursorVal, 0, &cadenas.numberBuffDisplay[cadenas.cursorVal]);
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <miseAJourLcd+0x30>)
 8000c56:	899b      	ldrh	r3, [r3, #12]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <miseAJourLcd+0x30>)
 8000c5c:	8992      	ldrh	r2, [r2, #12]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <miseAJourLcd+0x30>)
 8000c62:	440a      	add	r2, r1
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fdbc 	bl	80017e4 <HD44780_Puts>

	// Mise en évidence du digit selectionné
	HD44780_CursorSet(cadenas.cursorVal,0);
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <miseAJourLcd+0x30>)
 8000c6e:	899b      	ldrh	r3, [r3, #12]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 fec1 	bl	80019fc <HD44780_CursorSet>
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000000 	.word	0x20000000

08000c84 <ManageButtonEncoder>:

/* Manage the button of encoder */
void ManageButtonEncoder(int debounce)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	if(debounce == 0)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d113      	bne.n	8000cba <ManageButtonEncoder+0x36>
		{
			// Décale vers la droite le digit selectionné
			if(cadenas.cursorVal<3)
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <ManageButtonEncoder+0x44>)
 8000c94:	899b      	ldrh	r3, [r3, #12]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d809      	bhi.n	8000cae <ManageButtonEncoder+0x2a>
			{
				cadenas.cursorVal++;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <ManageButtonEncoder+0x44>)
 8000c9c:	899b      	ldrh	r3, [r3, #12]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <ManageButtonEncoder+0x44>)
 8000ca4:	819a      	strh	r2, [r3, #12]
				debounce++;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	e005      	b.n	8000cba <ManageButtonEncoder+0x36>
			}

			// Teste la combinaison
			else if(cadenas.cursorVal == 3)
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <ManageButtonEncoder+0x44>)
 8000cb0:	899b      	ldrh	r3, [r3, #12]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d101      	bne.n	8000cba <ManageButtonEncoder+0x36>
			{
				//copy(numberDisplay,combinaisonCorrect);
				selectManager();
 8000cb6:	f7ff fead 	bl	8000a14 <selectManager>
			}
		}
		debounce = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000000 	.word	0x20000000

08000ccc <CallUart>:

void CallUart(char *Rxbuff)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	// Si les 4 premiers digits sont égaux à la combinaison pour ouvrir le cadenas
	if(verifCombiUart(Rxbuff,cadenas.numberDisplay))
 8000cd4:	4906      	ldr	r1, [pc, #24]	; (8000cf0 <CallUart+0x24>)
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fcf0 	bl	80006bc <verifCombiUart>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d002      	beq.n	8000ce8 <CallUart+0x1c>
	{
		changeCombiUart(Rxbuff);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fd32 	bl	800074c <changeCombiUart>
	}
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <write_log>:

/* Write log into the SD card */
void write_log(char *log)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	f5ad 6d95 	sub.w	sp, sp, #1192	; 0x4a8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	6018      	str	r0, [r3, #0]
	FATFS myFATFS;
	FIL myFile;
	UINT testByte;
	FRESULT fres;
	char fileName[12] = {0};
 8000d00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
	char fileTitle[36] = {0};
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2220      	movs	r2, #32
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f009 ff28 	bl	800ab74 <memset>

  sprintf(fileName,"STMlecon.txt");
 8000d24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d28:	492c      	ldr	r1, [pc, #176]	; (8000ddc <write_log+0xe8>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f009 ff2a 	bl	800ab84 <siprintf>
  sprintf(fileTitle,log);
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	f107 020c 	add.w	r2, r7, #12
 8000d36:	6819      	ldr	r1, [r3, #0]
 8000d38:	4610      	mov	r0, r2
 8000d3a:	f009 ff23 	bl	800ab84 <siprintf>

  fres = f_mount(&myFATFS,"",1);
 8000d3e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8000d42:	2201      	movs	r2, #1
 8000d44:	4926      	ldr	r1, [pc, #152]	; (8000de0 <write_log+0xec>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f009 f8a0 	bl	8009e8c <f_mount>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
  if(fres == FR_OK)
 8000d52:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d13a      	bne.n	8000dd0 <write_log+0xdc>
  {
  	HAL_Delay(10);
 8000d5a:	200a      	movs	r0, #10
 8000d5c:	f001 fa58 	bl	8002210 <HAL_Delay>
  	f_mkdir(FILEPATH);
 8000d60:	4820      	ldr	r0, [pc, #128]	; (8000de4 <write_log+0xf0>)
 8000d62:	f009 fcb4 	bl	800a6ce <f_mkdir>
  	HAL_Delay(10);
 8000d66:	200a      	movs	r0, #10
 8000d68:	f001 fa52 	bl	8002210 <HAL_Delay>
  	fres = f_open(&myFile, fileName, FA_WRITE | FA_OPEN_APPEND);
 8000d6c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d74:	2232      	movs	r2, #50	; 0x32
 8000d76:	4618      	mov	r0, r3
 8000d78:	f009 f8ce 	bl	8009f18 <f_open>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
  	if(fres == FR_OK)
 8000d82:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d122      	bne.n	8000dd0 <write_log+0xdc>
  	{
  		HAL_Delay(10);
 8000d8a:	200a      	movs	r0, #10
 8000d8c:	f001 fa40 	bl	8002210 <HAL_Delay>
  		fres = f_write(&myFile, fileTitle, strlen(fileTitle), &testByte);
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fa23 	bl	80001e0 <strlen>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000da0:	f107 010c 	add.w	r1, r7, #12
 8000da4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000da8:	f009 fa74 	bl	800a294 <f_write>
 8000dac:	4603      	mov	r3, r0
 8000dae:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
  		if(fres == FR_OK)
 8000db2:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10a      	bne.n	8000dd0 <write_log+0xdc>
  		{
  			HAL_Delay(10);
 8000dba:	200a      	movs	r0, #10
 8000dbc:	f001 fa28 	bl	8002210 <HAL_Delay>
  			fres = f_close(&myFile);
 8000dc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f009 fc58 	bl	800a67a <f_close>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
  		}
  	}
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	f507 6795 	add.w	r7, r7, #1192	; 0x4a8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	0800b4c0 	.word	0x0800b4c0
 8000de0:	0800b4d0 	.word	0x0800b4d0
 8000de4:	0800b4d4 	.word	0x0800b4d4

08000de8 <set_time>:

/* Set the time into the RTC */
void set_time (void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
    /**Initialize RTC and set the Time and Date
    */
  sTime.Hours = 0x10;
 8000dee:	2310      	movs	r3, #16
 8000df0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 8000df2:	2320      	movs	r3, #32
 8000df4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8000df6:	2330      	movs	r3, #48	; 0x30
 8000df8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2201      	movs	r2, #1
 8000e06:	4619      	mov	r1, r3
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <set_time+0x58>)
 8000e0a:	f003 faca 	bl	80043a2 <HAL_RTC_SetTime>
  }
  /* USER CODE BEGIN RTC_Init 3 */

  /* USER CODE END RTC_Init 3 */

  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8000e12:	2308      	movs	r3, #8
 8000e14:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8000e16:	2312      	movs	r3, #18
 8000e18:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2201      	movs	r2, #1
 8000e22:	4619      	mov	r1, r3
 8000e24:	4806      	ldr	r0, [pc, #24]	; (8000e40 <set_time+0x58>)
 8000e26:	f003 fbd7 	bl	80045d8 <HAL_RTC_SetDate>
  {
    //_Error_Handler(__FILE__, __LINE__);
  }
  /* USER CODE BEGIN RTC_Init 4 */

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 8000e2a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <set_time+0x58>)
 8000e32:	f003 fe6f 	bl	8004b14 <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 4 */
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000134 	.word	0x20000134

08000e44 <get_time>:
  /* USER CODE END RTC_Init 5 */
}

/* Get the time into the RTC */
TimeHeure get_time(void)
{
 8000e44:	b5b0      	push	{r4, r5, r7, lr}
 8000e46:	b090      	sub	sp, #64	; 0x40
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	6078      	str	r0, [r7, #4]
	TimeHeure date;
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2200      	movs	r2, #0
 8000e52:	4619      	mov	r1, r3
 8000e54:	481c      	ldr	r0, [pc, #112]	; (8000ec8 <get_time+0x84>)
 8000e56:	f003 fb61 	bl	800451c <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	4819      	ldr	r0, [pc, #100]	; (8000ec8 <get_time+0x84>)
 8000e64:	f003 fc5f 	bl	8004726 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)date.time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000e68:	7b3b      	ldrb	r3, [r7, #12]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	7b7b      	ldrb	r3, [r7, #13]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	7bbb      	ldrb	r3, [r7, #14]
 8000e72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4914      	ldr	r1, [pc, #80]	; (8000ecc <get_time+0x88>)
 8000e7c:	f009 fe82 	bl	800ab84 <siprintf>

  /* Display date Format: mm-dd-yy */
  sprintf((char*)date.date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 8000e80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000e84:	4619      	mov	r1, r3
 8000e86:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000e8a:	461c      	mov	r4, r3
 8000e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e90:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000e94:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e98:	f102 000a 	add.w	r0, r2, #10
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	4623      	mov	r3, r4
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	490b      	ldr	r1, [pc, #44]	; (8000ed0 <get_time+0x8c>)
 8000ea4:	f009 fe6e 	bl	800ab84 <siprintf>
  return date;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	461d      	mov	r5, r3
 8000eac:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eb2:	6028      	str	r0, [r5, #0]
 8000eb4:	6069      	str	r1, [r5, #4]
 8000eb6:	60aa      	str	r2, [r5, #8]
 8000eb8:	60eb      	str	r3, [r5, #12]
 8000eba:	6820      	ldr	r0, [r4, #0]
 8000ebc:	6128      	str	r0, [r5, #16]
}
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	3738      	adds	r7, #56	; 0x38
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000134 	.word	0x20000134
 8000ecc:	0800b4d8 	.word	0x0800b4d8
 8000ed0:	0800b4e8 	.word	0x0800b4e8

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f001 f927 	bl	800212c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 f855 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f000 fb2f 	bl	8001544 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee6:	f000 faf7 	bl	80014d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000eea:	f000 f8b9 	bl	8001060 <MX_ADC1_Init>

  MX_USART2_UART_Init();
 8000eee:	f000 fac9 	bl	8001484 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ef2:	f000 f9cb 	bl	800128c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ef6:	f000 fa17 	bl	8001328 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000efa:	f000 fa69 	bl	80013d0 <MX_TIM4_Init>
  MX_SPI2_Init();
 8000efe:	f000 f98f 	bl	8001220 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000f02:	f006 f95d 	bl	80071c0 <MX_FATFS_Init>
  MX_RTC_Init();
 8000f06:	f000 f8ff 	bl	8001108 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* Démarre les périphériques */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f0a:	213c      	movs	r1, #60	; 0x3c
 8000f0c:	4817      	ldr	r0, [pc, #92]	; (8000f6c <main+0x98>)
 8000f0e:	f004 fb81 	bl	8005614 <HAL_TIM_Encoder_Start>
  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 8000f12:	1dbb      	adds	r3, r7, #6
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	4815      	ldr	r0, [pc, #84]	; (8000f70 <main+0x9c>)
 8000f1a:	f001 f9e1 	bl	80022e0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000f1e:	4815      	ldr	r0, [pc, #84]	; (8000f74 <main+0xa0>)
 8000f20:	f004 f970 	bl	8005204 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f24:	2104      	movs	r1, #4
 8000f26:	4814      	ldr	r0, [pc, #80]	; (8000f78 <main+0xa4>)
 8000f28:	f004 fa1e 	bl	8005368 <HAL_TIM_PWM_Start>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rxbuff, RXBUFF_SIZE);
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	4913      	ldr	r1, [pc, #76]	; (8000f7c <main+0xa8>)
 8000f30:	4813      	ldr	r0, [pc, #76]	; (8000f80 <main+0xac>)
 8000f32:	f005 f90e 	bl	8006152 <HAL_UARTEx_ReceiveToIdle_DMA>

  /* Initialise l'affichage du LCD */
  initLCD();
 8000f36:	f7ff fb6d 	bl	8000614 <initLCD>

  /* Initialise une date et une heure dans la rtc */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	4811      	ldr	r0, [pc, #68]	; (8000f84 <main+0xb0>)
 8000f3e:	f003 fe03 	bl	8004b48 <HAL_RTCEx_BKUPRead>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d001      	beq.n	8000f50 <main+0x7c>
  {
   	set_time();
 8000f4c:	f7ff ff4c 	bl	8000de8 <set_time>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  buttonManager(adcVal,debounce);
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <main+0xb4>)
 8000f54:	6812      	ldr	r2, [r2, #0]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fc35 	bl	80007c8 <buttonManager>
	  miseAJourLcd();
 8000f5e:	f7ff fe77 	bl	8000c50 <miseAJourLcd>
	  HAL_Delay(500);
 8000f62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f66:	f001 f953 	bl	8002210 <HAL_Delay>
	  buttonManager(adcVal,debounce);
 8000f6a:	e7f1      	b.n	8000f50 <main+0x7c>
 8000f6c:	2000025c 	.word	0x2000025c
 8000f70:	200002a4 	.word	0x200002a4
 8000f74:	2000034c 	.word	0x2000034c
 8000f78:	2000020c 	.word	0x2000020c
 8000f7c:	20000254 	.word	0x20000254
 8000f80:	20000394 	.word	0x20000394
 8000f84:	20000134 	.word	0x20000134
 8000f88:	200000bc 	.word	0x200000bc

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b094      	sub	sp, #80	; 0x50
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	2230      	movs	r2, #48	; 0x30
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f009 fdea 	bl	800ab74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <SystemClock_Config+0xcc>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a27      	ldr	r2, [pc, #156]	; (8001058 <SystemClock_Config+0xcc>)
 8000fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b25      	ldr	r3, [pc, #148]	; (8001058 <SystemClock_Config+0xcc>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <SystemClock_Config+0xd0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a21      	ldr	r2, [pc, #132]	; (800105c <SystemClock_Config+0xd0>)
 8000fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <SystemClock_Config+0xd0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000fe8:	230a      	movs	r3, #10
 8000fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fec:	2301      	movs	r3, #1
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001000:	2308      	movs	r3, #8
 8001002:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001004:	2354      	movs	r3, #84	; 0x54
 8001006:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001008:	2302      	movs	r3, #2
 800100a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800100c:	2304      	movs	r3, #4
 800100e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001010:	f107 0320 	add.w	r3, r7, #32
 8001014:	4618      	mov	r0, r3
 8001016:	f002 fbfb 	bl	8003810 <HAL_RCC_OscConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001020:	f000 fb6e 	bl	8001700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001024:	230f      	movs	r3, #15
 8001026:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001028:	2302      	movs	r3, #2
 800102a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001034:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	2102      	movs	r1, #2
 8001040:	4618      	mov	r0, r3
 8001042:	f002 fe5d 	bl	8003d00 <HAL_RCC_ClockConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800104c:	f000 fb58 	bl	8001700 <Error_Handler>
  }
}
 8001050:	bf00      	nop
 8001052:	3750      	adds	r7, #80	; 0x50
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40023800 	.word	0x40023800
 800105c:	40007000 	.word	0x40007000

08001060 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <MX_ADC1_Init+0xa0>)
 8001074:	4a23      	ldr	r2, [pc, #140]	; (8001104 <MX_ADC1_Init+0xa4>)
 8001076:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <MX_ADC1_Init+0xa0>)
 800107a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800107e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <MX_ADC1_Init+0xa0>)
 8001082:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_ADC1_Init+0xa0>)
 800108a:	2201      	movs	r2, #1
 800108c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <MX_ADC1_Init+0xa0>)
 8001090:	2200      	movs	r2, #0
 8001092:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001094:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_ADC1_Init+0xa0>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_ADC1_Init+0xa0>)
 800109e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <MX_ADC1_Init+0xa0>)
 80010a6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_ADC1_Init+0xa0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <MX_ADC1_Init+0xa0>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_ADC1_Init+0xa0>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_ADC1_Init+0xa0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <MX_ADC1_Init+0xa0>)
 80010c8:	f001 f8c6 	bl	8002258 <HAL_ADC_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80010d2:	f000 fb15 	bl	8001700 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010de:	2302      	movs	r3, #2
 80010e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e2:	463b      	mov	r3, r7
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_ADC1_Init+0xa0>)
 80010e8:	f001 f9fe 	bl	80024e8 <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80010f2:	f000 fb05 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200002a4 	.word	0x200002a4
 8001104:	40012000 	.word	0x40012000

08001108 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b090      	sub	sp, #64	; 0x40
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800110e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2228      	movs	r2, #40	; 0x28
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f009 fd23 	bl	800ab74 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800112e:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <MX_RTC_Init+0x110>)
 8001130:	4a3a      	ldr	r2, [pc, #232]	; (800121c <MX_RTC_Init+0x114>)
 8001132:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001134:	4b38      	ldr	r3, [pc, #224]	; (8001218 <MX_RTC_Init+0x110>)
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800113a:	4b37      	ldr	r3, [pc, #220]	; (8001218 <MX_RTC_Init+0x110>)
 800113c:	227f      	movs	r2, #127	; 0x7f
 800113e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001140:	4b35      	ldr	r3, [pc, #212]	; (8001218 <MX_RTC_Init+0x110>)
 8001142:	22ff      	movs	r2, #255	; 0xff
 8001144:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001146:	4b34      	ldr	r3, [pc, #208]	; (8001218 <MX_RTC_Init+0x110>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800114c:	4b32      	ldr	r3, [pc, #200]	; (8001218 <MX_RTC_Init+0x110>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001152:	4b31      	ldr	r3, [pc, #196]	; (8001218 <MX_RTC_Init+0x110>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001158:	482f      	ldr	r0, [pc, #188]	; (8001218 <MX_RTC_Init+0x110>)
 800115a:	f003 f891 	bl	8004280 <HAL_RTC_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001164:	f000 facc 	bl	8001700 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001168:	2300      	movs	r3, #0
 800116a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800116e:	2300      	movs	r3, #0
 8001170:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001174:	2300      	movs	r3, #0
 8001176:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800117a:	2300      	movs	r3, #0
 800117c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001186:	2201      	movs	r2, #1
 8001188:	4619      	mov	r1, r3
 800118a:	4823      	ldr	r0, [pc, #140]	; (8001218 <MX_RTC_Init+0x110>)
 800118c:	f003 f909 	bl	80043a2 <HAL_RTC_SetTime>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001196:	f000 fab3 	bl	8001700 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800119a:	2301      	movs	r3, #1
 800119c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80011a0:	2301      	movs	r3, #1
 80011a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b6:	2201      	movs	r2, #1
 80011b8:	4619      	mov	r1, r3
 80011ba:	4817      	ldr	r0, [pc, #92]	; (8001218 <MX_RTC_Init+0x110>)
 80011bc:	f003 fa0c 	bl	80045d8 <HAL_RTC_SetDate>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80011c6:	f000 fa9b 	bl	8001700 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80011f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	2201      	movs	r2, #1
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_RTC_Init+0x110>)
 8001202:	f003 fadf 	bl	80047c4 <HAL_RTC_SetAlarm>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800120c:	f000 fa78 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	3740      	adds	r7, #64	; 0x40
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000134 	.word	0x20000134
 800121c:	40002800 	.word	0x40002800

08001220 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_SPI2_Init+0x64>)
 8001226:	4a18      	ldr	r2, [pc, #96]	; (8001288 <MX_SPI2_Init+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_SPI2_Init+0x64>)
 800122c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001230:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_SPI2_Init+0x64>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_SPI2_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_SPI2_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_SPI2_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_SPI2_Init+0x64>)
 800124c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001250:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_SPI2_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_SPI2_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_SPI2_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <MX_SPI2_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_SPI2_Init+0x64>)
 800126c:	220a      	movs	r2, #10
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_SPI2_Init+0x64>)
 8001272:	f003 fc81 	bl	8004b78 <HAL_SPI_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800127c:	f000 fa40 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200001b4 	.word	0x200001b4
 8001288:	40003800 	.word	0x40003800

0800128c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	463b      	mov	r3, r7
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_TIM2_Init+0x98>)
 80012aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_TIM2_Init+0x98>)
 80012b2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80012b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_TIM2_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_TIM2_Init+0x98>)
 80012c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <MX_TIM2_Init+0x98>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_TIM2_Init+0x98>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d2:	4814      	ldr	r0, [pc, #80]	; (8001324 <MX_TIM2_Init+0x98>)
 80012d4:	f003 ff46 	bl	8005164 <HAL_TIM_Base_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012de:	f000 fa0f 	bl	8001700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_TIM2_Init+0x98>)
 80012f0:	f004 fae0 	bl	80058b4 <HAL_TIM_ConfigClockSource>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012fa:	f000 fa01 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012fe:	2320      	movs	r3, #32
 8001300:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_TIM2_Init+0x98>)
 800130c:	f004 fe66 	bl	8005fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001316:	f000 f9f3 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000034c 	.word	0x2000034c

08001328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	; 0x30
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	2224      	movs	r2, #36	; 0x24
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f009 fc1c 	bl	800ab74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <MX_TIM3_Init+0xa0>)
 8001346:	4a21      	ldr	r2, [pc, #132]	; (80013cc <MX_TIM3_Init+0xa4>)
 8001348:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <MX_TIM3_Init+0xa0>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <MX_TIM3_Init+0xa0>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000;
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <MX_TIM3_Init+0xa0>)
 8001358:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800135c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_TIM3_Init+0xa0>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_TIM3_Init+0xa0>)
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800136a:	2303      	movs	r3, #3
 800136c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800137a:	230a      	movs	r3, #10
 800137c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001382:	2301      	movs	r3, #1
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <MX_TIM3_Init+0xa0>)
 8001396:	f004 f897 	bl	80054c8 <HAL_TIM_Encoder_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013a0:	f000 f9ae 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_TIM3_Init+0xa0>)
 80013b2:	f004 fe13 	bl	8005fdc <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013bc:	f000 f9a0 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3730      	adds	r7, #48	; 0x30
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000025c 	.word	0x2000025c
 80013cc:	40000400 	.word	0x40000400

080013d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <MX_TIM4_Init+0xac>)
 80013f4:	4a22      	ldr	r2, [pc, #136]	; (8001480 <MX_TIM4_Init+0xb0>)
 80013f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1680;
 80013f8:	4b20      	ldr	r3, [pc, #128]	; (800147c <MX_TIM4_Init+0xac>)
 80013fa:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80013fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <MX_TIM4_Init+0xac>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_TIM4_Init+0xac>)
 8001408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800140c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_TIM4_Init+0xac>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_TIM4_Init+0xac>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800141a:	4818      	ldr	r0, [pc, #96]	; (800147c <MX_TIM4_Init+0xac>)
 800141c:	f003 ff54 	bl	80052c8 <HAL_TIM_PWM_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001426:	f000 f96b 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001432:	f107 0320 	add.w	r3, r7, #32
 8001436:	4619      	mov	r1, r3
 8001438:	4810      	ldr	r0, [pc, #64]	; (800147c <MX_TIM4_Init+0xac>)
 800143a:	f004 fdcf 	bl	8005fdc <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001444:	f000 f95c 	bl	8001700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001448:	2360      	movs	r3, #96	; 0x60
 800144a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2204      	movs	r2, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4807      	ldr	r0, [pc, #28]	; (800147c <MX_TIM4_Init+0xac>)
 8001460:	f004 f966 	bl	8005730 <HAL_TIM_PWM_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800146a:	f000 f949 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800146e:	4803      	ldr	r0, [pc, #12]	; (800147c <MX_TIM4_Init+0xac>)
 8001470:	f000 fcde 	bl	8001e30 <HAL_TIM_MspPostInit>

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2000020c 	.word	0x2000020c
 8001480:	40000800 	.word	0x40000800

08001484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <MX_USART2_UART_Init+0x50>)
 800148c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 8001490:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_USART2_UART_Init+0x4c>)
 80014bc:	f004 fdfc 	bl	80060b8 <HAL_UART_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014c6:	f000 f91b 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000394 	.word	0x20000394
 80014d4:	40004400 	.word	0x40004400

080014d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_DMA_Init+0x68>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a16      	ldr	r2, [pc, #88]	; (8001540 <MX_DMA_Init+0x68>)
 80014e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_DMA_Init+0x68>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_DMA_Init+0x68>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <MX_DMA_Init+0x68>)
 8001504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <MX_DMA_Init+0x68>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2010      	movs	r0, #16
 800151c:	f001 fb6f 	bl	8002bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001520:	2010      	movs	r0, #16
 8001522:	f001 fb88 	bl	8002c36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2038      	movs	r0, #56	; 0x38
 800152c:	f001 fb67 	bl	8002bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001530:	2038      	movs	r0, #56	; 0x38
 8001532:	f001 fb80 	bl	8002c36 <HAL_NVIC_EnableIRQ>

}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b46      	ldr	r3, [pc, #280]	; (8001678 <MX_GPIO_Init+0x134>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a45      	ldr	r2, [pc, #276]	; (8001678 <MX_GPIO_Init+0x134>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b43      	ldr	r3, [pc, #268]	; (8001678 <MX_GPIO_Init+0x134>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b3f      	ldr	r3, [pc, #252]	; (8001678 <MX_GPIO_Init+0x134>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a3e      	ldr	r2, [pc, #248]	; (8001678 <MX_GPIO_Init+0x134>)
 8001580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b3c      	ldr	r3, [pc, #240]	; (8001678 <MX_GPIO_Init+0x134>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	4b38      	ldr	r3, [pc, #224]	; (8001678 <MX_GPIO_Init+0x134>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a37      	ldr	r2, [pc, #220]	; (8001678 <MX_GPIO_Init+0x134>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b35      	ldr	r3, [pc, #212]	; (8001678 <MX_GPIO_Init+0x134>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <MX_GPIO_Init+0x134>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a30      	ldr	r2, [pc, #192]	; (8001678 <MX_GPIO_Init+0x134>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b2e      	ldr	r3, [pc, #184]	; (8001678 <MX_GPIO_Init+0x134>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2182      	movs	r1, #130	; 0x82
 80015ce:	482b      	ldr	r0, [pc, #172]	; (800167c <MX_GPIO_Init+0x138>)
 80015d0:	f002 f8d2 	bl	8003778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80015da:	4829      	ldr	r0, [pc, #164]	; (8001680 <MX_GPIO_Init+0x13c>)
 80015dc:	f002 f8cc 	bl	8003778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80015e6:	4827      	ldr	r0, [pc, #156]	; (8001684 <MX_GPIO_Init+0x140>)
 80015e8:	f002 f8c6 	bl	8003778 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_CS_Pin PC7 */
  GPIO_InitStruct.Pin = SD_CS_Pin|GPIO_PIN_7;
 80015ec:	2382      	movs	r3, #130	; 0x82
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	481e      	ldr	r0, [pc, #120]	; (800167c <MX_GPIO_Init+0x138>)
 8001604:	f001 ff34 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8001608:	f44f 7348 	mov.w	r3, #800	; 0x320
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4817      	ldr	r0, [pc, #92]	; (8001680 <MX_GPIO_Init+0x13c>)
 8001622:	f001 ff25 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8001626:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4811      	ldr	r0, [pc, #68]	; (8001684 <MX_GPIO_Init+0x140>)
 8001640:	f001 ff16 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001644:	2340      	movs	r3, #64	; 0x40
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001648:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4808      	ldr	r0, [pc, #32]	; (800167c <MX_GPIO_Init+0x138>)
 800165a:	f001 ff09 	bl	8003470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	2017      	movs	r0, #23
 8001664:	f001 facb 	bl	8002bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001668:	2017      	movs	r0, #23
 800166a:	f001 fae4 	bl	8002c36 <HAL_NVIC_EnableIRQ>

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40020800 	.word	0x40020800
 8001680:	40020000 	.word	0x40020000
 8001684:	40020400 	.word	0x40020400

08001688 <HAL_ADC_ConvCpltCallback>:
{
	//alarm = 1;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001690:	2120      	movs	r1, #32
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <HAL_ADC_ConvCpltCallback+0x18>)
 8001694:	f002 f889 	bl	80037aa <HAL_GPIO_TogglePin>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40020000 	.word	0x40020000

080016a4 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
	// Relancement du périphérique
	if(huart->Instance == USART2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_UARTEx_RxEventCallback+0x30>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d104      	bne.n	80016c4 <HAL_UARTEx_RxEventCallback+0x20>
	{
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rxbuff, RXBUFF_SIZE);
 80016ba:	2208      	movs	r2, #8
 80016bc:	4906      	ldr	r1, [pc, #24]	; (80016d8 <HAL_UARTEx_RxEventCallback+0x34>)
 80016be:	4807      	ldr	r0, [pc, #28]	; (80016dc <HAL_UARTEx_RxEventCallback+0x38>)
 80016c0:	f004 fd47 	bl	8006152 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
	CallUart(Rxbuff);
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <HAL_UARTEx_RxEventCallback+0x34>)
 80016c6:	f7ff fb01 	bl	8000ccc <CallUart>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40004400 	.word	0x40004400
 80016d8:	20000254 	.word	0x20000254
 80016dc:	20000394 	.word	0x20000394

080016e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
	ManageButtonEncoder(debounce);
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <HAL_GPIO_EXTI_Callback+0x1c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fac8 	bl	8000c84 <ManageButtonEncoder>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200000bc 	.word	0x200000bc

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001708:	e7fe      	b.n	8001708 <Error_Handler+0x8>
	...

0800170c <HD44780_Init>:
#define HD44780_1LINE               0x00
#define HD44780_5x10DOTS            0x04
#define HD44780_5x8DOTS             0x00


void HD44780_Init(uint8_t cols, uint8_t rows) {//uint8_t
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	460a      	mov	r2, r1
 8001716:	71fb      	strb	r3, [r7, #7]
 8001718:	4613      	mov	r3, r2
 800171a:	71bb      	strb	r3, [r7, #6]

	
	/* Init pinout */
	HD44780_InitPins();
 800171c:	f000 f99e 	bl	8001a5c <HD44780_InitPins>
	
	/* At least 40ms */
	HAL_Delay(40);
 8001720:	2028      	movs	r0, #40	; 0x28
 8001722:	f000 fd75 	bl	8002210 <HAL_Delay>
	
	/* Set LCD width and height */
	HD44780_Opts.Rows = rows;
 8001726:	4a29      	ldr	r2, [pc, #164]	; (80017cc <HD44780_Init+0xc0>)
 8001728:	79bb      	ldrb	r3, [r7, #6]
 800172a:	70d3      	strb	r3, [r2, #3]
	HD44780_Opts.Cols = cols;
 800172c:	4a27      	ldr	r2, [pc, #156]	; (80017cc <HD44780_Init+0xc0>)
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	7113      	strb	r3, [r2, #4]
	
	/* Set cursor pointer to beginning for LCD */
	HD44780_Opts.currentX = 0;
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <HD44780_Init+0xc0>)
 8001734:	2200      	movs	r2, #0
 8001736:	715a      	strb	r2, [r3, #5]
	HD44780_Opts.currentY = 0;
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <HD44780_Init+0xc0>)
 800173a:	2200      	movs	r2, #0
 800173c:	719a      	strb	r2, [r3, #6]
	
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 800173e:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HD44780_Init+0xc0>)
 8001740:	2200      	movs	r2, #0
 8001742:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d906      	bls.n	8001758 <HD44780_Init+0x4c>
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HD44780_Init+0xc0>)
 800174c:	785b      	ldrb	r3, [r3, #1]
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <HD44780_Init+0xc0>)
 8001756:	705a      	strb	r2, [r3, #1]
	}
	
	/* Try to set 4bit mode */
	HD44780_Cmd4bit(0x03);
 8001758:	2003      	movs	r0, #3
 800175a:	f000 f909 	bl	8001970 <HD44780_Cmd4bit>
	HAL_Delay(10);
 800175e:	200a      	movs	r0, #10
 8001760:	f000 fd56 	bl	8002210 <HAL_Delay>
	
	/* Second try */
	HD44780_Cmd4bit(0x03);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 f903 	bl	8001970 <HD44780_Cmd4bit>
	HAL_Delay(10);
 800176a:	200a      	movs	r0, #10
 800176c:	f000 fd50 	bl	8002210 <HAL_Delay>
	
	/* Third goo! */
	HD44780_Cmd4bit(0x03);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f8fd 	bl	8001970 <HD44780_Cmd4bit>
	HAL_Delay(10);
 8001776:	200a      	movs	r0, #10
 8001778:	f000 fd4a 	bl	8002210 <HAL_Delay>
	
	/* Set 4-bit interface */
	HD44780_Cmd4bit(0x02);
 800177c:	2002      	movs	r0, #2
 800177e:	f000 f8f7 	bl	8001970 <HD44780_Cmd4bit>
	HAL_Delay(10);
 8001782:	200a      	movs	r0, #10
 8001784:	f000 fd44 	bl	8002210 <HAL_Delay>
	
	/* Set # lines, font size, etc. */
	HD44780_Cmd(HD44780_FUNCTIONSET | HD44780_Opts.DisplayFunction);
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HD44780_Init+0xc0>)
 800178a:	785b      	ldrb	r3, [r3, #1]
 800178c:	f043 0320 	orr.w	r3, r3, #32
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f8b0 	bl	80018f8 <HD44780_Cmd>

	/* Turn the display on with no cursor or blinking default */
	HD44780_Opts.DisplayControl = HD44780_DISPLAYON;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HD44780_Init+0xc0>)
 800179a:	2204      	movs	r2, #4
 800179c:	701a      	strb	r2, [r3, #0]
	HD44780_DisplayOn();
 800179e:	f000 f87f 	bl	80018a0 <HD44780_DisplayOn>

	/* Clear lcd */
	HD44780_Clear();
 80017a2:	f000 f815 	bl	80017d0 <HD44780_Clear>

	/* Default font directions */
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HD44780_Init+0xc0>)
 80017a8:	2202      	movs	r2, #2
 80017aa:	709a      	strb	r2, [r3, #2]
	HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <HD44780_Init+0xc0>)
 80017ae:	789b      	ldrb	r3, [r3, #2]
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f89e 	bl	80018f8 <HD44780_Cmd>

	/* Delay */
	HAL_Delay(10);
 80017bc:	200a      	movs	r0, #10
 80017be:	f000 fd27 	bl	8002210 <HAL_Delay>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200000c0 	.word	0x200000c0

080017d0 <HD44780_Clear>:

void HD44780_Clear(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	HD44780_Cmd(HD44780_CLEARDISPLAY);
 80017d4:	2001      	movs	r0, #1
 80017d6:	f000 f88f 	bl	80018f8 <HD44780_Cmd>
	HAL_Delay(10);
 80017da:	200a      	movs	r0, #10
 80017dc:	f000 fd18 	bl	8002210 <HAL_Delay>
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HD44780_Puts>:

void HD44780_Puts(uint8_t x, uint8_t y, char* str) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	603a      	str	r2, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	460b      	mov	r3, r1
 80017f2:	71bb      	strb	r3, [r7, #6]
	HD44780_CursorSet(x, y);
 80017f4:	79ba      	ldrb	r2, [r7, #6]
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f8fe 	bl	80019fc <HD44780_CursorSet>
	while (*str) {
 8001800:	e042      	b.n	8001888 <HD44780_Puts+0xa4>
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <HD44780_Puts+0xb8>)
 8001804:	795a      	ldrb	r2, [r3, #5]
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <HD44780_Puts+0xb8>)
 8001808:	791b      	ldrb	r3, [r3, #4]
 800180a:	429a      	cmp	r2, r3
 800180c:	d310      	bcc.n	8001830 <HD44780_Puts+0x4c>
			HD44780_Opts.currentX = 0;
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <HD44780_Puts+0xb8>)
 8001810:	2200      	movs	r2, #0
 8001812:	715a      	strb	r2, [r3, #5]
			HD44780_Opts.currentY++;
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <HD44780_Puts+0xb8>)
 8001816:	799b      	ldrb	r3, [r3, #6]
 8001818:	3301      	adds	r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <HD44780_Puts+0xb8>)
 800181e:	719a      	strb	r2, [r3, #6]
			HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HD44780_Puts+0xb8>)
 8001822:	795b      	ldrb	r3, [r3, #5]
 8001824:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HD44780_Puts+0xb8>)
 8001826:	7992      	ldrb	r2, [r2, #6]
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f8e6 	bl	80019fc <HD44780_CursorSet>
		}
		if (*str == '\n') {
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b0a      	cmp	r3, #10
 8001836:	d10e      	bne.n	8001856 <HD44780_Puts+0x72>
			HD44780_Opts.currentY++;
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <HD44780_Puts+0xb8>)
 800183a:	799b      	ldrb	r3, [r3, #6]
 800183c:	3301      	adds	r3, #1
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <HD44780_Puts+0xb8>)
 8001842:	719a      	strb	r2, [r3, #6]
			HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <HD44780_Puts+0xb8>)
 8001846:	795b      	ldrb	r3, [r3, #5]
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <HD44780_Puts+0xb8>)
 800184a:	7992      	ldrb	r2, [r2, #6]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f8d4 	bl	80019fc <HD44780_CursorSet>
 8001854:	e015      	b.n	8001882 <HD44780_Puts+0x9e>
		} else if (*str == '\r') {
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b0d      	cmp	r3, #13
 800185c:	d106      	bne.n	800186c <HD44780_Puts+0x88>
			HD44780_CursorSet(0, HD44780_Opts.currentY);
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HD44780_Puts+0xb8>)
 8001860:	799b      	ldrb	r3, [r3, #6]
 8001862:	4619      	mov	r1, r3
 8001864:	2000      	movs	r0, #0
 8001866:	f000 f8c9 	bl	80019fc <HD44780_CursorSet>
 800186a:	e00a      	b.n	8001882 <HD44780_Puts+0x9e>
		} else {
			HD44780_Data(*str);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f85f 	bl	8001934 <HD44780_Data>
			HD44780_Opts.currentX++;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HD44780_Puts+0xb8>)
 8001878:	795b      	ldrb	r3, [r3, #5]
 800187a:	3301      	adds	r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <HD44780_Puts+0xb8>)
 8001880:	715a      	strb	r2, [r3, #5]
		}
		str++;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1b8      	bne.n	8001802 <HD44780_Puts+0x1e>
	}
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200000c0 	.word	0x200000c0

080018a0 <HD44780_DisplayOn>:

void HD44780_DisplayOn(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	HD44780_Opts.DisplayControl |= HD44780_DISPLAYON;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HD44780_DisplayOn+0x28>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HD44780_DisplayOn+0x28>)
 80018b0:	701a      	strb	r2, [r3, #0]
	HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HD44780_DisplayOn+0x28>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	f043 0308 	orr.w	r3, r3, #8
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f81b 	bl	80018f8 <HD44780_Cmd>
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200000c0 	.word	0x200000c0

080018cc <HD44780_CursorOn>:
void HD44780_BlinkOff(void) {
	HD44780_Opts.DisplayControl &= ~HD44780_BLINKON;
	HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
}

void HD44780_CursorOn(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	HD44780_Opts.DisplayControl |= HD44780_CURSORON;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HD44780_CursorOn+0x28>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HD44780_CursorOn+0x28>)
 80018dc:	701a      	strb	r2, [r3, #0]
	HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HD44780_CursorOn+0x28>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 f805 	bl	80018f8 <HD44780_Cmd>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200000c0 	.word	0x200000c0

080018f8 <HD44780_Cmd>:
	HD44780_CursorSet(x, y);
	HD44780_Data(location);
}

/* Private functions */
static void HD44780_Cmd(uint8_t cmd) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
	/* Command mode */
	HD44780_RS_LOW;
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001908:	4809      	ldr	r0, [pc, #36]	; (8001930 <HD44780_Cmd+0x38>)
 800190a:	f001 ff35 	bl	8003778 <HAL_GPIO_WritePin>
	
	/* High nibble */
	HD44780_Cmd4bit(cmd >> 4);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	b2db      	uxtb	r3, r3
 8001914:	4618      	mov	r0, r3
 8001916:	f000 f82b 	bl	8001970 <HD44780_Cmd4bit>
	/* Low nibble */
	HD44780_Cmd4bit(cmd & 0x0F);
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f824 	bl	8001970 <HD44780_Cmd4bit>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40020000 	.word	0x40020000

08001934 <HD44780_Data>:

static void HD44780_Data(uint8_t data) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
	/* Data mode */
	HD44780_RS_HIGH;
 800193e:	2201      	movs	r2, #1
 8001940:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001944:	4809      	ldr	r0, [pc, #36]	; (800196c <HD44780_Data+0x38>)
 8001946:	f001 ff17 	bl	8003778 <HAL_GPIO_WritePin>
	
	/* High nibble */
	HD44780_Cmd4bit(data >> 4);
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	b2db      	uxtb	r3, r3
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f80d 	bl	8001970 <HD44780_Cmd4bit>
	/* Low nibble */
	HD44780_Cmd4bit(data & 0x0F);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 030f 	and.w	r3, r3, #15
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f806 	bl	8001970 <HD44780_Cmd4bit>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40020000 	.word	0x40020000

08001970 <HD44780_Cmd4bit>:

static void HD44780_Cmd4bit(uint8_t cmd) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
	/* Set output port */
	HAL_GPIO_WritePin(D7_LCD_GPIO_Port, D7_LCD_Pin, (cmd & 0x08));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	b2db      	uxtb	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001988:	4819      	ldr	r0, [pc, #100]	; (80019f0 <HD44780_Cmd4bit+0x80>)
 800198a:	f001 fef5 	bl	8003778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_LCD_GPIO_Port, D6_LCD_Pin, (cmd & 0x04));
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	b2db      	uxtb	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800199c:	4815      	ldr	r0, [pc, #84]	; (80019f4 <HD44780_Cmd4bit+0x84>)
 800199e:	f001 feeb 	bl	8003778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_LCD_GPIO_Port, D5_LCD_Pin, (cmd & 0x02));
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	461a      	mov	r2, r3
 80019ac:	2110      	movs	r1, #16
 80019ae:	4811      	ldr	r0, [pc, #68]	; (80019f4 <HD44780_Cmd4bit+0x84>)
 80019b0:	f001 fee2 	bl	8003778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LCD_GPIO_Port, D4_LCD_Pin, (cmd & 0x01));
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	2120      	movs	r1, #32
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <HD44780_Cmd4bit+0x84>)
 80019c2:	f001 fed9 	bl	8003778 <HAL_GPIO_WritePin>
	HD44780_E_BLINK;
 80019c6:	2201      	movs	r2, #1
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	480b      	ldr	r0, [pc, #44]	; (80019f8 <HD44780_Cmd4bit+0x88>)
 80019cc:	f001 fed4 	bl	8003778 <HAL_GPIO_WritePin>
 80019d0:	2001      	movs	r0, #1
 80019d2:	f000 fc1d 	bl	8002210 <HAL_Delay>
 80019d6:	2200      	movs	r2, #0
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	4807      	ldr	r0, [pc, #28]	; (80019f8 <HD44780_Cmd4bit+0x88>)
 80019dc:	f001 fecc 	bl	8003778 <HAL_GPIO_WritePin>
 80019e0:	2001      	movs	r0, #1
 80019e2:	f000 fc15 	bl	8002210 <HAL_Delay>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40020400 	.word	0x40020400
 80019f8:	40020800 	.word	0x40020800

080019fc <HD44780_CursorSet>:

void HD44780_CursorSet(uint8_t col, uint8_t row) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	460a      	mov	r2, r1
 8001a06:	71fb      	strb	r3, [r7, #7]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HD44780_CursorSet+0x58>)
 8001a0e:	60fb      	str	r3, [r7, #12]
	
	/* Go to beginning */
	if (row >= HD44780_Opts.Rows) {
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <HD44780_CursorSet+0x5c>)
 8001a12:	78db      	ldrb	r3, [r3, #3]
 8001a14:	79ba      	ldrb	r2, [r7, #6]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d301      	bcc.n	8001a1e <HD44780_CursorSet+0x22>
		row = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	71bb      	strb	r3, [r7, #6]
	}
	
	/* Set current column and row */
	HD44780_Opts.currentX = col;
 8001a1e:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <HD44780_CursorSet+0x5c>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	7153      	strb	r3, [r2, #5]
	HD44780_Opts.currentY = row;
 8001a24:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <HD44780_CursorSet+0x5c>)
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	7193      	strb	r3, [r2, #6]
	
	/* Set location address */
	HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 8001a2a:	79bb      	ldrb	r3, [r7, #6]
 8001a2c:	f107 0210 	add.w	r2, r7, #16
 8001a30:	4413      	add	r3, r2
 8001a32:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	4413      	add	r3, r2
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff56 	bl	80018f8 <HD44780_Cmd>
}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	54144000 	.word	0x54144000
 8001a58:	200000c0 	.word	0x200000c0

08001a5c <HD44780_InitPins>:

static void HD44780_InitPins(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

	/* Set pins low */
	HAL_GPIO_WritePin(RS_LCD_GPIO_Port, RS_LCD_Pin, GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a66:	4810      	ldr	r0, [pc, #64]	; (8001aa8 <HD44780_InitPins+0x4c>)
 8001a68:	f001 fe86 	bl	8003778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_LCD_GPIO_Port, E_LCD_Pin,GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	480e      	ldr	r0, [pc, #56]	; (8001aac <HD44780_InitPins+0x50>)
 8001a72:	f001 fe81 	bl	8003778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LCD_GPIO_Port, D4_LCD_Pin,GPIO_PIN_RESET);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2120      	movs	r1, #32
 8001a7a:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <HD44780_InitPins+0x54>)
 8001a7c:	f001 fe7c 	bl	8003778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_LCD_GPIO_Port, D5_LCD_Pin,GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2110      	movs	r1, #16
 8001a84:	480a      	ldr	r0, [pc, #40]	; (8001ab0 <HD44780_InitPins+0x54>)
 8001a86:	f001 fe77 	bl	8003778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_LCD_GPIO_Port, D6_LCD_Pin,GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a90:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <HD44780_InitPins+0x54>)
 8001a92:	f001 fe71 	bl	8003778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_LCD_GPIO_Port, D7_LCD_Pin,GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <HD44780_InitPins+0x4c>)
 8001a9e:	f001 fe6b 	bl	8003778 <HAL_GPIO_WritePin>
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	40020400 	.word	0x40020400

08001ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_MspInit+0x4c>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_MspInit+0x4c>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a2f      	ldr	r2, [pc, #188]	; (8001be0 <HAL_ADC_MspInit+0xdc>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d157      	bne.n	8001bd6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <HAL_ADC_MspInit+0xe0>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a2d      	ldr	r2, [pc, #180]	; (8001be4 <HAL_ADC_MspInit+0xe0>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <HAL_ADC_MspInit+0xe0>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <HAL_ADC_MspInit+0xe0>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a26      	ldr	r2, [pc, #152]	; (8001be4 <HAL_ADC_MspInit+0xe0>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_ADC_MspInit+0xe0>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b62:	2303      	movs	r3, #3
 8001b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	481d      	ldr	r0, [pc, #116]	; (8001be8 <HAL_ADC_MspInit+0xe4>)
 8001b72:	f001 fc7d 	bl	8003470 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_ADC_MspInit+0xe8>)
 8001b78:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_ADC_MspInit+0xec>)
 8001b7a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_ADC_MspInit+0xe8>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <HAL_ADC_MspInit+0xe8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_ADC_MspInit+0xe8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HAL_ADC_MspInit+0xe8>)
 8001b90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b94:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_ADC_MspInit+0xe8>)
 8001b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b9c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_ADC_MspInit+0xe8>)
 8001ba0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_ADC_MspInit+0xe8>)
 8001ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_ADC_MspInit+0xe8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_ADC_MspInit+0xe8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bba:	480c      	ldr	r0, [pc, #48]	; (8001bec <HAL_ADC_MspInit+0xe8>)
 8001bbc:	f001 f856 	bl	8002c6c <HAL_DMA_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001bc6:	f7ff fd9b 	bl	8001700 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_ADC_MspInit+0xe8>)
 8001bce:	639a      	str	r2, [r3, #56]	; 0x38
 8001bd0:	4a06      	ldr	r2, [pc, #24]	; (8001bec <HAL_ADC_MspInit+0xe8>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40012000 	.word	0x40012000
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000
 8001bec:	200002ec 	.word	0x200002ec
 8001bf0:	40026410 	.word	0x40026410

08001bf4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bfc:	f107 0308 	add.w	r3, r7, #8
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
 8001c0c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <HAL_RTC_MspInit+0x50>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d111      	bne.n	8001c3c <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c20:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c22:	f107 0308 	add.w	r3, r7, #8
 8001c26:	4618      	mov	r0, r3
 8001c28:	f002 fa3a 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001c32:	f7ff fd65 	bl	8001700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <HAL_RTC_MspInit+0x54>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40002800 	.word	0x40002800
 8001c48:	42470e3c 	.word	0x42470e3c

08001c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <HAL_SPI_MspInit+0xc0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d14a      	bne.n	8001d04 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a26      	ldr	r2, [pc, #152]	; (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a18      	ldr	r2, [pc, #96]	; (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cc2:	230c      	movs	r3, #12
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480d      	ldr	r0, [pc, #52]	; (8001d14 <HAL_SPI_MspInit+0xc8>)
 8001cde:	f001 fbc7 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cf4:	2305      	movs	r3, #5
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <HAL_SPI_MspInit+0xcc>)
 8001d00:	f001 fbb6 	bl	8003470 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40003800 	.word	0x40003800
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020400 	.word	0x40020400

08001d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2c:	d10d      	bne.n	8001d4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_TIM_Base_MspInit+0x3c>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <HAL_TIM_Base_MspInit+0x3c>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_TIM_Base_MspInit+0x3c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800

08001d5c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d12b      	bne.n	8001dd6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a17      	ldr	r2, [pc, #92]	; (8001de4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a10      	ldr	r2, [pc, #64]	; (8001de4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db6:	23c0      	movs	r3, #192	; 0xc0
 8001db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	; (8001de8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001dd2:	f001 fb4d 	bl	8003470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40000400 	.word	0x40000400
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020000 	.word	0x40020000

08001dec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <HAL_TIM_PWM_MspInit+0x3c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d10d      	bne.n	8001e1a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_TIM_PWM_MspInit+0x40>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <HAL_TIM_PWM_MspInit+0x40>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <HAL_TIM_PWM_MspInit+0x40>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40000800 	.word	0x40000800
 8001e2c:	40023800 	.word	0x40023800

08001e30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <HAL_TIM_MspPostInit+0x68>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d11d      	bne.n	8001e8e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_TIM_MspPostInit+0x6c>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <HAL_TIM_MspPostInit+0x6c>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_TIM_MspPostInit+0x6c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	4619      	mov	r1, r3
 8001e88:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <HAL_TIM_MspPostInit+0x70>)
 8001e8a:	f001 faf1 	bl	8003470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e8e:	bf00      	nop
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020400 	.word	0x40020400

08001ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a34      	ldr	r2, [pc, #208]	; (8001f94 <HAL_UART_MspInit+0xf0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d161      	bne.n	8001f8a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b33      	ldr	r3, [pc, #204]	; (8001f98 <HAL_UART_MspInit+0xf4>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a32      	ldr	r2, [pc, #200]	; (8001f98 <HAL_UART_MspInit+0xf4>)
 8001ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_UART_MspInit+0xf4>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <HAL_UART_MspInit+0xf4>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a2b      	ldr	r2, [pc, #172]	; (8001f98 <HAL_UART_MspInit+0xf4>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <HAL_UART_MspInit+0xf4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001efe:	230c      	movs	r3, #12
 8001f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f0e:	2307      	movs	r3, #7
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4619      	mov	r1, r3
 8001f18:	4820      	ldr	r0, [pc, #128]	; (8001f9c <HAL_UART_MspInit+0xf8>)
 8001f1a:	f001 faa9 	bl	8003470 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f20:	4a20      	ldr	r2, [pc, #128]	; (8001fa4 <HAL_UART_MspInit+0x100>)
 8001f22:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f2a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f2c:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f32:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f3e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f5e:	4810      	ldr	r0, [pc, #64]	; (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f60:	f000 fe84 	bl	8002c6c <HAL_DMA_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001f6a:	f7ff fbc9 	bl	8001700 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
 8001f74:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2026      	movs	r0, #38	; 0x26
 8001f80:	f000 fe3d 	bl	8002bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f84:	2026      	movs	r0, #38	; 0x26
 8001f86:	f000 fe56 	bl	8002c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3728      	adds	r7, #40	; 0x28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40004400 	.word	0x40004400
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	20000154 	.word	0x20000154
 8001fa4:	40026088 	.word	0x40026088

08001fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <NMI_Handler+0x4>

08001fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb2:	e7fe      	b.n	8001fb2 <HardFault_Handler+0x4>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <MemManage_Handler+0x4>

08001fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <BusFault_Handler+0x4>

08001fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <UsageFault_Handler+0x4>

08001fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff4:	f000 f8ec 	bl	80021d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <DMA1_Stream5_IRQHandler+0x10>)
 8002002:	f000 ffcb 	bl	8002f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000154 	.word	0x20000154

08002010 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002014:	2040      	movs	r0, #64	; 0x40
 8002016:	f001 fbe3 	bl	80037e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <USART2_IRQHandler+0x10>)
 8002026:	f004 f8f9 	bl	800621c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000394 	.word	0x20000394

08002034 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <DMA2_Stream0_IRQHandler+0x10>)
 800203a:	f000 ffaf 	bl	8002f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200002ec 	.word	0x200002ec

08002048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <_sbrk+0x5c>)
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <_sbrk+0x60>)
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <_sbrk+0x64>)
 8002066:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <_sbrk+0x68>)
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	429a      	cmp	r2, r3
 8002076:	d207      	bcs.n	8002088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002078:	f008 fd52 	bl	800ab20 <__errno>
 800207c:	4603      	mov	r3, r0
 800207e:	220c      	movs	r2, #12
 8002080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	e009      	b.n	800209c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	4a05      	ldr	r2, [pc, #20]	; (80020ac <_sbrk+0x64>)
 8002098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20020000 	.word	0x20020000
 80020a8:	00000400 	.word	0x00000400
 80020ac:	200000c8 	.word	0x200000c8
 80020b0:	20000860 	.word	0x20000860

080020b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <SystemInit+0x20>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <SystemInit+0x20>)
 80020c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020dc:	480d      	ldr	r0, [pc, #52]	; (8002114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020de:	490e      	ldr	r1, [pc, #56]	; (8002118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e4:	e002      	b.n	80020ec <LoopCopyDataInit>

080020e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ea:	3304      	adds	r3, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f0:	d3f9      	bcc.n	80020e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f2:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020f4:	4c0b      	ldr	r4, [pc, #44]	; (8002124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f8:	e001      	b.n	80020fe <LoopFillZerobss>

080020fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020fc:	3204      	adds	r2, #4

080020fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002100:	d3fb      	bcc.n	80020fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002102:	f7ff ffd7 	bl	80020b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002106:	f008 fd11 	bl	800ab2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210a:	f7fe fee3 	bl	8000ed4 <main>
  bx  lr    
 800210e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002118:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800211c:	0800b9e4 	.word	0x0800b9e4
  ldr r2, =_sbss
 8002120:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002124:	20000860 	.word	0x20000860

08002128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC_IRQHandler>
	...

0800212c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0d      	ldr	r2, [pc, #52]	; (800216c <HAL_Init+0x40>)
 8002136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <HAL_Init+0x40>)
 8002142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <HAL_Init+0x40>)
 800214e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002154:	2003      	movs	r0, #3
 8002156:	f000 fd47 	bl	8002be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215a:	200f      	movs	r0, #15
 800215c:	f000 f808 	bl	8002170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002160:	f7ff fca8 	bl	8001ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023c00 	.word	0x40023c00

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_InitTick+0x54>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x58>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002186:	fbb3 f3f1 	udiv	r3, r3, r1
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fd5f 	bl	8002c52 <HAL_SYSTICK_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e00e      	b.n	80021bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d80a      	bhi.n	80021ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f000 fd27 	bl	8002bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b0:	4a06      	ldr	r2, [pc, #24]	; (80021cc <HAL_InitTick+0x5c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000018 	.word	0x20000018
 80021c8:	20000020 	.word	0x20000020
 80021cc:	2000001c 	.word	0x2000001c

080021d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_IncTick+0x20>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_IncTick+0x24>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_IncTick+0x24>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000020 	.word	0x20000020
 80021f4:	200003d8 	.word	0x200003d8

080021f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_GetTick+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	200003d8 	.word	0x200003d8

08002210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002218:	f7ff ffee 	bl	80021f8 <HAL_GetTick>
 800221c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d005      	beq.n	8002236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_Delay+0x44>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002236:	bf00      	nop
 8002238:	f7ff ffde 	bl	80021f8 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	d8f7      	bhi.n	8002238 <HAL_Delay+0x28>
  {
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000020 	.word	0x20000020

08002258 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e033      	b.n	80022d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fc44 	bl	8001b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b00      	cmp	r3, #0
 8002294:	d118      	bne.n	80022c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800229e:	f023 0302 	bic.w	r3, r3, #2
 80022a2:	f043 0202 	orr.w	r2, r3, #2
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fa4e 	bl	800274c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f023 0303 	bic.w	r3, r3, #3
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
 80022c6:	e001      	b.n	80022cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_Start_DMA+0x1e>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e0ce      	b.n	800249c <HAL_ADC_Start_DMA+0x1bc>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d018      	beq.n	8002346 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002324:	4b5f      	ldr	r3, [pc, #380]	; (80024a4 <HAL_ADC_Start_DMA+0x1c4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a5f      	ldr	r2, [pc, #380]	; (80024a8 <HAL_ADC_Start_DMA+0x1c8>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0c9a      	lsrs	r2, r3, #18
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002338:	e002      	b.n	8002340 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	3b01      	subs	r3, #1
 800233e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f9      	bne.n	800233a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002354:	d107      	bne.n	8002366 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002364:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	f040 8086 	bne.w	8002482 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b4:	d106      	bne.n	80023c4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f023 0206 	bic.w	r2, r3, #6
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
 80023c2:	e002      	b.n	80023ca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023d2:	4b36      	ldr	r3, [pc, #216]	; (80024ac <HAL_ADC_Start_DMA+0x1cc>)
 80023d4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <HAL_ADC_Start_DMA+0x1d0>)
 80023dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	4a34      	ldr	r2, [pc, #208]	; (80024b4 <HAL_ADC_Start_DMA+0x1d4>)
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	4a33      	ldr	r2, [pc, #204]	; (80024b8 <HAL_ADC_Start_DMA+0x1d8>)
 80023ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002406:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002416:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	334c      	adds	r3, #76	; 0x4c
 8002422:	4619      	mov	r1, r3
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f000 fcce 	bl	8002dc8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10f      	bne.n	8002458 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d129      	bne.n	800249a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	e020      	b.n	800249a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_ADC_Start_DMA+0x1dc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d11b      	bne.n	800249a <HAL_ADC_Start_DMA+0x1ba>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d114      	bne.n	800249a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	e00b      	b.n	800249a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f043 0210 	orr.w	r2, r3, #16
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000018 	.word	0x20000018
 80024a8:	431bde83 	.word	0x431bde83
 80024ac:	40012300 	.word	0x40012300
 80024b0:	08002945 	.word	0x08002945
 80024b4:	080029ff 	.word	0x080029ff
 80024b8:	08002a1b 	.word	0x08002a1b
 80024bc:	40012000 	.word	0x40012000

080024c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x1c>
 8002500:	2302      	movs	r3, #2
 8002502:	e113      	b.n	800272c <HAL_ADC_ConfigChannel+0x244>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b09      	cmp	r3, #9
 8002512:	d925      	bls.n	8002560 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68d9      	ldr	r1, [r3, #12]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	b29b      	uxth	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	3b1e      	subs	r3, #30
 800252a:	2207      	movs	r2, #7
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43da      	mvns	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	400a      	ands	r2, r1
 8002538:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68d9      	ldr	r1, [r3, #12]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	b29b      	uxth	r3, r3
 800254a:	4618      	mov	r0, r3
 800254c:	4603      	mov	r3, r0
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4403      	add	r3, r0
 8002552:	3b1e      	subs	r3, #30
 8002554:	409a      	lsls	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	e022      	b.n	80025a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6919      	ldr	r1, [r3, #16]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	2207      	movs	r2, #7
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43da      	mvns	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	400a      	ands	r2, r1
 8002582:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6919      	ldr	r1, [r3, #16]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	b29b      	uxth	r3, r3
 8002594:	4618      	mov	r0, r3
 8002596:	4603      	mov	r3, r0
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4403      	add	r3, r0
 800259c:	409a      	lsls	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d824      	bhi.n	80025f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	3b05      	subs	r3, #5
 80025c0:	221f      	movs	r2, #31
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	400a      	ands	r2, r1
 80025ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	4618      	mov	r0, r3
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	3b05      	subs	r3, #5
 80025ea:	fa00 f203 	lsl.w	r2, r0, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	635a      	str	r2, [r3, #52]	; 0x34
 80025f6:	e04c      	b.n	8002692 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b0c      	cmp	r3, #12
 80025fe:	d824      	bhi.n	800264a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	3b23      	subs	r3, #35	; 0x23
 8002612:	221f      	movs	r2, #31
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43da      	mvns	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	400a      	ands	r2, r1
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	b29b      	uxth	r3, r3
 800262e:	4618      	mov	r0, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	3b23      	subs	r3, #35	; 0x23
 800263c:	fa00 f203 	lsl.w	r2, r0, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
 8002648:	e023      	b.n	8002692 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	3b41      	subs	r3, #65	; 0x41
 800265c:	221f      	movs	r2, #31
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	400a      	ands	r2, r1
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	4618      	mov	r0, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	3b41      	subs	r3, #65	; 0x41
 8002686:	fa00 f203 	lsl.w	r2, r0, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002692:	4b29      	ldr	r3, [pc, #164]	; (8002738 <HAL_ADC_ConfigChannel+0x250>)
 8002694:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a28      	ldr	r2, [pc, #160]	; (800273c <HAL_ADC_ConfigChannel+0x254>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d10f      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1d8>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b12      	cmp	r3, #18
 80026a6:	d10b      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1d      	ldr	r2, [pc, #116]	; (800273c <HAL_ADC_ConfigChannel+0x254>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d12b      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x23a>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <HAL_ADC_ConfigChannel+0x258>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d003      	beq.n	80026dc <HAL_ADC_ConfigChannel+0x1f4>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b11      	cmp	r3, #17
 80026da:	d122      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a11      	ldr	r2, [pc, #68]	; (8002740 <HAL_ADC_ConfigChannel+0x258>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d111      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026fe:	4b11      	ldr	r3, [pc, #68]	; (8002744 <HAL_ADC_ConfigChannel+0x25c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a11      	ldr	r2, [pc, #68]	; (8002748 <HAL_ADC_ConfigChannel+0x260>)
 8002704:	fba2 2303 	umull	r2, r3, r2, r3
 8002708:	0c9a      	lsrs	r2, r3, #18
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002714:	e002      	b.n	800271c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	3b01      	subs	r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f9      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40012300 	.word	0x40012300
 800273c:	40012000 	.word	0x40012000
 8002740:	10000012 	.word	0x10000012
 8002744:	20000018 	.word	0x20000018
 8002748:	431bde83 	.word	0x431bde83

0800274c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002754:	4b79      	ldr	r3, [pc, #484]	; (800293c <ADC_Init+0x1f0>)
 8002756:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	431a      	orrs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002780:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	021a      	lsls	r2, r3, #8
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6899      	ldr	r1, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	4a58      	ldr	r2, [pc, #352]	; (8002940 <ADC_Init+0x1f4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d022      	beq.n	800282a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6899      	ldr	r1, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002814:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6899      	ldr	r1, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	e00f      	b.n	800284a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002838:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002848:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0202 	bic.w	r2, r2, #2
 8002858:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6899      	ldr	r1, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7e1b      	ldrb	r3, [r3, #24]
 8002864:	005a      	lsls	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01b      	beq.n	80028b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002886:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002896:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	3b01      	subs	r3, #1
 80028a4:	035a      	lsls	r2, r3, #13
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	e007      	b.n	80028c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	3b01      	subs	r3, #1
 80028dc:	051a      	lsls	r2, r3, #20
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6899      	ldr	r1, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002902:	025a      	lsls	r2, r3, #9
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6899      	ldr	r1, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	029a      	lsls	r2, r3, #10
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	40012300 	.word	0x40012300
 8002940:	0f000001 	.word	0x0f000001

08002944 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800295a:	2b00      	cmp	r3, #0
 800295c:	d13c      	bne.n	80029d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d12b      	bne.n	80029d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800297c:	2b00      	cmp	r3, #0
 800297e:	d127      	bne.n	80029d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002998:	2b00      	cmp	r3, #0
 800299a:	d119      	bne.n	80029d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0220 	bic.w	r2, r2, #32
 80029aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7fe fe59 	bl	8001688 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029d6:	e00e      	b.n	80029f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7ff fd75 	bl	80024d4 <HAL_ADC_ErrorCallback>
}
 80029ea:	e004      	b.n	80029f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f7ff fd57 	bl	80024c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2240      	movs	r2, #64	; 0x40
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f043 0204 	orr.w	r2, r3, #4
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff fd4a 	bl	80024d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a64:	4013      	ands	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7a:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	60d3      	str	r3, [r2, #12]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	f003 0307 	and.w	r3, r3, #7
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	db0b      	blt.n	8002ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	f003 021f 	and.w	r2, r3, #31
 8002ac4:	4907      	ldr	r1, [pc, #28]	; (8002ae4 <__NVIC_EnableIRQ+0x38>)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2001      	movs	r0, #1
 8002ace:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000e100 	.word	0xe000e100

08002ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	db0a      	blt.n	8002b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	490c      	ldr	r1, [pc, #48]	; (8002b34 <__NVIC_SetPriority+0x4c>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	0112      	lsls	r2, r2, #4
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b10:	e00a      	b.n	8002b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	4908      	ldr	r1, [pc, #32]	; (8002b38 <__NVIC_SetPriority+0x50>)
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	3b04      	subs	r3, #4
 8002b20:	0112      	lsls	r2, r2, #4
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	440b      	add	r3, r1
 8002b26:	761a      	strb	r2, [r3, #24]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000e100 	.word	0xe000e100
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b089      	sub	sp, #36	; 0x24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f1c3 0307 	rsb	r3, r3, #7
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	bf28      	it	cs
 8002b5a:	2304      	movcs	r3, #4
 8002b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3304      	adds	r3, #4
 8002b62:	2b06      	cmp	r3, #6
 8002b64:	d902      	bls.n	8002b6c <NVIC_EncodePriority+0x30>
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3b03      	subs	r3, #3
 8002b6a:	e000      	b.n	8002b6e <NVIC_EncodePriority+0x32>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	f04f 32ff 	mov.w	r2, #4294967295
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	401a      	ands	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b84:	f04f 31ff 	mov.w	r1, #4294967295
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43d9      	mvns	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	4313      	orrs	r3, r2
         );
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3724      	adds	r7, #36	; 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb4:	d301      	bcc.n	8002bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00f      	b.n	8002bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <SysTick_Config+0x40>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc2:	210f      	movs	r1, #15
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	f7ff ff8e 	bl	8002ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <SysTick_Config+0x40>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <SysTick_Config+0x40>)
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	e000e010 	.word	0xe000e010

08002be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff29 	bl	8002a48 <__NVIC_SetPriorityGrouping>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c10:	f7ff ff3e 	bl	8002a90 <__NVIC_GetPriorityGrouping>
 8002c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	6978      	ldr	r0, [r7, #20]
 8002c1c:	f7ff ff8e 	bl	8002b3c <NVIC_EncodePriority>
 8002c20:	4602      	mov	r2, r0
 8002c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff5d 	bl	8002ae8 <__NVIC_SetPriority>
}
 8002c2e:	bf00      	nop
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff31 	bl	8002aac <__NVIC_EnableIRQ>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ffa2 	bl	8002ba4 <SysTick_Config>
 8002c60:	4603      	mov	r3, r0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c78:	f7ff fabe 	bl	80021f8 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e099      	b.n	8002dbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca8:	e00f      	b.n	8002cca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002caa:	f7ff faa5 	bl	80021f8 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b05      	cmp	r3, #5
 8002cb6:	d908      	bls.n	8002cca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e078      	b.n	8002dbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1e8      	bne.n	8002caa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4b38      	ldr	r3, [pc, #224]	; (8002dc4 <HAL_DMA_Init+0x158>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d107      	bne.n	8002d34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f023 0307 	bic.w	r3, r3, #7
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d117      	bne.n	8002d8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fb01 	bl	8003378 <DMA_CheckFifoParam>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2240      	movs	r2, #64	; 0x40
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e016      	b.n	8002dbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fab8 	bl	800330c <DMA_CalcBaseAndBitshift>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	223f      	movs	r2, #63	; 0x3f
 8002da6:	409a      	lsls	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	f010803f 	.word	0xf010803f

08002dc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_DMA_Start_IT+0x26>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e040      	b.n	8002e70 <HAL_DMA_Start_IT+0xa8>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d12f      	bne.n	8002e62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2202      	movs	r2, #2
 8002e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fa4a 	bl	80032b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e20:	223f      	movs	r2, #63	; 0x3f
 8002e22:	409a      	lsls	r2, r3
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0216 	orr.w	r2, r2, #22
 8002e36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0208 	orr.w	r2, r2, #8
 8002e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e005      	b.n	8002e6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e86:	f7ff f9b7 	bl	80021f8 <HAL_GetTick>
 8002e8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d008      	beq.n	8002eaa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e052      	b.n	8002f50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0216 	bic.w	r2, r2, #22
 8002eb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d103      	bne.n	8002eda <HAL_DMA_Abort+0x62>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0208 	bic.w	r2, r2, #8
 8002ee8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002efa:	e013      	b.n	8002f24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002efc:	f7ff f97c 	bl	80021f8 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d90c      	bls.n	8002f24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2203      	movs	r2, #3
 8002f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e015      	b.n	8002f50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e4      	bne.n	8002efc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	223f      	movs	r2, #63	; 0x3f
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d004      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2280      	movs	r2, #128	; 0x80
 8002f70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00c      	b.n	8002f90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2205      	movs	r2, #5
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0201 	bic.w	r2, r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fa8:	4b92      	ldr	r3, [pc, #584]	; (80031f4 <HAL_DMA_IRQHandler+0x258>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a92      	ldr	r2, [pc, #584]	; (80031f8 <HAL_DMA_IRQHandler+0x25c>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0a9b      	lsrs	r3, r3, #10
 8002fb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	2208      	movs	r2, #8
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d01a      	beq.n	8003008 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0204 	bic.w	r2, r2, #4
 8002fee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	2201      	movs	r2, #1
 800300e:	409a      	lsls	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d012      	beq.n	800303e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302a:	2201      	movs	r2, #1
 800302c:	409a      	lsls	r2, r3
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	f043 0202 	orr.w	r2, r3, #2
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003042:	2204      	movs	r2, #4
 8003044:	409a      	lsls	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d012      	beq.n	8003074 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003060:	2204      	movs	r2, #4
 8003062:	409a      	lsls	r2, r3
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	f043 0204 	orr.w	r2, r3, #4
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	2210      	movs	r2, #16
 800307a:	409a      	lsls	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d043      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d03c      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	2210      	movs	r2, #16
 8003098:	409a      	lsls	r2, r3
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d018      	beq.n	80030de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d108      	bne.n	80030cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d024      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4798      	blx	r3
 80030ca:	e01f      	b.n	800310c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01b      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
 80030dc:	e016      	b.n	800310c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d107      	bne.n	80030fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0208 	bic.w	r2, r2, #8
 80030fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003110:	2220      	movs	r2, #32
 8003112:	409a      	lsls	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 808e 	beq.w	800323a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8086 	beq.w	800323a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	2220      	movs	r2, #32
 8003134:	409a      	lsls	r2, r3
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b05      	cmp	r3, #5
 8003144:	d136      	bne.n	80031b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0216 	bic.w	r2, r2, #22
 8003154:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003164:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_DMA_IRQHandler+0x1da>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0208 	bic.w	r2, r2, #8
 8003184:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	223f      	movs	r2, #63	; 0x3f
 800318c:	409a      	lsls	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d07d      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4798      	blx	r3
        }
        return;
 80031b2:	e078      	b.n	80032a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01c      	beq.n	80031fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d108      	bne.n	80031e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d030      	beq.n	800323a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
 80031e0:	e02b      	b.n	800323a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d027      	beq.n	800323a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
 80031f2:	e022      	b.n	800323a <HAL_DMA_IRQHandler+0x29e>
 80031f4:	20000018 	.word	0x20000018
 80031f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10f      	bne.n	800322a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0210 	bic.w	r2, r2, #16
 8003218:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	2b00      	cmp	r3, #0
 8003240:	d032      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d022      	beq.n	8003294 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2205      	movs	r2, #5
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3301      	adds	r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	429a      	cmp	r2, r3
 8003270:	d307      	bcc.n	8003282 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f2      	bne.n	8003266 <HAL_DMA_IRQHandler+0x2ca>
 8003280:	e000      	b.n	8003284 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003282:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4798      	blx	r3
 80032a4:	e000      	b.n	80032a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80032a6:	bf00      	nop
    }
  }
}
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop

080032b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b40      	cmp	r3, #64	; 0x40
 80032dc:	d108      	bne.n	80032f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032ee:	e007      	b.n	8003300 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	3b10      	subs	r3, #16
 800331c:	4a14      	ldr	r2, [pc, #80]	; (8003370 <DMA_CalcBaseAndBitshift+0x64>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003326:	4a13      	ldr	r2, [pc, #76]	; (8003374 <DMA_CalcBaseAndBitshift+0x68>)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4413      	add	r3, r2
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b03      	cmp	r3, #3
 8003338:	d909      	bls.n	800334e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003342:	f023 0303 	bic.w	r3, r3, #3
 8003346:	1d1a      	adds	r2, r3, #4
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	659a      	str	r2, [r3, #88]	; 0x58
 800334c:	e007      	b.n	800335e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003356:	f023 0303 	bic.w	r3, r3, #3
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	aaaaaaab 	.word	0xaaaaaaab
 8003374:	0800b558 	.word	0x0800b558

08003378 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d11f      	bne.n	80033d2 <DMA_CheckFifoParam+0x5a>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b03      	cmp	r3, #3
 8003396:	d856      	bhi.n	8003446 <DMA_CheckFifoParam+0xce>
 8003398:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <DMA_CheckFifoParam+0x28>)
 800339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339e:	bf00      	nop
 80033a0:	080033b1 	.word	0x080033b1
 80033a4:	080033c3 	.word	0x080033c3
 80033a8:	080033b1 	.word	0x080033b1
 80033ac:	08003447 	.word	0x08003447
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d046      	beq.n	800344a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c0:	e043      	b.n	800344a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033ca:	d140      	bne.n	800344e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d0:	e03d      	b.n	800344e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033da:	d121      	bne.n	8003420 <DMA_CheckFifoParam+0xa8>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d837      	bhi.n	8003452 <DMA_CheckFifoParam+0xda>
 80033e2:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <DMA_CheckFifoParam+0x70>)
 80033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e8:	080033f9 	.word	0x080033f9
 80033ec:	080033ff 	.word	0x080033ff
 80033f0:	080033f9 	.word	0x080033f9
 80033f4:	08003411 	.word	0x08003411
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
      break;
 80033fc:	e030      	b.n	8003460 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d025      	beq.n	8003456 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800340e:	e022      	b.n	8003456 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003418:	d11f      	bne.n	800345a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800341e:	e01c      	b.n	800345a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d903      	bls.n	800342e <DMA_CheckFifoParam+0xb6>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d003      	beq.n	8003434 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800342c:	e018      	b.n	8003460 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
      break;
 8003432:	e015      	b.n	8003460 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00e      	beq.n	800345e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
      break;
 8003444:	e00b      	b.n	800345e <DMA_CheckFifoParam+0xe6>
      break;
 8003446:	bf00      	nop
 8003448:	e00a      	b.n	8003460 <DMA_CheckFifoParam+0xe8>
      break;
 800344a:	bf00      	nop
 800344c:	e008      	b.n	8003460 <DMA_CheckFifoParam+0xe8>
      break;
 800344e:	bf00      	nop
 8003450:	e006      	b.n	8003460 <DMA_CheckFifoParam+0xe8>
      break;
 8003452:	bf00      	nop
 8003454:	e004      	b.n	8003460 <DMA_CheckFifoParam+0xe8>
      break;
 8003456:	bf00      	nop
 8003458:	e002      	b.n	8003460 <DMA_CheckFifoParam+0xe8>
      break;   
 800345a:	bf00      	nop
 800345c:	e000      	b.n	8003460 <DMA_CheckFifoParam+0xe8>
      break;
 800345e:	bf00      	nop
    }
  } 
  
  return status; 
 8003460:	7bfb      	ldrb	r3, [r7, #15]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop

08003470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003470:	b480      	push	{r7}
 8003472:	b089      	sub	sp, #36	; 0x24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003482:	2300      	movs	r3, #0
 8003484:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	e159      	b.n	8003740 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800348c:	2201      	movs	r2, #1
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4013      	ands	r3, r2
 800349e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	f040 8148 	bne.w	800373a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d005      	beq.n	80034c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d130      	bne.n	8003524 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	2203      	movs	r2, #3
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034f8:	2201      	movs	r2, #1
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 0201 	and.w	r2, r3, #1
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	2b03      	cmp	r3, #3
 800352e:	d017      	beq.n	8003560 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	2203      	movs	r2, #3
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d123      	bne.n	80035b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	08da      	lsrs	r2, r3, #3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3208      	adds	r2, #8
 8003574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	220f      	movs	r2, #15
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	08da      	lsrs	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3208      	adds	r2, #8
 80035ae:	69b9      	ldr	r1, [r7, #24]
 80035b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	2203      	movs	r2, #3
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0203 	and.w	r2, r3, #3
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a2 	beq.w	800373a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	4b57      	ldr	r3, [pc, #348]	; (8003758 <HAL_GPIO_Init+0x2e8>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	4a56      	ldr	r2, [pc, #344]	; (8003758 <HAL_GPIO_Init+0x2e8>)
 8003600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003604:	6453      	str	r3, [r2, #68]	; 0x44
 8003606:	4b54      	ldr	r3, [pc, #336]	; (8003758 <HAL_GPIO_Init+0x2e8>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003612:	4a52      	ldr	r2, [pc, #328]	; (800375c <HAL_GPIO_Init+0x2ec>)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	089b      	lsrs	r3, r3, #2
 8003618:	3302      	adds	r3, #2
 800361a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	220f      	movs	r2, #15
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a49      	ldr	r2, [pc, #292]	; (8003760 <HAL_GPIO_Init+0x2f0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d019      	beq.n	8003672 <HAL_GPIO_Init+0x202>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a48      	ldr	r2, [pc, #288]	; (8003764 <HAL_GPIO_Init+0x2f4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <HAL_GPIO_Init+0x1fe>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a47      	ldr	r2, [pc, #284]	; (8003768 <HAL_GPIO_Init+0x2f8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00d      	beq.n	800366a <HAL_GPIO_Init+0x1fa>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a46      	ldr	r2, [pc, #280]	; (800376c <HAL_GPIO_Init+0x2fc>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d007      	beq.n	8003666 <HAL_GPIO_Init+0x1f6>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a45      	ldr	r2, [pc, #276]	; (8003770 <HAL_GPIO_Init+0x300>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_GPIO_Init+0x1f2>
 800365e:	2304      	movs	r3, #4
 8003660:	e008      	b.n	8003674 <HAL_GPIO_Init+0x204>
 8003662:	2307      	movs	r3, #7
 8003664:	e006      	b.n	8003674 <HAL_GPIO_Init+0x204>
 8003666:	2303      	movs	r3, #3
 8003668:	e004      	b.n	8003674 <HAL_GPIO_Init+0x204>
 800366a:	2302      	movs	r3, #2
 800366c:	e002      	b.n	8003674 <HAL_GPIO_Init+0x204>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_GPIO_Init+0x204>
 8003672:	2300      	movs	r3, #0
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	f002 0203 	and.w	r2, r2, #3
 800367a:	0092      	lsls	r2, r2, #2
 800367c:	4093      	lsls	r3, r2
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003684:	4935      	ldr	r1, [pc, #212]	; (800375c <HAL_GPIO_Init+0x2ec>)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	089b      	lsrs	r3, r3, #2
 800368a:	3302      	adds	r3, #2
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003692:	4b38      	ldr	r3, [pc, #224]	; (8003774 <HAL_GPIO_Init+0x304>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036b6:	4a2f      	ldr	r2, [pc, #188]	; (8003774 <HAL_GPIO_Init+0x304>)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036bc:	4b2d      	ldr	r3, [pc, #180]	; (8003774 <HAL_GPIO_Init+0x304>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036e0:	4a24      	ldr	r2, [pc, #144]	; (8003774 <HAL_GPIO_Init+0x304>)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036e6:	4b23      	ldr	r3, [pc, #140]	; (8003774 <HAL_GPIO_Init+0x304>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	43db      	mvns	r3, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4013      	ands	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800370a:	4a1a      	ldr	r2, [pc, #104]	; (8003774 <HAL_GPIO_Init+0x304>)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003710:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HAL_GPIO_Init+0x304>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003734:	4a0f      	ldr	r2, [pc, #60]	; (8003774 <HAL_GPIO_Init+0x304>)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	3301      	adds	r3, #1
 800373e:	61fb      	str	r3, [r7, #28]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	2b0f      	cmp	r3, #15
 8003744:	f67f aea2 	bls.w	800348c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	3724      	adds	r7, #36	; 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800
 800375c:	40013800 	.word	0x40013800
 8003760:	40020000 	.word	0x40020000
 8003764:	40020400 	.word	0x40020400
 8003768:	40020800 	.word	0x40020800
 800376c:	40020c00 	.word	0x40020c00
 8003770:	40021000 	.word	0x40021000
 8003774:	40013c00 	.word	0x40013c00

08003778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	807b      	strh	r3, [r7, #2]
 8003784:	4613      	mov	r3, r2
 8003786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003788:	787b      	ldrb	r3, [r7, #1]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800378e:	887a      	ldrh	r2, [r7, #2]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003794:	e003      	b.n	800379e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003796:	887b      	ldrh	r3, [r7, #2]
 8003798:	041a      	lsls	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	619a      	str	r2, [r3, #24]
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b085      	sub	sp, #20
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	460b      	mov	r3, r1
 80037b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037bc:	887a      	ldrh	r2, [r7, #2]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4013      	ands	r3, r2
 80037c2:	041a      	lsls	r2, r3, #16
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	43d9      	mvns	r1, r3
 80037c8:	887b      	ldrh	r3, [r7, #2]
 80037ca:	400b      	ands	r3, r1
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	619a      	str	r2, [r3, #24]
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d006      	beq.n	8003804 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037f6:	4a05      	ldr	r2, [pc, #20]	; (800380c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd ff6e 	bl	80016e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40013c00 	.word	0x40013c00

08003810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e264      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d075      	beq.n	800391a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800382e:	4ba3      	ldr	r3, [pc, #652]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b04      	cmp	r3, #4
 8003838:	d00c      	beq.n	8003854 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800383a:	4ba0      	ldr	r3, [pc, #640]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003842:	2b08      	cmp	r3, #8
 8003844:	d112      	bne.n	800386c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003846:	4b9d      	ldr	r3, [pc, #628]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003852:	d10b      	bne.n	800386c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	4b99      	ldr	r3, [pc, #612]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d05b      	beq.n	8003918 <HAL_RCC_OscConfig+0x108>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d157      	bne.n	8003918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e23f      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003874:	d106      	bne.n	8003884 <HAL_RCC_OscConfig+0x74>
 8003876:	4b91      	ldr	r3, [pc, #580]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a90      	ldr	r2, [pc, #576]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e01d      	b.n	80038c0 <HAL_RCC_OscConfig+0xb0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x98>
 800388e:	4b8b      	ldr	r3, [pc, #556]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a8a      	ldr	r2, [pc, #552]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b88      	ldr	r3, [pc, #544]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a87      	ldr	r2, [pc, #540]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e00b      	b.n	80038c0 <HAL_RCC_OscConfig+0xb0>
 80038a8:	4b84      	ldr	r3, [pc, #528]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a83      	ldr	r2, [pc, #524]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	4b81      	ldr	r3, [pc, #516]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a80      	ldr	r2, [pc, #512]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fe fc96 	bl	80021f8 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d0:	f7fe fc92 	bl	80021f8 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	; 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e204      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	4b76      	ldr	r3, [pc, #472]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0xc0>
 80038ee:	e014      	b.n	800391a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe fc82 	bl	80021f8 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe fc7e 	bl	80021f8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	; 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e1f0      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390a:	4b6c      	ldr	r3, [pc, #432]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0xe8>
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d063      	beq.n	80039ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003926:	4b65      	ldr	r3, [pc, #404]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003932:	4b62      	ldr	r3, [pc, #392]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800393a:	2b08      	cmp	r3, #8
 800393c:	d11c      	bne.n	8003978 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393e:	4b5f      	ldr	r3, [pc, #380]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d116      	bne.n	8003978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394a:	4b5c      	ldr	r3, [pc, #368]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_RCC_OscConfig+0x152>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d001      	beq.n	8003962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e1c4      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003962:	4b56      	ldr	r3, [pc, #344]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4952      	ldr	r1, [pc, #328]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003976:	e03a      	b.n	80039ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d020      	beq.n	80039c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003980:	4b4f      	ldr	r3, [pc, #316]	; (8003ac0 <HAL_RCC_OscConfig+0x2b0>)
 8003982:	2201      	movs	r2, #1
 8003984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fe fc37 	bl	80021f8 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398e:	f7fe fc33 	bl	80021f8 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e1a5      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a0:	4b46      	ldr	r3, [pc, #280]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ac:	4b43      	ldr	r3, [pc, #268]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4940      	ldr	r1, [pc, #256]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	600b      	str	r3, [r1, #0]
 80039c0:	e015      	b.n	80039ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c2:	4b3f      	ldr	r3, [pc, #252]	; (8003ac0 <HAL_RCC_OscConfig+0x2b0>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fe fc16 	bl	80021f8 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d0:	f7fe fc12 	bl	80021f8 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e184      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e2:	4b36      	ldr	r3, [pc, #216]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d030      	beq.n	8003a5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d016      	beq.n	8003a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a02:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <HAL_RCC_OscConfig+0x2b4>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fe fbf6 	bl	80021f8 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a10:	f7fe fbf2 	bl	80021f8 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e164      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a22:	4b26      	ldr	r3, [pc, #152]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x200>
 8003a2e:	e015      	b.n	8003a5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a30:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_RCC_OscConfig+0x2b4>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a36:	f7fe fbdf 	bl	80021f8 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3e:	f7fe fbdb 	bl	80021f8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e14d      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f0      	bne.n	8003a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80a0 	beq.w	8003baa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6e:	4b13      	ldr	r3, [pc, #76]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10f      	bne.n	8003a9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a88:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a96:	2301      	movs	r3, #1
 8003a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_OscConfig+0x2b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d121      	bne.n	8003aea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <HAL_RCC_OscConfig+0x2b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <HAL_RCC_OscConfig+0x2b8>)
 8003aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab2:	f7fe fba1 	bl	80021f8 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab8:	e011      	b.n	8003ade <HAL_RCC_OscConfig+0x2ce>
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	42470000 	.word	0x42470000
 8003ac4:	42470e80 	.word	0x42470e80
 8003ac8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003acc:	f7fe fb94 	bl	80021f8 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e106      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b85      	ldr	r3, [pc, #532]	; (8003cf4 <HAL_RCC_OscConfig+0x4e4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d106      	bne.n	8003b00 <HAL_RCC_OscConfig+0x2f0>
 8003af2:	4b81      	ldr	r3, [pc, #516]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	4a80      	ldr	r2, [pc, #512]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	6713      	str	r3, [r2, #112]	; 0x70
 8003afe:	e01c      	b.n	8003b3a <HAL_RCC_OscConfig+0x32a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d10c      	bne.n	8003b22 <HAL_RCC_OscConfig+0x312>
 8003b08:	4b7b      	ldr	r3, [pc, #492]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a7a      	ldr	r2, [pc, #488]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
 8003b14:	4b78      	ldr	r3, [pc, #480]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4a77      	ldr	r2, [pc, #476]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b20:	e00b      	b.n	8003b3a <HAL_RCC_OscConfig+0x32a>
 8003b22:	4b75      	ldr	r3, [pc, #468]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a74      	ldr	r2, [pc, #464]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	4b72      	ldr	r3, [pc, #456]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a71      	ldr	r2, [pc, #452]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b42:	f7fe fb59 	bl	80021f8 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fe fb55 	bl	80021f8 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e0c5      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b60:	4b65      	ldr	r3, [pc, #404]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ee      	beq.n	8003b4a <HAL_RCC_OscConfig+0x33a>
 8003b6c:	e014      	b.n	8003b98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6e:	f7fe fb43 	bl	80021f8 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fe fb3f 	bl	80021f8 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e0af      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8c:	4b5a      	ldr	r3, [pc, #360]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ee      	bne.n	8003b76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9e:	4b56      	ldr	r3, [pc, #344]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a55      	ldr	r2, [pc, #340]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 809b 	beq.w	8003cea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bb4:	4b50      	ldr	r3, [pc, #320]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d05c      	beq.n	8003c7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d141      	bne.n	8003c4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc8:	4b4c      	ldr	r3, [pc, #304]	; (8003cfc <HAL_RCC_OscConfig+0x4ec>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fe fb13 	bl	80021f8 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fe fb0f 	bl	80021f8 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e081      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be8:	4b43      	ldr	r3, [pc, #268]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	019b      	lsls	r3, r3, #6
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	041b      	lsls	r3, r3, #16
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	061b      	lsls	r3, r3, #24
 8003c18:	4937      	ldr	r1, [pc, #220]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c1e:	4b37      	ldr	r3, [pc, #220]	; (8003cfc <HAL_RCC_OscConfig+0x4ec>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c24:	f7fe fae8 	bl	80021f8 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2c:	f7fe fae4 	bl	80021f8 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e056      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	4b2e      	ldr	r3, [pc, #184]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x41c>
 8003c4a:	e04e      	b.n	8003cea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <HAL_RCC_OscConfig+0x4ec>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c52:	f7fe fad1 	bl	80021f8 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fe facd 	bl	80021f8 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e03f      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6c:	4b22      	ldr	r3, [pc, #136]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <HAL_RCC_OscConfig+0x44a>
 8003c78:	e037      	b.n	8003cea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e032      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c86:	4b1c      	ldr	r3, [pc, #112]	; (8003cf8 <HAL_RCC_OscConfig+0x4e8>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d028      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d121      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d11a      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cbc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d111      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	085b      	lsrs	r3, r3, #1
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d107      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d001      	beq.n	8003cea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40007000 	.word	0x40007000
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	42470060 	.word	0x42470060

08003d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0cc      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d14:	4b68      	ldr	r3, [pc, #416]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d90c      	bls.n	8003d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d22:	4b65      	ldr	r3, [pc, #404]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b63      	ldr	r3, [pc, #396]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0b8      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d020      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d54:	4b59      	ldr	r3, [pc, #356]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4a58      	ldr	r2, [pc, #352]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d6c:	4b53      	ldr	r3, [pc, #332]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4a52      	ldr	r2, [pc, #328]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d78:	4b50      	ldr	r3, [pc, #320]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	494d      	ldr	r1, [pc, #308]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d044      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d107      	bne.n	8003dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9e:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d119      	bne.n	8003dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e07f      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d003      	beq.n	8003dbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dbe:	4b3f      	ldr	r3, [pc, #252]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e06f      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dce:	4b3b      	ldr	r3, [pc, #236]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e067      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dde:	4b37      	ldr	r3, [pc, #220]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f023 0203 	bic.w	r2, r3, #3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4934      	ldr	r1, [pc, #208]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003df0:	f7fe fa02 	bl	80021f8 <HAL_GetTick>
 8003df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df8:	f7fe f9fe 	bl	80021f8 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e04f      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	4b2b      	ldr	r3, [pc, #172]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 020c 	and.w	r2, r3, #12
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d1eb      	bne.n	8003df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e20:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d20c      	bcs.n	8003e48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2e:	4b22      	ldr	r3, [pc, #136]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e032      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e54:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4916      	ldr	r1, [pc, #88]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e72:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	490e      	ldr	r1, [pc, #56]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e86:	f000 f821 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	490a      	ldr	r1, [pc, #40]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e98:	5ccb      	ldrb	r3, [r1, r3]
 8003e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9e:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ea2:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe f962 	bl	8002170 <HAL_InitTick>

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023c00 	.word	0x40023c00
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	0800b540 	.word	0x0800b540
 8003ec4:	20000018 	.word	0x20000018
 8003ec8:	2000001c 	.word	0x2000001c

08003ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ecc:	b5b0      	push	{r4, r5, r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	6079      	str	r1, [r7, #4]
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	60f9      	str	r1, [r7, #12]
 8003eda:	2100      	movs	r1, #0
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ede:	2100      	movs	r1, #0
 8003ee0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee2:	4952      	ldr	r1, [pc, #328]	; (800402c <HAL_RCC_GetSysClockFreq+0x160>)
 8003ee4:	6889      	ldr	r1, [r1, #8]
 8003ee6:	f001 010c 	and.w	r1, r1, #12
 8003eea:	2908      	cmp	r1, #8
 8003eec:	d00d      	beq.n	8003f0a <HAL_RCC_GetSysClockFreq+0x3e>
 8003eee:	2908      	cmp	r1, #8
 8003ef0:	f200 8094 	bhi.w	800401c <HAL_RCC_GetSysClockFreq+0x150>
 8003ef4:	2900      	cmp	r1, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_RCC_GetSysClockFreq+0x32>
 8003ef8:	2904      	cmp	r1, #4
 8003efa:	d003      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x38>
 8003efc:	e08e      	b.n	800401c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003efe:	4b4c      	ldr	r3, [pc, #304]	; (8004030 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f00:	60bb      	str	r3, [r7, #8]
       break;
 8003f02:	e08e      	b.n	8004022 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f04:	4b4b      	ldr	r3, [pc, #300]	; (8004034 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f06:	60bb      	str	r3, [r7, #8]
      break;
 8003f08:	e08b      	b.n	8004022 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f0a:	4948      	ldr	r1, [pc, #288]	; (800402c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f0c:	6849      	ldr	r1, [r1, #4]
 8003f0e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003f12:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f14:	4945      	ldr	r1, [pc, #276]	; (800402c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f16:	6849      	ldr	r1, [r1, #4]
 8003f18:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003f1c:	2900      	cmp	r1, #0
 8003f1e:	d024      	beq.n	8003f6a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f20:	4942      	ldr	r1, [pc, #264]	; (800402c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f22:	6849      	ldr	r1, [r1, #4]
 8003f24:	0989      	lsrs	r1, r1, #6
 8003f26:	4608      	mov	r0, r1
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003f30:	f04f 0500 	mov.w	r5, #0
 8003f34:	ea00 0204 	and.w	r2, r0, r4
 8003f38:	ea01 0305 	and.w	r3, r1, r5
 8003f3c:	493d      	ldr	r1, [pc, #244]	; (8004034 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f3e:	fb01 f003 	mul.w	r0, r1, r3
 8003f42:	2100      	movs	r1, #0
 8003f44:	fb01 f102 	mul.w	r1, r1, r2
 8003f48:	1844      	adds	r4, r0, r1
 8003f4a:	493a      	ldr	r1, [pc, #232]	; (8004034 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f4c:	fba2 0101 	umull	r0, r1, r2, r1
 8003f50:	1863      	adds	r3, r4, r1
 8003f52:	4619      	mov	r1, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	f7fc f998 	bl	8000290 <__aeabi_uldivmod>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4613      	mov	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	e04a      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6a:	4b30      	ldr	r3, [pc, #192]	; (800402c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	099b      	lsrs	r3, r3, #6
 8003f70:	461a      	mov	r2, r3
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f7a:	f04f 0100 	mov.w	r1, #0
 8003f7e:	ea02 0400 	and.w	r4, r2, r0
 8003f82:	ea03 0501 	and.w	r5, r3, r1
 8003f86:	4620      	mov	r0, r4
 8003f88:	4629      	mov	r1, r5
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	014b      	lsls	r3, r1, #5
 8003f94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f98:	0142      	lsls	r2, r0, #5
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	1b00      	subs	r0, r0, r4
 8003fa0:	eb61 0105 	sbc.w	r1, r1, r5
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	018b      	lsls	r3, r1, #6
 8003fae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fb2:	0182      	lsls	r2, r0, #6
 8003fb4:	1a12      	subs	r2, r2, r0
 8003fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fba:	f04f 0000 	mov.w	r0, #0
 8003fbe:	f04f 0100 	mov.w	r1, #0
 8003fc2:	00d9      	lsls	r1, r3, #3
 8003fc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fc8:	00d0      	lsls	r0, r2, #3
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	1912      	adds	r2, r2, r4
 8003fd0:	eb45 0303 	adc.w	r3, r5, r3
 8003fd4:	f04f 0000 	mov.w	r0, #0
 8003fd8:	f04f 0100 	mov.w	r1, #0
 8003fdc:	0299      	lsls	r1, r3, #10
 8003fde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fe2:	0290      	lsls	r0, r2, #10
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4619      	mov	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	f7fc f94c 	bl	8000290 <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004000:	4b0a      	ldr	r3, [pc, #40]	; (800402c <HAL_RCC_GetSysClockFreq+0x160>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	0c1b      	lsrs	r3, r3, #16
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	3301      	adds	r3, #1
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	60bb      	str	r3, [r7, #8]
      break;
 800401a:	e002      	b.n	8004022 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800401c:	4b04      	ldr	r3, [pc, #16]	; (8004030 <HAL_RCC_GetSysClockFreq+0x164>)
 800401e:	60bb      	str	r3, [r7, #8]
      break;
 8004020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004022:	68bb      	ldr	r3, [r7, #8]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bdb0      	pop	{r4, r5, r7, pc}
 800402c:	40023800 	.word	0x40023800
 8004030:	00f42400 	.word	0x00f42400
 8004034:	017d7840 	.word	0x017d7840

08004038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <HAL_RCC_GetHCLKFreq+0x14>)
 800403e:	681b      	ldr	r3, [r3, #0]
}
 8004040:	4618      	mov	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000018 	.word	0x20000018

08004050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004054:	f7ff fff0 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 8004058:	4602      	mov	r2, r0
 800405a:	4b05      	ldr	r3, [pc, #20]	; (8004070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	0a9b      	lsrs	r3, r3, #10
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	4903      	ldr	r1, [pc, #12]	; (8004074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004066:	5ccb      	ldrb	r3, [r1, r3]
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800406c:	4618      	mov	r0, r3
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40023800 	.word	0x40023800
 8004074:	0800b550 	.word	0x0800b550

08004078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800407c:	f7ff ffdc 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 8004080:	4602      	mov	r2, r0
 8004082:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	0b5b      	lsrs	r3, r3, #13
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	4903      	ldr	r1, [pc, #12]	; (800409c <HAL_RCC_GetPCLK2Freq+0x24>)
 800408e:	5ccb      	ldrb	r3, [r1, r3]
 8004090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004094:	4618      	mov	r0, r3
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40023800 	.word	0x40023800
 800409c:	0800b550 	.word	0x0800b550

080040a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d105      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d038      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040c8:	4b68      	ldr	r3, [pc, #416]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040ce:	f7fe f893 	bl	80021f8 <HAL_GetTick>
 80040d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040d6:	f7fe f88f 	bl	80021f8 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e0bd      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040e8:	4b61      	ldr	r3, [pc, #388]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	019b      	lsls	r3, r3, #6
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	071b      	lsls	r3, r3, #28
 8004106:	495a      	ldr	r1, [pc, #360]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800410e:	4b57      	ldr	r3, [pc, #348]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004110:	2201      	movs	r2, #1
 8004112:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004114:	f7fe f870 	bl	80021f8 <HAL_GetTick>
 8004118:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800411a:	e008      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800411c:	f7fe f86c 	bl	80021f8 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e09a      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800412e:	4b50      	ldr	r3, [pc, #320]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 8083 	beq.w	800424e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	4b48      	ldr	r3, [pc, #288]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	4a47      	ldr	r2, [pc, #284]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004156:	6413      	str	r3, [r2, #64]	; 0x40
 8004158:	4b45      	ldr	r3, [pc, #276]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004164:	4b43      	ldr	r3, [pc, #268]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a42      	ldr	r2, [pc, #264]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800416a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004170:	f7fe f842 	bl	80021f8 <HAL_GetTick>
 8004174:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004176:	e008      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004178:	f7fe f83e 	bl	80021f8 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e06c      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800418a:	4b3a      	ldr	r3, [pc, #232]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004196:	4b36      	ldr	r3, [pc, #216]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d02f      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d028      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041b4:	4b2e      	ldr	r3, [pc, #184]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041bc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041be:	4b2e      	ldr	r3, [pc, #184]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041c4:	4b2c      	ldr	r3, [pc, #176]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80041ca:	4a29      	ldr	r2, [pc, #164]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041d0:	4b27      	ldr	r3, [pc, #156]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d114      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fe f80c 	bl	80021f8 <HAL_GetTick>
 80041e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e2:	e00a      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e4:	f7fe f808 	bl	80021f8 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e034      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fa:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0ee      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004212:	d10d      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004214:	4b16      	ldr	r3, [pc, #88]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004228:	4911      	ldr	r1, [pc, #68]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
 800422e:	e005      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004230:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a0e      	ldr	r2, [pc, #56]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004236:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800423a:	6093      	str	r3, [r2, #8]
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004248:	4909      	ldr	r1, [pc, #36]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424a:	4313      	orrs	r3, r2
 800424c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	7d1a      	ldrb	r2, [r3, #20]
 800425e:	4b07      	ldr	r3, [pc, #28]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004260:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	42470068 	.word	0x42470068
 8004270:	40023800 	.word	0x40023800
 8004274:	40007000 	.word	0x40007000
 8004278:	42470e40 	.word	0x42470e40
 800427c:	424711e0 	.word	0x424711e0

08004280 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e083      	b.n	800439a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7f5b      	ldrb	r3, [r3, #29]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fd fca6 	bl	8001bf4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	22ca      	movs	r2, #202	; 0xca
 80042b4:	625a      	str	r2, [r3, #36]	; 0x24
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2253      	movs	r2, #83	; 0x53
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fbc0 	bl	8004a44 <RTC_EnterInitMode>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	22ff      	movs	r2, #255	; 0xff
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2204      	movs	r2, #4
 80042d6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e05e      	b.n	800439a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80042ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ee:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6899      	ldr	r1, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68d2      	ldr	r2, [r2, #12]
 8004316:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6919      	ldr	r1, [r3, #16]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	041a      	lsls	r2, r3, #16
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800433a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10e      	bne.n	8004368 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fb52 	bl	80049f4 <HAL_RTC_WaitForSynchro>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	22ff      	movs	r2, #255	; 0xff
 800435c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2204      	movs	r2, #4
 8004362:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e018      	b.n	800439a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004376:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	22ff      	movs	r2, #255	; 0xff
 8004390:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004398:	2300      	movs	r3, #0
  }
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043a2:	b590      	push	{r4, r7, lr}
 80043a4:	b087      	sub	sp, #28
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	7f1b      	ldrb	r3, [r3, #28]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_RTC_SetTime+0x1c>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e0aa      	b.n	8004514 <HAL_RTC_SetTime+0x172>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2202      	movs	r2, #2
 80043c8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d126      	bne.n	800441e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2200      	movs	r2, #0
 80043e2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fb57 	bl	8004a9c <RTC_ByteToBcd2>
 80043ee:	4603      	mov	r3, r0
 80043f0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fb50 	bl	8004a9c <RTC_ByteToBcd2>
 80043fc:	4603      	mov	r3, r0
 80043fe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004400:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	789b      	ldrb	r3, [r3, #2]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fb48 	bl	8004a9c <RTC_ByteToBcd2>
 800440c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800440e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	78db      	ldrb	r3, [r3, #3]
 8004416:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	e018      	b.n	8004450 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2200      	movs	r2, #0
 8004430:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	785b      	ldrb	r3, [r3, #1]
 800443c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800443e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004444:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	78db      	ldrb	r3, [r3, #3]
 800444a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	22ca      	movs	r2, #202	; 0xca
 8004456:	625a      	str	r2, [r3, #36]	; 0x24
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2253      	movs	r2, #83	; 0x53
 800445e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 faef 	bl	8004a44 <RTC_EnterInitMode>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	22ff      	movs	r2, #255	; 0xff
 8004472:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2204      	movs	r2, #4
 8004478:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e047      	b.n	8004514 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800448e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004492:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044a2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6899      	ldr	r1, [r3, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d111      	bne.n	80044fe <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fa8a 	bl	80049f4 <HAL_RTC_WaitForSynchro>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	22ff      	movs	r2, #255	; 0xff
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2204      	movs	r2, #4
 80044f2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e00a      	b.n	8004514 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	22ff      	movs	r2, #255	; 0xff
 8004504:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004512:	2300      	movs	r3, #0
  }
}
 8004514:	4618      	mov	r0, r3
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	bd90      	pop	{r4, r7, pc}

0800451c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800454e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004552:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800455e:	b2da      	uxtb	r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	0a1b      	lsrs	r3, r3, #8
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800456e:	b2da      	uxtb	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800457c:	b2da      	uxtb	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	b2da      	uxtb	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d11a      	bne.n	80045ce <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fa9b 	bl	8004ad8 <RTC_Bcd2ToByte>
 80045a2:	4603      	mov	r3, r0
 80045a4:	461a      	mov	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	785b      	ldrb	r3, [r3, #1]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fa92 	bl	8004ad8 <RTC_Bcd2ToByte>
 80045b4:	4603      	mov	r3, r0
 80045b6:	461a      	mov	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	789b      	ldrb	r3, [r3, #2]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fa89 	bl	8004ad8 <RTC_Bcd2ToByte>
 80045c6:	4603      	mov	r3, r0
 80045c8:	461a      	mov	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045d8:	b590      	push	{r4, r7, lr}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	7f1b      	ldrb	r3, [r3, #28]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_RTC_SetDate+0x1c>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e094      	b.n	800471e <HAL_RTC_SetDate+0x146>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2202      	movs	r2, #2
 80045fe:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10e      	bne.n	8004624 <HAL_RTC_SetDate+0x4c>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	785b      	ldrb	r3, [r3, #1]
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	2b00      	cmp	r3, #0
 8004610:	d008      	beq.n	8004624 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	785b      	ldrb	r3, [r3, #1]
 8004616:	f023 0310 	bic.w	r3, r3, #16
 800461a:	b2db      	uxtb	r3, r3
 800461c:	330a      	adds	r3, #10
 800461e:	b2da      	uxtb	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d11c      	bne.n	8004664 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	78db      	ldrb	r3, [r3, #3]
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fa34 	bl	8004a9c <RTC_ByteToBcd2>
 8004634:	4603      	mov	r3, r0
 8004636:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	785b      	ldrb	r3, [r3, #1]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fa2d 	bl	8004a9c <RTC_ByteToBcd2>
 8004642:	4603      	mov	r3, r0
 8004644:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004646:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	789b      	ldrb	r3, [r3, #2]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fa25 	bl	8004a9c <RTC_ByteToBcd2>
 8004652:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004654:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	e00e      	b.n	8004682 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	78db      	ldrb	r3, [r3, #3]
 8004668:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	785b      	ldrb	r3, [r3, #1]
 800466e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004670:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004676:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	22ca      	movs	r2, #202	; 0xca
 8004688:	625a      	str	r2, [r3, #36]	; 0x24
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2253      	movs	r2, #83	; 0x53
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f9d6 	bl	8004a44 <RTC_EnterInitMode>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	22ff      	movs	r2, #255	; 0xff
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2204      	movs	r2, #4
 80046aa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e033      	b.n	800471e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046c4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d111      	bne.n	8004708 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f985 	bl	80049f4 <HAL_RTC_WaitForSynchro>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00b      	beq.n	8004708 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	22ff      	movs	r2, #255	; 0xff
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2204      	movs	r2, #4
 80046fc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e00a      	b.n	800471e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	22ff      	movs	r2, #255	; 0xff
 800470e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800471c:	2300      	movs	r3, #0
  }
}
 800471e:	4618      	mov	r0, r3
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	bd90      	pop	{r4, r7, pc}

08004726 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004740:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004744:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	b2da      	uxtb	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	b2da      	uxtb	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004768:	b2da      	uxtb	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	0b5b      	lsrs	r3, r3, #13
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d11a      	bne.n	80047ba <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	78db      	ldrb	r3, [r3, #3]
 8004788:	4618      	mov	r0, r3
 800478a:	f000 f9a5 	bl	8004ad8 <RTC_Bcd2ToByte>
 800478e:	4603      	mov	r3, r0
 8004790:	461a      	mov	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	785b      	ldrb	r3, [r3, #1]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 f99c 	bl	8004ad8 <RTC_Bcd2ToByte>
 80047a0:	4603      	mov	r3, r0
 80047a2:	461a      	mov	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	789b      	ldrb	r3, [r3, #2]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 f993 	bl	8004ad8 <RTC_Bcd2ToByte>
 80047b2:	4603      	mov	r3, r0
 80047b4:	461a      	mov	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80047c4:	b590      	push	{r4, r7, lr}
 80047c6:	b089      	sub	sp, #36	; 0x24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	7f1b      	ldrb	r3, [r3, #28]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_RTC_SetAlarm+0x24>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e101      	b.n	80049ec <HAL_RTC_SetAlarm+0x228>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2201      	movs	r2, #1
 80047ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2202      	movs	r2, #2
 80047f2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d137      	bne.n	800486a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d102      	bne.n	800480e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2200      	movs	r2, #0
 800480c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f942 	bl	8004a9c <RTC_ByteToBcd2>
 8004818:	4603      	mov	r3, r0
 800481a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	4618      	mov	r0, r3
 8004822:	f000 f93b 	bl	8004a9c <RTC_ByteToBcd2>
 8004826:	4603      	mov	r3, r0
 8004828:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800482a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	789b      	ldrb	r3, [r3, #2]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 f933 	bl	8004a9c <RTC_ByteToBcd2>
 8004836:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004838:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	78db      	ldrb	r3, [r3, #3]
 8004840:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004842:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 f925 	bl	8004a9c <RTC_ByteToBcd2>
 8004852:	4603      	mov	r3, r0
 8004854:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004856:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800485e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004864:	4313      	orrs	r3, r2
 8004866:	61fb      	str	r3, [r7, #28]
 8004868:	e023      	b.n	80048b2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	d102      	bne.n	800487e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2200      	movs	r2, #0
 800487c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	785b      	ldrb	r3, [r3, #1]
 8004888:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800488a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004890:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	78db      	ldrb	r3, [r3, #3]
 8004896:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004898:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048a0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80048a2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80048a8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	22ca      	movs	r2, #202	; 0xca
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2253      	movs	r2, #83	; 0x53
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d6:	d13f      	bne.n	8004958 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048e6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048f6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048f8:	f7fd fc7e 	bl	80021f8 <HAL_GetTick>
 80048fc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80048fe:	e013      	b.n	8004928 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004900:	f7fd fc7a 	bl	80021f8 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800490e:	d90b      	bls.n	8004928 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	22ff      	movs	r2, #255	; 0xff
 8004916:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2203      	movs	r2, #3
 800491c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e061      	b.n	80049ec <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0e4      	beq.n	8004900 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004954:	609a      	str	r2, [r3, #8]
 8004956:	e03e      	b.n	80049d6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004966:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004976:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004978:	f7fd fc3e 	bl	80021f8 <HAL_GetTick>
 800497c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800497e:	e013      	b.n	80049a8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004980:	f7fd fc3a 	bl	80021f8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800498e:	d90b      	bls.n	80049a8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	22ff      	movs	r2, #255	; 0xff
 8004996:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2203      	movs	r2, #3
 800499c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e021      	b.n	80049ec <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0e4      	beq.n	8004980 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	22ff      	movs	r2, #255	; 0xff
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3724      	adds	r7, #36	; 0x24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd90      	pop	{r4, r7, pc}

080049f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a0e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a10:	f7fd fbf2 	bl	80021f8 <HAL_GetTick>
 8004a14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004a16:	e009      	b.n	8004a2c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a18:	f7fd fbee 	bl	80021f8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a26:	d901      	bls.n	8004a2c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e007      	b.n	8004a3c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0ee      	beq.n	8004a18 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d119      	bne.n	8004a92 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f04f 32ff 	mov.w	r2, #4294967295
 8004a66:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a68:	f7fd fbc6 	bl	80021f8 <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a6e:	e009      	b.n	8004a84 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a70:	f7fd fbc2 	bl	80021f8 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a7e:	d901      	bls.n	8004a84 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e007      	b.n	8004a94 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0ee      	beq.n	8004a70 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004aaa:	e005      	b.n	8004ab8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	3b0a      	subs	r3, #10
 8004ab6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	2b09      	cmp	r3, #9
 8004abc:	d8f6      	bhi.n	8004aac <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	b2db      	uxtb	r3, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	4413      	add	r3, r2
 8004b06:	b2db      	uxtb	r3, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3350      	adds	r3, #80	; 0x50
 8004b2a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4413      	add	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	601a      	str	r2, [r3, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3350      	adds	r3, #80	; 0x50
 8004b5c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e07b      	b.n	8004c82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d108      	bne.n	8004ba4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b9a:	d009      	beq.n	8004bb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	61da      	str	r2, [r3, #28]
 8004ba2:	e005      	b.n	8004bb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fd f83e 	bl	8001c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c34:	ea42 0103 	orr.w	r1, r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	0c1b      	lsrs	r3, r3, #16
 8004c4e:	f003 0104 	and.w	r1, r3, #4
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	f003 0210 	and.w	r2, r3, #16
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69da      	ldr	r2, [r3, #28]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b08c      	sub	sp, #48	; 0x30
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_SPI_TransmitReceive+0x26>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e18a      	b.n	8004fc6 <HAL_SPI_TransmitReceive+0x33c>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb8:	f7fd fa9e 	bl	80021f8 <HAL_GetTick>
 8004cbc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cce:	887b      	ldrh	r3, [r7, #2]
 8004cd0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d00f      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x70>
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ce0:	d107      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d103      	bne.n	8004cf2 <HAL_SPI_TransmitReceive+0x68>
 8004cea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d003      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cf8:	e15b      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x82>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x82>
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d12:	e14e      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d003      	beq.n	8004d28 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2205      	movs	r2, #5
 8004d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	887a      	ldrh	r2, [r7, #2]
 8004d3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	887a      	ldrh	r2, [r7, #2]
 8004d4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	887a      	ldrh	r2, [r7, #2]
 8004d50:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d68:	2b40      	cmp	r3, #64	; 0x40
 8004d6a:	d007      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d84:	d178      	bne.n	8004e78 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_SPI_TransmitReceive+0x10a>
 8004d8e:	8b7b      	ldrh	r3, [r7, #26]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d166      	bne.n	8004e62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	881a      	ldrh	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	1c9a      	adds	r2, r3, #2
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004db8:	e053      	b.n	8004e62 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d11b      	bne.n	8004e00 <HAL_SPI_TransmitReceive+0x176>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d016      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x176>
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d113      	bne.n	8004e00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	881a      	ldrh	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	1c9a      	adds	r2, r3, #2
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d119      	bne.n	8004e42 <HAL_SPI_TransmitReceive+0x1b8>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d014      	beq.n	8004e42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	b292      	uxth	r2, r2
 8004e24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	1c9a      	adds	r2, r3, #2
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e42:	f7fd f9d9 	bl	80021f8 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d807      	bhi.n	8004e62 <HAL_SPI_TransmitReceive+0x1d8>
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e58:	d003      	beq.n	8004e62 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e60:	e0a7      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1a6      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x130>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1a1      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x130>
 8004e76:	e07c      	b.n	8004f72 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <HAL_SPI_TransmitReceive+0x1fc>
 8004e80:	8b7b      	ldrh	r3, [r7, #26]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d16b      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	330c      	adds	r3, #12
 8004e90:	7812      	ldrb	r2, [r2, #0]
 8004e92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eac:	e057      	b.n	8004f5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d11c      	bne.n	8004ef6 <HAL_SPI_TransmitReceive+0x26c>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d017      	beq.n	8004ef6 <HAL_SPI_TransmitReceive+0x26c>
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d114      	bne.n	8004ef6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	7812      	ldrb	r2, [r2, #0]
 8004ed8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d119      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x2ae>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d014      	beq.n	8004f38 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f34:	2301      	movs	r3, #1
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f38:	f7fd f95e 	bl	80021f8 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d803      	bhi.n	8004f50 <HAL_SPI_TransmitReceive+0x2c6>
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4e:	d102      	bne.n	8004f56 <HAL_SPI_TransmitReceive+0x2cc>
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f5c:	e029      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1a2      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x224>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d19d      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 f8b2 	bl	80050e0 <SPI_EndRxTxTransaction>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d006      	beq.n	8004f90 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f8e:	e010      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10b      	bne.n	8004fb0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	e000      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004fb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3730      	adds	r7, #48	; 0x30
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fe0:	f7fd f90a 	bl	80021f8 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	4413      	add	r3, r2
 8004fee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ff0:	f7fd f902 	bl	80021f8 <HAL_GetTick>
 8004ff4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ff6:	4b39      	ldr	r3, [pc, #228]	; (80050dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	015b      	lsls	r3, r3, #5
 8004ffc:	0d1b      	lsrs	r3, r3, #20
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	fb02 f303 	mul.w	r3, r2, r3
 8005004:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005006:	e054      	b.n	80050b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500e:	d050      	beq.n	80050b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005010:	f7fd f8f2 	bl	80021f8 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	429a      	cmp	r2, r3
 800501e:	d902      	bls.n	8005026 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d13d      	bne.n	80050a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005034:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800503e:	d111      	bne.n	8005064 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005048:	d004      	beq.n	8005054 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005052:	d107      	bne.n	8005064 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005062:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506c:	d10f      	bne.n	800508e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800508c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e017      	b.n	80050d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4013      	ands	r3, r2
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	429a      	cmp	r2, r3
 80050c0:	bf0c      	ite	eq
 80050c2:	2301      	moveq	r3, #1
 80050c4:	2300      	movne	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d19b      	bne.n	8005008 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000018 	.word	0x20000018

080050e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050ec:	4b1b      	ldr	r3, [pc, #108]	; (800515c <SPI_EndRxTxTransaction+0x7c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <SPI_EndRxTxTransaction+0x80>)
 80050f2:	fba2 2303 	umull	r2, r3, r2, r3
 80050f6:	0d5b      	lsrs	r3, r3, #21
 80050f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050fc:	fb02 f303 	mul.w	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510a:	d112      	bne.n	8005132 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	2180      	movs	r1, #128	; 0x80
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff ff5a 	bl	8004fd0 <SPI_WaitFlagStateUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d016      	beq.n	8005150 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005126:	f043 0220 	orr.w	r2, r3, #32
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e00f      	b.n	8005152 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	3b01      	subs	r3, #1
 800513c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005148:	2b80      	cmp	r3, #128	; 0x80
 800514a:	d0f2      	beq.n	8005132 <SPI_EndRxTxTransaction+0x52>
 800514c:	e000      	b.n	8005150 <SPI_EndRxTxTransaction+0x70>
        break;
 800514e:	bf00      	nop
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000018 	.word	0x20000018
 8005160:	165e9f81 	.word	0x165e9f81

08005164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e041      	b.n	80051fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fc fdc6 	bl	8001d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f000 fc4e 	bl	8005a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d001      	beq.n	800521c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e044      	b.n	80052a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d018      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x6c>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005246:	d013      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x6c>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1a      	ldr	r2, [pc, #104]	; (80052b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00e      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x6c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a19      	ldr	r2, [pc, #100]	; (80052bc <HAL_TIM_Base_Start_IT+0xb8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d009      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x6c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d004      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x6c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d111      	bne.n	8005294 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b06      	cmp	r3, #6
 8005280:	d010      	beq.n	80052a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005292:	e007      	b.n	80052a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40010000 	.word	0x40010000
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40000800 	.word	0x40000800
 80052c0:	40000c00 	.word	0x40000c00
 80052c4:	40014000 	.word	0x40014000

080052c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e041      	b.n	800535e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fc fd7c 	bl	8001dec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3304      	adds	r3, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f000 fb9c 	bl	8005a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d109      	bne.n	800538c <HAL_TIM_PWM_Start+0x24>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	bf14      	ite	ne
 8005384:	2301      	movne	r3, #1
 8005386:	2300      	moveq	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	e022      	b.n	80053d2 <HAL_TIM_PWM_Start+0x6a>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b04      	cmp	r3, #4
 8005390:	d109      	bne.n	80053a6 <HAL_TIM_PWM_Start+0x3e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b01      	cmp	r3, #1
 800539c:	bf14      	ite	ne
 800539e:	2301      	movne	r3, #1
 80053a0:	2300      	moveq	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	e015      	b.n	80053d2 <HAL_TIM_PWM_Start+0x6a>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d109      	bne.n	80053c0 <HAL_TIM_PWM_Start+0x58>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	bf14      	ite	ne
 80053b8:	2301      	movne	r3, #1
 80053ba:	2300      	moveq	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	e008      	b.n	80053d2 <HAL_TIM_PWM_Start+0x6a>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	bf14      	ite	ne
 80053cc:	2301      	movne	r3, #1
 80053ce:	2300      	moveq	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e068      	b.n	80054ac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d104      	bne.n	80053ea <HAL_TIM_PWM_Start+0x82>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e8:	e013      	b.n	8005412 <HAL_TIM_PWM_Start+0xaa>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d104      	bne.n	80053fa <HAL_TIM_PWM_Start+0x92>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f8:	e00b      	b.n	8005412 <HAL_TIM_PWM_Start+0xaa>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d104      	bne.n	800540a <HAL_TIM_PWM_Start+0xa2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005408:	e003      	b.n	8005412 <HAL_TIM_PWM_Start+0xaa>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2202      	movs	r2, #2
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2201      	movs	r2, #1
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fdb8 	bl	8005f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a23      	ldr	r2, [pc, #140]	; (80054b4 <HAL_TIM_PWM_Start+0x14c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d107      	bne.n	800543a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005438:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1d      	ldr	r2, [pc, #116]	; (80054b4 <HAL_TIM_PWM_Start+0x14c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d018      	beq.n	8005476 <HAL_TIM_PWM_Start+0x10e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544c:	d013      	beq.n	8005476 <HAL_TIM_PWM_Start+0x10e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a19      	ldr	r2, [pc, #100]	; (80054b8 <HAL_TIM_PWM_Start+0x150>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00e      	beq.n	8005476 <HAL_TIM_PWM_Start+0x10e>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a17      	ldr	r2, [pc, #92]	; (80054bc <HAL_TIM_PWM_Start+0x154>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d009      	beq.n	8005476 <HAL_TIM_PWM_Start+0x10e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a16      	ldr	r2, [pc, #88]	; (80054c0 <HAL_TIM_PWM_Start+0x158>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <HAL_TIM_PWM_Start+0x10e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a14      	ldr	r2, [pc, #80]	; (80054c4 <HAL_TIM_PWM_Start+0x15c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d111      	bne.n	800549a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b06      	cmp	r3, #6
 8005486:	d010      	beq.n	80054aa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005498:	e007      	b.n	80054aa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0201 	orr.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40010000 	.word	0x40010000
 80054b8:	40000400 	.word	0x40000400
 80054bc:	40000800 	.word	0x40000800
 80054c0:	40000c00 	.word	0x40000c00
 80054c4:	40014000 	.word	0x40014000

080054c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e097      	b.n	800560c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d106      	bne.n	80054f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7fc fc33 	bl	8001d5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2202      	movs	r2, #2
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6812      	ldr	r2, [r2, #0]
 8005508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800550c:	f023 0307 	bic.w	r3, r3, #7
 8005510:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3304      	adds	r3, #4
 800551a:	4619      	mov	r1, r3
 800551c:	4610      	mov	r0, r2
 800551e:	f000 fa91 	bl	8005a44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	021b      	lsls	r3, r3, #8
 800555a:	4313      	orrs	r3, r2
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005568:	f023 030c 	bic.w	r3, r3, #12
 800556c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005574:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005578:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	4313      	orrs	r3, r2
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	011a      	lsls	r2, r3, #4
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	031b      	lsls	r3, r3, #12
 8005598:	4313      	orrs	r3, r2
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80055ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	4313      	orrs	r3, r2
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005624:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800562c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005634:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800563c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d110      	bne.n	8005666 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d102      	bne.n	8005650 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800564a:	7b7b      	ldrb	r3, [r7, #13]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d001      	beq.n	8005654 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e069      	b.n	8005728 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005664:	e031      	b.n	80056ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b04      	cmp	r3, #4
 800566a:	d110      	bne.n	800568e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800566c:	7bbb      	ldrb	r3, [r7, #14]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d102      	bne.n	8005678 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005672:	7b3b      	ldrb	r3, [r7, #12]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d001      	beq.n	800567c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e055      	b.n	8005728 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800568c:	e01d      	b.n	80056ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d108      	bne.n	80056a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005694:	7bbb      	ldrb	r3, [r7, #14]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d105      	bne.n	80056a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800569a:	7b7b      	ldrb	r3, [r7, #13]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d102      	bne.n	80056a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056a0:	7b3b      	ldrb	r3, [r7, #12]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d001      	beq.n	80056aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e03e      	b.n	8005728 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2202      	movs	r2, #2
 80056b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2202      	movs	r2, #2
 80056be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2202      	movs	r2, #2
 80056c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_TIM_Encoder_Start+0xc4>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d008      	beq.n	80056e8 <HAL_TIM_Encoder_Start+0xd4>
 80056d6:	e00f      	b.n	80056f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2201      	movs	r2, #1
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fc55 	bl	8005f90 <TIM_CCxChannelCmd>
      break;
 80056e6:	e016      	b.n	8005716 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2201      	movs	r2, #1
 80056ee:	2104      	movs	r1, #4
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fc4d 	bl	8005f90 <TIM_CCxChannelCmd>
      break;
 80056f6:	e00e      	b.n	8005716 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2201      	movs	r2, #1
 80056fe:	2100      	movs	r1, #0
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fc45 	bl	8005f90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2201      	movs	r2, #1
 800570c:	2104      	movs	r1, #4
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fc3e 	bl	8005f90 <TIM_CCxChannelCmd>
      break;
 8005714:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0201 	orr.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800574a:	2302      	movs	r3, #2
 800574c:	e0ae      	b.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b0c      	cmp	r3, #12
 800575a:	f200 809f 	bhi.w	800589c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800575e:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	08005799 	.word	0x08005799
 8005768:	0800589d 	.word	0x0800589d
 800576c:	0800589d 	.word	0x0800589d
 8005770:	0800589d 	.word	0x0800589d
 8005774:	080057d9 	.word	0x080057d9
 8005778:	0800589d 	.word	0x0800589d
 800577c:	0800589d 	.word	0x0800589d
 8005780:	0800589d 	.word	0x0800589d
 8005784:	0800581b 	.word	0x0800581b
 8005788:	0800589d 	.word	0x0800589d
 800578c:	0800589d 	.word	0x0800589d
 8005790:	0800589d 	.word	0x0800589d
 8005794:	0800585b 	.word	0x0800585b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f9d0 	bl	8005b44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0208 	orr.w	r2, r2, #8
 80057b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0204 	bic.w	r2, r2, #4
 80057c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6999      	ldr	r1, [r3, #24]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	619a      	str	r2, [r3, #24]
      break;
 80057d6:	e064      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fa16 	bl	8005c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6999      	ldr	r1, [r3, #24]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	021a      	lsls	r2, r3, #8
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	619a      	str	r2, [r3, #24]
      break;
 8005818:	e043      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fa61 	bl	8005ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0208 	orr.w	r2, r2, #8
 8005834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0204 	bic.w	r2, r2, #4
 8005844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69d9      	ldr	r1, [r3, #28]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	61da      	str	r2, [r3, #28]
      break;
 8005858:	e023      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 faab 	bl	8005dbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69d9      	ldr	r1, [r3, #28]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	021a      	lsls	r2, r3, #8
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	61da      	str	r2, [r3, #28]
      break;
 800589a:	e002      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	75fb      	strb	r3, [r7, #23]
      break;
 80058a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_TIM_ConfigClockSource+0x1c>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e0b4      	b.n	8005a3a <HAL_TIM_ConfigClockSource+0x186>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005908:	d03e      	beq.n	8005988 <HAL_TIM_ConfigClockSource+0xd4>
 800590a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800590e:	f200 8087 	bhi.w	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005916:	f000 8086 	beq.w	8005a26 <HAL_TIM_ConfigClockSource+0x172>
 800591a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591e:	d87f      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005920:	2b70      	cmp	r3, #112	; 0x70
 8005922:	d01a      	beq.n	800595a <HAL_TIM_ConfigClockSource+0xa6>
 8005924:	2b70      	cmp	r3, #112	; 0x70
 8005926:	d87b      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005928:	2b60      	cmp	r3, #96	; 0x60
 800592a:	d050      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x11a>
 800592c:	2b60      	cmp	r3, #96	; 0x60
 800592e:	d877      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005930:	2b50      	cmp	r3, #80	; 0x50
 8005932:	d03c      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0xfa>
 8005934:	2b50      	cmp	r3, #80	; 0x50
 8005936:	d873      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005938:	2b40      	cmp	r3, #64	; 0x40
 800593a:	d058      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x13a>
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d86f      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005940:	2b30      	cmp	r3, #48	; 0x30
 8005942:	d064      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15a>
 8005944:	2b30      	cmp	r3, #48	; 0x30
 8005946:	d86b      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005948:	2b20      	cmp	r3, #32
 800594a:	d060      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15a>
 800594c:	2b20      	cmp	r3, #32
 800594e:	d867      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d05c      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15a>
 8005954:	2b10      	cmp	r3, #16
 8005956:	d05a      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15a>
 8005958:	e062      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6899      	ldr	r1, [r3, #8]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f000 faf1 	bl	8005f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800597c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	609a      	str	r2, [r3, #8]
      break;
 8005986:	e04f      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	6899      	ldr	r1, [r3, #8]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f000 fada 	bl	8005f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059aa:	609a      	str	r2, [r3, #8]
      break;
 80059ac:	e03c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6859      	ldr	r1, [r3, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	461a      	mov	r2, r3
 80059bc:	f000 fa4e 	bl	8005e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2150      	movs	r1, #80	; 0x50
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 faa7 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 80059cc:	e02c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6859      	ldr	r1, [r3, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	461a      	mov	r2, r3
 80059dc:	f000 fa6d 	bl	8005eba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2160      	movs	r1, #96	; 0x60
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fa97 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 80059ec:	e01c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	6859      	ldr	r1, [r3, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	461a      	mov	r2, r3
 80059fc:	f000 fa2e 	bl	8005e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2140      	movs	r1, #64	; 0x40
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fa87 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 8005a0c:	e00c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f000 fa7e 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 8005a1e:	e003      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	73fb      	strb	r3, [r7, #15]
      break;
 8005a24:	e000      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a34      	ldr	r2, [pc, #208]	; (8005b28 <TIM_Base_SetConfig+0xe4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00f      	beq.n	8005a7c <TIM_Base_SetConfig+0x38>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a62:	d00b      	beq.n	8005a7c <TIM_Base_SetConfig+0x38>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a31      	ldr	r2, [pc, #196]	; (8005b2c <TIM_Base_SetConfig+0xe8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d007      	beq.n	8005a7c <TIM_Base_SetConfig+0x38>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a30      	ldr	r2, [pc, #192]	; (8005b30 <TIM_Base_SetConfig+0xec>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_Base_SetConfig+0x38>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a2f      	ldr	r2, [pc, #188]	; (8005b34 <TIM_Base_SetConfig+0xf0>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d108      	bne.n	8005a8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a25      	ldr	r2, [pc, #148]	; (8005b28 <TIM_Base_SetConfig+0xe4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01b      	beq.n	8005ace <TIM_Base_SetConfig+0x8a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9c:	d017      	beq.n	8005ace <TIM_Base_SetConfig+0x8a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a22      	ldr	r2, [pc, #136]	; (8005b2c <TIM_Base_SetConfig+0xe8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <TIM_Base_SetConfig+0x8a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a21      	ldr	r2, [pc, #132]	; (8005b30 <TIM_Base_SetConfig+0xec>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00f      	beq.n	8005ace <TIM_Base_SetConfig+0x8a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a20      	ldr	r2, [pc, #128]	; (8005b34 <TIM_Base_SetConfig+0xf0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00b      	beq.n	8005ace <TIM_Base_SetConfig+0x8a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a1f      	ldr	r2, [pc, #124]	; (8005b38 <TIM_Base_SetConfig+0xf4>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d007      	beq.n	8005ace <TIM_Base_SetConfig+0x8a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a1e      	ldr	r2, [pc, #120]	; (8005b3c <TIM_Base_SetConfig+0xf8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_Base_SetConfig+0x8a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1d      	ldr	r2, [pc, #116]	; (8005b40 <TIM_Base_SetConfig+0xfc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d108      	bne.n	8005ae0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a08      	ldr	r2, [pc, #32]	; (8005b28 <TIM_Base_SetConfig+0xe4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d103      	bne.n	8005b14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	615a      	str	r2, [r3, #20]
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40014400 	.word	0x40014400
 8005b40:	40014800 	.word	0x40014800

08005b44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f023 0201 	bic.w	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0303 	bic.w	r3, r3, #3
 8005b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f023 0302 	bic.w	r3, r3, #2
 8005b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a1c      	ldr	r2, [pc, #112]	; (8005c0c <TIM_OC1_SetConfig+0xc8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d10c      	bne.n	8005bba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 0308 	bic.w	r3, r3, #8
 8005ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f023 0304 	bic.w	r3, r3, #4
 8005bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a13      	ldr	r2, [pc, #76]	; (8005c0c <TIM_OC1_SetConfig+0xc8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d111      	bne.n	8005be6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	621a      	str	r2, [r3, #32]
}
 8005c00:	bf00      	nop
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	40010000 	.word	0x40010000

08005c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f023 0210 	bic.w	r2, r3, #16
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0320 	bic.w	r3, r3, #32
 8005c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ce4 <TIM_OC2_SetConfig+0xd4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d10d      	bne.n	8005c8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a15      	ldr	r2, [pc, #84]	; (8005ce4 <TIM_OC2_SetConfig+0xd4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d113      	bne.n	8005cbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40010000 	.word	0x40010000

08005ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	021b      	lsls	r3, r3, #8
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a1d      	ldr	r2, [pc, #116]	; (8005db8 <TIM_OC3_SetConfig+0xd0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d10d      	bne.n	8005d62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a14      	ldr	r2, [pc, #80]	; (8005db8 <TIM_OC3_SetConfig+0xd0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d113      	bne.n	8005d92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	621a      	str	r2, [r3, #32]
}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	40010000 	.word	0x40010000

08005dbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	021b      	lsls	r3, r3, #8
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	031b      	lsls	r3, r3, #12
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a10      	ldr	r2, [pc, #64]	; (8005e58 <TIM_OC4_SetConfig+0x9c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d109      	bne.n	8005e30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	019b      	lsls	r3, r3, #6
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40010000 	.word	0x40010000

08005e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f023 0201 	bic.w	r2, r3, #1
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f023 030a 	bic.w	r3, r3, #10
 8005e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b087      	sub	sp, #28
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	f023 0210 	bic.w	r2, r3, #16
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	031b      	lsls	r3, r3, #12
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f043 0307 	orr.w	r3, r3, #7
 8005f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	609a      	str	r2, [r3, #8]
}
 8005f44:	bf00      	nop
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	021a      	lsls	r2, r3, #8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	609a      	str	r2, [r3, #8]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f003 031f 	and.w	r3, r3, #31
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a1a      	ldr	r2, [r3, #32]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a1a      	ldr	r2, [r3, #32]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 031f 	and.w	r3, r3, #31
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
	...

08005fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e050      	b.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a1c      	ldr	r2, [pc, #112]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d018      	beq.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006040:	d013      	beq.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a18      	ldr	r2, [pc, #96]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00e      	beq.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a16      	ldr	r2, [pc, #88]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d009      	beq.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a15      	ldr	r2, [pc, #84]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d004      	beq.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a13      	ldr	r2, [pc, #76]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d10c      	bne.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	4313      	orrs	r3, r2
 800607a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	40000c00 	.word	0x40000c00
 80060b4:	40014000 	.word	0x40014000

080060b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e03f      	b.n	800614a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fb fee0 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2224      	movs	r2, #36	; 0x24
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fe97 	bl	8006e30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695a      	ldr	r2, [r3, #20]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b08c      	sub	sp, #48	; 0x30
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	4613      	mov	r3, r2
 800615e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b20      	cmp	r3, #32
 800616a:	d152      	bne.n	8006212 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e04b      	b.n	8006214 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006186:	2302      	movs	r3, #2
 8006188:	e044      	b.n	8006214 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006198:	88fb      	ldrh	r3, [r7, #6]
 800619a:	461a      	mov	r2, r3
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fbea 	bl	8006978 <UART_Start_Receive_DMA>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80061aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d12c      	bne.n	800620c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d125      	bne.n	8006206 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061ba:	2300      	movs	r3, #0
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	330c      	adds	r3, #12
 80061d6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	617b      	str	r3, [r7, #20]
   return(result);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f043 0310 	orr.w	r3, r3, #16
 80061e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	330c      	adds	r3, #12
 80061ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061f0:	627a      	str	r2, [r7, #36]	; 0x24
 80061f2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6a39      	ldr	r1, [r7, #32]
 80061f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e5      	bne.n	80061d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006204:	e002      	b.n	800620c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800620c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006210:	e000      	b.n	8006214 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006212:	2302      	movs	r3, #2
  }
}
 8006214:	4618      	mov	r0, r3
 8006216:	3730      	adds	r7, #48	; 0x30
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b0ba      	sub	sp, #232	; 0xe8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006242:	2300      	movs	r3, #0
 8006244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006248:	2300      	movs	r3, #0
 800624a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800624e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800625a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10f      	bne.n	8006282 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <HAL_UART_IRQHandler+0x66>
 800626e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fd1d 	bl	8006cba <UART_Receive_IT>
      return;
 8006280:	e256      	b.n	8006730 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 80de 	beq.w	8006448 <HAL_UART_IRQHandler+0x22c>
 800628c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800629c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80d1 	beq.w	8006448 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <HAL_UART_IRQHandler+0xae>
 80062b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d005      	beq.n	80062ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	f043 0201 	orr.w	r2, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00b      	beq.n	80062ee <HAL_UART_IRQHandler+0xd2>
 80062d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d005      	beq.n	80062ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	f043 0202 	orr.w	r2, r3, #2
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00b      	beq.n	8006312 <HAL_UART_IRQHandler+0xf6>
 80062fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d005      	beq.n	8006312 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630a:	f043 0204 	orr.w	r2, r3, #4
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d011      	beq.n	8006342 <HAL_UART_IRQHandler+0x126>
 800631e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d105      	bne.n	8006336 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800632a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f043 0208 	orr.w	r2, r3, #8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 81ed 	beq.w	8006726 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006350:	f003 0320 	and.w	r3, r3, #32
 8006354:	2b00      	cmp	r3, #0
 8006356:	d008      	beq.n	800636a <HAL_UART_IRQHandler+0x14e>
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fca8 	bl	8006cba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b40      	cmp	r3, #64	; 0x40
 8006376:	bf0c      	ite	eq
 8006378:	2301      	moveq	r3, #1
 800637a:	2300      	movne	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d103      	bne.n	8006396 <HAL_UART_IRQHandler+0x17a>
 800638e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006392:	2b00      	cmp	r3, #0
 8006394:	d04f      	beq.n	8006436 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fbb0 	bl	8006afc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b40      	cmp	r3, #64	; 0x40
 80063a8:	d141      	bne.n	800642e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3314      	adds	r3, #20
 80063b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3314      	adds	r3, #20
 80063d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80063d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80063da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80063e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1d9      	bne.n	80063aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d013      	beq.n	8006426 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	4a7d      	ldr	r2, [pc, #500]	; (80065f8 <HAL_UART_IRQHandler+0x3dc>)
 8006404:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	4618      	mov	r0, r3
 800640c:	f7fc fda4 	bl	8002f58 <HAL_DMA_Abort_IT>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d016      	beq.n	8006444 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006420:	4610      	mov	r0, r2
 8006422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006424:	e00e      	b.n	8006444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f9a4 	bl	8006774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800642c:	e00a      	b.n	8006444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f9a0 	bl	8006774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006434:	e006      	b.n	8006444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f99c 	bl	8006774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006442:	e170      	b.n	8006726 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006444:	bf00      	nop
    return;
 8006446:	e16e      	b.n	8006726 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	2b01      	cmp	r3, #1
 800644e:	f040 814a 	bne.w	80066e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 8143 	beq.w	80066e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 813c 	beq.w	80066e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800646e:	2300      	movs	r3, #0
 8006470:	60bb      	str	r3, [r7, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648e:	2b40      	cmp	r3, #64	; 0x40
 8006490:	f040 80b4 	bne.w	80065fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 8140 	beq.w	800672a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064b2:	429a      	cmp	r2, r3
 80064b4:	f080 8139 	bcs.w	800672a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ca:	f000 8088 	beq.w	80065de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	330c      	adds	r3, #12
 80064d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80064e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	330c      	adds	r3, #12
 80064f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80064fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006506:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1d9      	bne.n	80064ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3314      	adds	r3, #20
 8006520:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800652a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800652c:	f023 0301 	bic.w	r3, r3, #1
 8006530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3314      	adds	r3, #20
 800653a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800653e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006542:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006544:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006546:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e1      	bne.n	800651a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3314      	adds	r3, #20
 800655c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800656c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3314      	adds	r3, #20
 8006576:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800657a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800657c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006580:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e3      	bne.n	8006556 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330c      	adds	r3, #12
 80065a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ae:	f023 0310 	bic.w	r3, r3, #16
 80065b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	330c      	adds	r3, #12
 80065bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80065c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e3      	bne.n	800659c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fc fc4d 	bl	8002e78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fb f858 	bl	80016a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065f4:	e099      	b.n	800672a <HAL_UART_IRQHandler+0x50e>
 80065f6:	bf00      	nop
 80065f8:	08006bc3 	.word	0x08006bc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006604:	b29b      	uxth	r3, r3
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 808b 	beq.w	800672e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8086 	beq.w	800672e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	330c      	adds	r3, #12
 8006628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	330c      	adds	r3, #12
 8006642:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006646:	647a      	str	r2, [r7, #68]	; 0x44
 8006648:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800664c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e3      	bne.n	8006622 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3314      	adds	r3, #20
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	623b      	str	r3, [r7, #32]
   return(result);
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	f023 0301 	bic.w	r3, r3, #1
 8006670:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3314      	adds	r3, #20
 800667a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800667e:	633a      	str	r2, [r7, #48]	; 0x30
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e3      	bne.n	800665a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0310 	bic.w	r3, r3, #16
 80066b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	330c      	adds	r3, #12
 80066c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80066c4:	61fa      	str	r2, [r7, #28]
 80066c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	69b9      	ldr	r1, [r7, #24]
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	617b      	str	r3, [r7, #20]
   return(result);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e3      	bne.n	80066a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fa ffe0 	bl	80016a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066e4:	e023      	b.n	800672e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <HAL_UART_IRQHandler+0x4ea>
 80066f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa73 	bl	8006bea <UART_Transmit_IT>
    return;
 8006704:	e014      	b.n	8006730 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00e      	beq.n	8006730 <HAL_UART_IRQHandler+0x514>
 8006712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671a:	2b00      	cmp	r3, #0
 800671c:	d008      	beq.n	8006730 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fab3 	bl	8006c8a <UART_EndTransmit_IT>
    return;
 8006724:	e004      	b.n	8006730 <HAL_UART_IRQHandler+0x514>
    return;
 8006726:	bf00      	nop
 8006728:	e002      	b.n	8006730 <HAL_UART_IRQHandler+0x514>
      return;
 800672a:	bf00      	nop
 800672c:	e000      	b.n	8006730 <HAL_UART_IRQHandler+0x514>
      return;
 800672e:	bf00      	nop
  }
}
 8006730:	37e8      	adds	r7, #232	; 0xe8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop

08006738 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b09c      	sub	sp, #112	; 0x70
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d172      	bne.n	800688a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80067a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a6:	2200      	movs	r2, #0
 80067a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330c      	adds	r3, #12
 80067b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80067c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	330c      	adds	r3, #12
 80067c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80067cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e5      	bne.n	80067aa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3314      	adds	r3, #20
 80067e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f0:	f023 0301 	bic.w	r3, r3, #1
 80067f4:	667b      	str	r3, [r7, #100]	; 0x64
 80067f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3314      	adds	r3, #20
 80067fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80067fe:	647a      	str	r2, [r7, #68]	; 0x44
 8006800:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800680c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e5      	bne.n	80067de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3314      	adds	r3, #20
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	623b      	str	r3, [r7, #32]
   return(result);
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006828:	663b      	str	r3, [r7, #96]	; 0x60
 800682a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3314      	adds	r3, #20
 8006830:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006832:	633a      	str	r2, [r7, #48]	; 0x30
 8006834:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e5      	bne.n	8006812 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006848:	2220      	movs	r2, #32
 800684a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800684e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	2b01      	cmp	r3, #1
 8006854:	d119      	bne.n	800688a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	330c      	adds	r3, #12
 800685c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	60fb      	str	r3, [r7, #12]
   return(result);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f023 0310 	bic.w	r3, r3, #16
 800686c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800686e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	330c      	adds	r3, #12
 8006874:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006876:	61fa      	str	r2, [r7, #28]
 8006878:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	69b9      	ldr	r1, [r7, #24]
 800687c:	69fa      	ldr	r2, [r7, #28]
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	617b      	str	r3, [r7, #20]
   return(result);
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e5      	bne.n	8006856 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	2b01      	cmp	r3, #1
 8006890:	d106      	bne.n	80068a0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006894:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006896:	4619      	mov	r1, r3
 8006898:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800689a:	f7fa ff03 	bl	80016a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800689e:	e002      	b.n	80068a6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80068a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80068a2:	f7ff ff53 	bl	800674c <HAL_UART_RxCpltCallback>
}
 80068a6:	bf00      	nop
 80068a8:	3770      	adds	r7, #112	; 0x70
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d108      	bne.n	80068d6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068c8:	085b      	lsrs	r3, r3, #1
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	4619      	mov	r1, r3
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f7fa fee8 	bl	80016a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068d4:	e002      	b.n	80068dc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7ff ff42 	bl	8006760 <HAL_UART_RxHalfCpltCallback>
}
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006900:	2b80      	cmp	r3, #128	; 0x80
 8006902:	bf0c      	ite	eq
 8006904:	2301      	moveq	r3, #1
 8006906:	2300      	movne	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b21      	cmp	r3, #33	; 0x21
 8006916:	d108      	bne.n	800692a <UART_DMAError+0x46>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2200      	movs	r2, #0
 8006922:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006924:	68b8      	ldr	r0, [r7, #8]
 8006926:	f000 f8c1 	bl	8006aac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006934:	2b40      	cmp	r3, #64	; 0x40
 8006936:	bf0c      	ite	eq
 8006938:	2301      	moveq	r3, #1
 800693a:	2300      	movne	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b22      	cmp	r3, #34	; 0x22
 800694a:	d108      	bne.n	800695e <UART_DMAError+0x7a>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d005      	beq.n	800695e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2200      	movs	r2, #0
 8006956:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006958:	68b8      	ldr	r0, [r7, #8]
 800695a:	f000 f8cf 	bl	8006afc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	f043 0210 	orr.w	r2, r3, #16
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800696a:	68b8      	ldr	r0, [r7, #8]
 800696c:	f7ff ff02 	bl	8006774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006970:	bf00      	nop
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b098      	sub	sp, #96	; 0x60
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	4613      	mov	r3, r2
 8006984:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	88fa      	ldrh	r2, [r7, #6]
 8006990:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2222      	movs	r2, #34	; 0x22
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	4a3e      	ldr	r2, [pc, #248]	; (8006aa0 <UART_Start_Receive_DMA+0x128>)
 80069a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	4a3d      	ldr	r2, [pc, #244]	; (8006aa4 <UART_Start_Receive_DMA+0x12c>)
 80069ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	4a3c      	ldr	r2, [pc, #240]	; (8006aa8 <UART_Start_Receive_DMA+0x130>)
 80069b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	2200      	movs	r2, #0
 80069be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80069c0:	f107 0308 	add.w	r3, r7, #8
 80069c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3304      	adds	r3, #4
 80069d0:	4619      	mov	r1, r3
 80069d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	88fb      	ldrh	r3, [r7, #6]
 80069d8:	f7fc f9f6 	bl	8002dc8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80069dc:	2300      	movs	r3, #0
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	613b      	str	r3, [r7, #16]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	330c      	adds	r3, #12
 8006a00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a10:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	330c      	adds	r3, #12
 8006a18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a1a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006a1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e5      	bne.n	80069fa <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3314      	adds	r3, #20
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	f043 0301 	orr.w	r3, r3, #1
 8006a44:	657b      	str	r3, [r7, #84]	; 0x54
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3314      	adds	r3, #20
 8006a4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a4e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006a50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e5      	bne.n	8006a2e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3314      	adds	r3, #20
 8006a68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	617b      	str	r3, [r7, #20]
   return(result);
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a78:	653b      	str	r3, [r7, #80]	; 0x50
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3314      	adds	r3, #20
 8006a80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a82:	627a      	str	r2, [r7, #36]	; 0x24
 8006a84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	6a39      	ldr	r1, [r7, #32]
 8006a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e5      	bne.n	8006a62 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3760      	adds	r7, #96	; 0x60
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	08006789 	.word	0x08006789
 8006aa4:	080068af 	.word	0x080068af
 8006aa8:	080068e5 	.word	0x080068e5

08006aac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b089      	sub	sp, #36	; 0x24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006aca:	61fb      	str	r3, [r7, #28]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	330c      	adds	r3, #12
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	61ba      	str	r2, [r7, #24]
 8006ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6979      	ldr	r1, [r7, #20]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e5      	bne.n	8006ab4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006af0:	bf00      	nop
 8006af2:	3724      	adds	r7, #36	; 0x24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b095      	sub	sp, #84	; 0x54
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	330c      	adds	r3, #12
 8006b22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b24:	643a      	str	r2, [r7, #64]	; 0x40
 8006b26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e5      	bne.n	8006b04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3314      	adds	r3, #20
 8006b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f023 0301 	bic.w	r3, r3, #1
 8006b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3314      	adds	r3, #20
 8006b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e5      	bne.n	8006b38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d119      	bne.n	8006ba8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f023 0310 	bic.w	r3, r3, #16
 8006b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	330c      	adds	r3, #12
 8006b92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b94:	61ba      	str	r2, [r7, #24]
 8006b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	6979      	ldr	r1, [r7, #20]
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e5      	bne.n	8006b74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006bb6:	bf00      	nop
 8006bb8:	3754      	adds	r7, #84	; 0x54
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f7ff fdc9 	bl	8006774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006be2:	bf00      	nop
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b085      	sub	sp, #20
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b21      	cmp	r3, #33	; 0x21
 8006bfc:	d13e      	bne.n	8006c7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c06:	d114      	bne.n	8006c32 <UART_Transmit_IT+0x48>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d110      	bne.n	8006c32 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	1c9a      	adds	r2, r3, #2
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	621a      	str	r2, [r3, #32]
 8006c30:	e008      	b.n	8006c44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	1c59      	adds	r1, r3, #1
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6211      	str	r1, [r2, #32]
 8006c3c:	781a      	ldrb	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	4619      	mov	r1, r3
 8006c52:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10f      	bne.n	8006c78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	e000      	b.n	8006c7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c7c:	2302      	movs	r3, #2
  }
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7ff fd44 	bl	8006738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b08c      	sub	sp, #48	; 0x30
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b22      	cmp	r3, #34	; 0x22
 8006ccc:	f040 80ab 	bne.w	8006e26 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd8:	d117      	bne.n	8006d0a <UART_Receive_IT+0x50>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d113      	bne.n	8006d0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d02:	1c9a      	adds	r2, r3, #2
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	629a      	str	r2, [r3, #40]	; 0x28
 8006d08:	e026      	b.n	8006d58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1c:	d007      	beq.n	8006d2e <UART_Receive_IT+0x74>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <UART_Receive_IT+0x82>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d106      	bne.n	8006d3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	701a      	strb	r2, [r3, #0]
 8006d3a:	e008      	b.n	8006d4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	4619      	mov	r1, r3
 8006d66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d15a      	bne.n	8006e22 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0220 	bic.w	r2, r2, #32
 8006d7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68da      	ldr	r2, [r3, #12]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	695a      	ldr	r2, [r3, #20]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0201 	bic.w	r2, r2, #1
 8006d9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d135      	bne.n	8006e18 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	330c      	adds	r3, #12
 8006db8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f023 0310 	bic.w	r3, r3, #16
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	330c      	adds	r3, #12
 8006dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd2:	623a      	str	r2, [r7, #32]
 8006dd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	69f9      	ldr	r1, [r7, #28]
 8006dd8:	6a3a      	ldr	r2, [r7, #32]
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	61bb      	str	r3, [r7, #24]
   return(result);
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e5      	bne.n	8006db2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0310 	and.w	r3, r3, #16
 8006df0:	2b10      	cmp	r3, #16
 8006df2:	d10a      	bne.n	8006e0a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7fa fc47 	bl	80016a4 <HAL_UARTEx_RxEventCallback>
 8006e16:	e002      	b.n	8006e1e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff fc97 	bl	800674c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e002      	b.n	8006e28 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	e000      	b.n	8006e28 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e26:	2302      	movs	r3, #2
  }
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3730      	adds	r7, #48	; 0x30
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	b09f      	sub	sp, #124	; 0x7c
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e46:	68d9      	ldr	r1, [r3, #12]
 8006e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	ea40 0301 	orr.w	r3, r0, r1
 8006e50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	431a      	orrs	r2, r3
 8006e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e74:	f021 010c 	bic.w	r1, r1, #12
 8006e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e7e:	430b      	orrs	r3, r1
 8006e80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8e:	6999      	ldr	r1, [r3, #24]
 8006e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	ea40 0301 	orr.w	r3, r0, r1
 8006e98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	4bc5      	ldr	r3, [pc, #788]	; (80071b4 <UART_SetConfig+0x384>)
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d004      	beq.n	8006eae <UART_SetConfig+0x7e>
 8006ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	4bc3      	ldr	r3, [pc, #780]	; (80071b8 <UART_SetConfig+0x388>)
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d103      	bne.n	8006eb6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006eae:	f7fd f8e3 	bl	8004078 <HAL_RCC_GetPCLK2Freq>
 8006eb2:	6778      	str	r0, [r7, #116]	; 0x74
 8006eb4:	e002      	b.n	8006ebc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006eb6:	f7fd f8cb 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 8006eba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec4:	f040 80b6 	bne.w	8007034 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eca:	461c      	mov	r4, r3
 8006ecc:	f04f 0500 	mov.w	r5, #0
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	462b      	mov	r3, r5
 8006ed4:	1891      	adds	r1, r2, r2
 8006ed6:	6439      	str	r1, [r7, #64]	; 0x40
 8006ed8:	415b      	adcs	r3, r3
 8006eda:	647b      	str	r3, [r7, #68]	; 0x44
 8006edc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ee0:	1912      	adds	r2, r2, r4
 8006ee2:	eb45 0303 	adc.w	r3, r5, r3
 8006ee6:	f04f 0000 	mov.w	r0, #0
 8006eea:	f04f 0100 	mov.w	r1, #0
 8006eee:	00d9      	lsls	r1, r3, #3
 8006ef0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ef4:	00d0      	lsls	r0, r2, #3
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	1911      	adds	r1, r2, r4
 8006efc:	6639      	str	r1, [r7, #96]	; 0x60
 8006efe:	416b      	adcs	r3, r5
 8006f00:	667b      	str	r3, [r7, #100]	; 0x64
 8006f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	461a      	mov	r2, r3
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	1891      	adds	r1, r2, r2
 8006f0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f10:	415b      	adcs	r3, r3
 8006f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006f1c:	f7f9 f9b8 	bl	8000290 <__aeabi_uldivmod>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	4ba5      	ldr	r3, [pc, #660]	; (80071bc <UART_SetConfig+0x38c>)
 8006f26:	fba3 2302 	umull	r2, r3, r3, r2
 8006f2a:	095b      	lsrs	r3, r3, #5
 8006f2c:	011e      	lsls	r6, r3, #4
 8006f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f30:	461c      	mov	r4, r3
 8006f32:	f04f 0500 	mov.w	r5, #0
 8006f36:	4622      	mov	r2, r4
 8006f38:	462b      	mov	r3, r5
 8006f3a:	1891      	adds	r1, r2, r2
 8006f3c:	6339      	str	r1, [r7, #48]	; 0x30
 8006f3e:	415b      	adcs	r3, r3
 8006f40:	637b      	str	r3, [r7, #52]	; 0x34
 8006f42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f46:	1912      	adds	r2, r2, r4
 8006f48:	eb45 0303 	adc.w	r3, r5, r3
 8006f4c:	f04f 0000 	mov.w	r0, #0
 8006f50:	f04f 0100 	mov.w	r1, #0
 8006f54:	00d9      	lsls	r1, r3, #3
 8006f56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f5a:	00d0      	lsls	r0, r2, #3
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	1911      	adds	r1, r2, r4
 8006f62:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f64:	416b      	adcs	r3, r5
 8006f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	f04f 0300 	mov.w	r3, #0
 8006f72:	1891      	adds	r1, r2, r2
 8006f74:	62b9      	str	r1, [r7, #40]	; 0x28
 8006f76:	415b      	adcs	r3, r3
 8006f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006f82:	f7f9 f985 	bl	8000290 <__aeabi_uldivmod>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4b8c      	ldr	r3, [pc, #560]	; (80071bc <UART_SetConfig+0x38c>)
 8006f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f90:	095b      	lsrs	r3, r3, #5
 8006f92:	2164      	movs	r1, #100	; 0x64
 8006f94:	fb01 f303 	mul.w	r3, r1, r3
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	00db      	lsls	r3, r3, #3
 8006f9c:	3332      	adds	r3, #50	; 0x32
 8006f9e:	4a87      	ldr	r2, [pc, #540]	; (80071bc <UART_SetConfig+0x38c>)
 8006fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa4:	095b      	lsrs	r3, r3, #5
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fac:	441e      	add	r6, r3
 8006fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f04f 0100 	mov.w	r1, #0
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	1894      	adds	r4, r2, r2
 8006fbc:	623c      	str	r4, [r7, #32]
 8006fbe:	415b      	adcs	r3, r3
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fc6:	1812      	adds	r2, r2, r0
 8006fc8:	eb41 0303 	adc.w	r3, r1, r3
 8006fcc:	f04f 0400 	mov.w	r4, #0
 8006fd0:	f04f 0500 	mov.w	r5, #0
 8006fd4:	00dd      	lsls	r5, r3, #3
 8006fd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006fda:	00d4      	lsls	r4, r2, #3
 8006fdc:	4622      	mov	r2, r4
 8006fde:	462b      	mov	r3, r5
 8006fe0:	1814      	adds	r4, r2, r0
 8006fe2:	653c      	str	r4, [r7, #80]	; 0x50
 8006fe4:	414b      	adcs	r3, r1
 8006fe6:	657b      	str	r3, [r7, #84]	; 0x54
 8006fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	461a      	mov	r2, r3
 8006fee:	f04f 0300 	mov.w	r3, #0
 8006ff2:	1891      	adds	r1, r2, r2
 8006ff4:	61b9      	str	r1, [r7, #24]
 8006ff6:	415b      	adcs	r3, r3
 8006ff8:	61fb      	str	r3, [r7, #28]
 8006ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ffe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007002:	f7f9 f945 	bl	8000290 <__aeabi_uldivmod>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4b6c      	ldr	r3, [pc, #432]	; (80071bc <UART_SetConfig+0x38c>)
 800700c:	fba3 1302 	umull	r1, r3, r3, r2
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	2164      	movs	r1, #100	; 0x64
 8007014:	fb01 f303 	mul.w	r3, r1, r3
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	3332      	adds	r3, #50	; 0x32
 800701e:	4a67      	ldr	r2, [pc, #412]	; (80071bc <UART_SetConfig+0x38c>)
 8007020:	fba2 2303 	umull	r2, r3, r2, r3
 8007024:	095b      	lsrs	r3, r3, #5
 8007026:	f003 0207 	and.w	r2, r3, #7
 800702a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4432      	add	r2, r6
 8007030:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007032:	e0b9      	b.n	80071a8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007036:	461c      	mov	r4, r3
 8007038:	f04f 0500 	mov.w	r5, #0
 800703c:	4622      	mov	r2, r4
 800703e:	462b      	mov	r3, r5
 8007040:	1891      	adds	r1, r2, r2
 8007042:	6139      	str	r1, [r7, #16]
 8007044:	415b      	adcs	r3, r3
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800704c:	1912      	adds	r2, r2, r4
 800704e:	eb45 0303 	adc.w	r3, r5, r3
 8007052:	f04f 0000 	mov.w	r0, #0
 8007056:	f04f 0100 	mov.w	r1, #0
 800705a:	00d9      	lsls	r1, r3, #3
 800705c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007060:	00d0      	lsls	r0, r2, #3
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	eb12 0804 	adds.w	r8, r2, r4
 800706a:	eb43 0905 	adc.w	r9, r3, r5
 800706e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	4618      	mov	r0, r3
 8007074:	f04f 0100 	mov.w	r1, #0
 8007078:	f04f 0200 	mov.w	r2, #0
 800707c:	f04f 0300 	mov.w	r3, #0
 8007080:	008b      	lsls	r3, r1, #2
 8007082:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007086:	0082      	lsls	r2, r0, #2
 8007088:	4640      	mov	r0, r8
 800708a:	4649      	mov	r1, r9
 800708c:	f7f9 f900 	bl	8000290 <__aeabi_uldivmod>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	4b49      	ldr	r3, [pc, #292]	; (80071bc <UART_SetConfig+0x38c>)
 8007096:	fba3 2302 	umull	r2, r3, r3, r2
 800709a:	095b      	lsrs	r3, r3, #5
 800709c:	011e      	lsls	r6, r3, #4
 800709e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070a0:	4618      	mov	r0, r3
 80070a2:	f04f 0100 	mov.w	r1, #0
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	1894      	adds	r4, r2, r2
 80070ac:	60bc      	str	r4, [r7, #8]
 80070ae:	415b      	adcs	r3, r3
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070b6:	1812      	adds	r2, r2, r0
 80070b8:	eb41 0303 	adc.w	r3, r1, r3
 80070bc:	f04f 0400 	mov.w	r4, #0
 80070c0:	f04f 0500 	mov.w	r5, #0
 80070c4:	00dd      	lsls	r5, r3, #3
 80070c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80070ca:	00d4      	lsls	r4, r2, #3
 80070cc:	4622      	mov	r2, r4
 80070ce:	462b      	mov	r3, r5
 80070d0:	1814      	adds	r4, r2, r0
 80070d2:	64bc      	str	r4, [r7, #72]	; 0x48
 80070d4:	414b      	adcs	r3, r1
 80070d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	4618      	mov	r0, r3
 80070de:	f04f 0100 	mov.w	r1, #0
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	008b      	lsls	r3, r1, #2
 80070ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070f0:	0082      	lsls	r2, r0, #2
 80070f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80070f6:	f7f9 f8cb 	bl	8000290 <__aeabi_uldivmod>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	4b2f      	ldr	r3, [pc, #188]	; (80071bc <UART_SetConfig+0x38c>)
 8007100:	fba3 1302 	umull	r1, r3, r3, r2
 8007104:	095b      	lsrs	r3, r3, #5
 8007106:	2164      	movs	r1, #100	; 0x64
 8007108:	fb01 f303 	mul.w	r3, r1, r3
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	3332      	adds	r3, #50	; 0x32
 8007112:	4a2a      	ldr	r2, [pc, #168]	; (80071bc <UART_SetConfig+0x38c>)
 8007114:	fba2 2303 	umull	r2, r3, r2, r3
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800711e:	441e      	add	r6, r3
 8007120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007122:	4618      	mov	r0, r3
 8007124:	f04f 0100 	mov.w	r1, #0
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	1894      	adds	r4, r2, r2
 800712e:	603c      	str	r4, [r7, #0]
 8007130:	415b      	adcs	r3, r3
 8007132:	607b      	str	r3, [r7, #4]
 8007134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007138:	1812      	adds	r2, r2, r0
 800713a:	eb41 0303 	adc.w	r3, r1, r3
 800713e:	f04f 0400 	mov.w	r4, #0
 8007142:	f04f 0500 	mov.w	r5, #0
 8007146:	00dd      	lsls	r5, r3, #3
 8007148:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800714c:	00d4      	lsls	r4, r2, #3
 800714e:	4622      	mov	r2, r4
 8007150:	462b      	mov	r3, r5
 8007152:	eb12 0a00 	adds.w	sl, r2, r0
 8007156:	eb43 0b01 	adc.w	fp, r3, r1
 800715a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	4618      	mov	r0, r3
 8007160:	f04f 0100 	mov.w	r1, #0
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	f04f 0300 	mov.w	r3, #0
 800716c:	008b      	lsls	r3, r1, #2
 800716e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007172:	0082      	lsls	r2, r0, #2
 8007174:	4650      	mov	r0, sl
 8007176:	4659      	mov	r1, fp
 8007178:	f7f9 f88a 	bl	8000290 <__aeabi_uldivmod>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4b0e      	ldr	r3, [pc, #56]	; (80071bc <UART_SetConfig+0x38c>)
 8007182:	fba3 1302 	umull	r1, r3, r3, r2
 8007186:	095b      	lsrs	r3, r3, #5
 8007188:	2164      	movs	r1, #100	; 0x64
 800718a:	fb01 f303 	mul.w	r3, r1, r3
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	3332      	adds	r3, #50	; 0x32
 8007194:	4a09      	ldr	r2, [pc, #36]	; (80071bc <UART_SetConfig+0x38c>)
 8007196:	fba2 2303 	umull	r2, r3, r2, r3
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	f003 020f 	and.w	r2, r3, #15
 80071a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4432      	add	r2, r6
 80071a6:	609a      	str	r2, [r3, #8]
}
 80071a8:	bf00      	nop
 80071aa:	377c      	adds	r7, #124	; 0x7c
 80071ac:	46bd      	mov	sp, r7
 80071ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b2:	bf00      	nop
 80071b4:	40011000 	.word	0x40011000
 80071b8:	40011400 	.word	0x40011400
 80071bc:	51eb851f 	.word	0x51eb851f

080071c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80071c4:	4904      	ldr	r1, [pc, #16]	; (80071d8 <MX_FATFS_Init+0x18>)
 80071c6:	4805      	ldr	r0, [pc, #20]	; (80071dc <MX_FATFS_Init+0x1c>)
 80071c8:	f003 fbd4 	bl	800a974 <FATFS_LinkDriver>
 80071cc:	4603      	mov	r3, r0
 80071ce:	461a      	mov	r2, r3
 80071d0:	4b03      	ldr	r3, [pc, #12]	; (80071e0 <MX_FATFS_Init+0x20>)
 80071d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80071d4:	bf00      	nop
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	200003dc 	.word	0x200003dc
 80071dc:	20000024 	.word	0x20000024
 80071e0:	200003e0 	.word	0x200003e0

080071e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80071e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 80071fe:	79fb      	ldrb	r3, [r7, #7]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 f9d9 	bl	80075b8 <USER_SPI_initialize>
 8007206:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	4603      	mov	r3, r0
 8007218:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800721a:	79fb      	ldrb	r3, [r7, #7]
 800721c:	4618      	mov	r0, r3
 800721e:	f000 faab 	bl	8007778 <USER_SPI_status>
 8007222:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	607a      	str	r2, [r7, #4]
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	4603      	mov	r3, r0
 800723a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800723c:	7bf8      	ldrb	r0, [r7, #15]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	f000 faae 	bl	80077a4 <USER_SPI_read>
 8007248:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	603b      	str	r3, [r7, #0]
 800725e:	4603      	mov	r3, r0
 8007260:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8007262:	7bf8      	ldrb	r0, [r7, #15]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	f000 fb01 	bl	8007870 <USER_SPI_write>
 800726e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	4603      	mov	r3, r0
 8007280:	603a      	str	r2, [r7, #0]
 8007282:	71fb      	strb	r3, [r7, #7]
 8007284:	460b      	mov	r3, r1
 8007286:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8007288:	79b9      	ldrb	r1, [r7, #6]
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fb6a 	bl	8007968 <USER_SPI_ioctl>
 8007294:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80072a8:	f7fa ffa6 	bl	80021f8 <HAL_GetTick>
 80072ac:	4603      	mov	r3, r0
 80072ae:	4a04      	ldr	r2, [pc, #16]	; (80072c0 <SPI_Timer_On+0x20>)
 80072b0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80072b2:	4a04      	ldr	r2, [pc, #16]	; (80072c4 <SPI_Timer_On+0x24>)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6013      	str	r3, [r2, #0]
}
 80072b8:	bf00      	nop
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20000848 	.word	0x20000848
 80072c4:	2000084c 	.word	0x2000084c

080072c8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80072cc:	f7fa ff94 	bl	80021f8 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	4b06      	ldr	r3, [pc, #24]	; (80072ec <SPI_Timer_Status+0x24>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	1ad2      	subs	r2, r2, r3
 80072d8:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <SPI_Timer_Status+0x28>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	429a      	cmp	r2, r3
 80072de:	bf34      	ite	cc
 80072e0:	2301      	movcc	r3, #1
 80072e2:	2300      	movcs	r3, #0
 80072e4:	b2db      	uxtb	r3, r3
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20000848 	.word	0x20000848
 80072f0:	2000084c 	.word	0x2000084c

080072f4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	4603      	mov	r3, r0
 80072fc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi2, &dat, &rxDat, 1, 50);
 80072fe:	f107 020f 	add.w	r2, r7, #15
 8007302:	1df9      	adds	r1, r7, #7
 8007304:	2332      	movs	r3, #50	; 0x32
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	2301      	movs	r3, #1
 800730a:	4804      	ldr	r0, [pc, #16]	; (800731c <xchg_spi+0x28>)
 800730c:	f7fd fcbd 	bl	8004c8a <HAL_SPI_TransmitReceive>
    return rxDat;
 8007310:	7bfb      	ldrb	r3, [r7, #15]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	200001b4 	.word	0x200001b4

08007320 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007320:	b590      	push	{r4, r7, lr}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	e00a      	b.n	8007346 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	18d4      	adds	r4, r2, r3
 8007336:	20ff      	movs	r0, #255	; 0xff
 8007338:	f7ff ffdc 	bl	80072f4 <xchg_spi>
 800733c:	4603      	mov	r3, r0
 800733e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	3301      	adds	r3, #1
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d3f0      	bcc.n	8007330 <rcvr_spi_multi+0x10>
	}
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	bd90      	pop	{r4, r7, pc}

08007358 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]
 8007366:	e009      	b.n	800737c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4413      	add	r3, r2
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff ffbf 	bl	80072f4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3301      	adds	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d3f1      	bcc.n	8007368 <xmit_spi_multi+0x10>
	}
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b086      	sub	sp, #24
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007396:	f7fa ff2f 	bl	80021f8 <HAL_GetTick>
 800739a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80073a0:	20ff      	movs	r0, #255	; 0xff
 80073a2:	f7ff ffa7 	bl	80072f4 <xchg_spi>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	2bff      	cmp	r3, #255	; 0xff
 80073ae:	d007      	beq.n	80073c0 <wait_ready+0x32>
 80073b0:	f7fa ff22 	bl	80021f8 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d8ef      	bhi.n	80073a0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2bff      	cmp	r3, #255	; 0xff
 80073c4:	bf0c      	ite	eq
 80073c6:	2301      	moveq	r3, #1
 80073c8:	2300      	movne	r3, #0
 80073ca:	b2db      	uxtb	r3, r3
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80073d8:	2201      	movs	r2, #1
 80073da:	2102      	movs	r1, #2
 80073dc:	4803      	ldr	r0, [pc, #12]	; (80073ec <despiselect+0x18>)
 80073de:	f7fc f9cb 	bl	8003778 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80073e2:	20ff      	movs	r0, #255	; 0xff
 80073e4:	f7ff ff86 	bl	80072f4 <xchg_spi>

}
 80073e8:	bf00      	nop
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	40020800 	.word	0x40020800

080073f0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80073f4:	2200      	movs	r2, #0
 80073f6:	2102      	movs	r1, #2
 80073f8:	4809      	ldr	r0, [pc, #36]	; (8007420 <spiselect+0x30>)
 80073fa:	f7fc f9bd 	bl	8003778 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80073fe:	20ff      	movs	r0, #255	; 0xff
 8007400:	f7ff ff78 	bl	80072f4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007404:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007408:	f7ff ffc1 	bl	800738e <wait_ready>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <spiselect+0x26>
 8007412:	2301      	movs	r3, #1
 8007414:	e002      	b.n	800741c <spiselect+0x2c>

	despiselect();
 8007416:	f7ff ffdd 	bl	80073d4 <despiselect>
	return 0;	/* Timeout */
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	bd80      	pop	{r7, pc}
 8007420:	40020800 	.word	0x40020800

08007424 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800742e:	20c8      	movs	r0, #200	; 0xc8
 8007430:	f7ff ff36 	bl	80072a0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007434:	20ff      	movs	r0, #255	; 0xff
 8007436:	f7ff ff5d 	bl	80072f4 <xchg_spi>
 800743a:	4603      	mov	r3, r0
 800743c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	2bff      	cmp	r3, #255	; 0xff
 8007442:	d104      	bne.n	800744e <rcvr_datablock+0x2a>
 8007444:	f7ff ff40 	bl	80072c8 <SPI_Timer_Status>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1f2      	bne.n	8007434 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	2bfe      	cmp	r3, #254	; 0xfe
 8007452:	d001      	beq.n	8007458 <rcvr_datablock+0x34>
 8007454:	2300      	movs	r3, #0
 8007456:	e00a      	b.n	800746e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff ff60 	bl	8007320 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007460:	20ff      	movs	r0, #255	; 0xff
 8007462:	f7ff ff47 	bl	80072f4 <xchg_spi>
 8007466:	20ff      	movs	r0, #255	; 0xff
 8007468:	f7ff ff44 	bl	80072f4 <xchg_spi>

	return 1;						/* Function succeeded */
 800746c:	2301      	movs	r3, #1
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	460b      	mov	r3, r1
 8007480:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007482:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007486:	f7ff ff82 	bl	800738e <wait_ready>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <xmit_datablock+0x1e>
 8007490:	2300      	movs	r3, #0
 8007492:	e01e      	b.n	80074d2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007494:	78fb      	ldrb	r3, [r7, #3]
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff ff2c 	bl	80072f4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	2bfd      	cmp	r3, #253	; 0xfd
 80074a0:	d016      	beq.n	80074d0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80074a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7ff ff56 	bl	8007358 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80074ac:	20ff      	movs	r0, #255	; 0xff
 80074ae:	f7ff ff21 	bl	80072f4 <xchg_spi>
 80074b2:	20ff      	movs	r0, #255	; 0xff
 80074b4:	f7ff ff1e 	bl	80072f4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80074b8:	20ff      	movs	r0, #255	; 0xff
 80074ba:	f7ff ff1b 	bl	80072f4 <xchg_spi>
 80074be:	4603      	mov	r3, r0
 80074c0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	f003 031f 	and.w	r3, r3, #31
 80074c8:	2b05      	cmp	r3, #5
 80074ca:	d001      	beq.n	80074d0 <xmit_datablock+0x5a>
 80074cc:	2300      	movs	r3, #0
 80074ce:	e000      	b.n	80074d2 <xmit_datablock+0x5c>
	}
	return 1;
 80074d0:	2301      	movs	r3, #1
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	4603      	mov	r3, r0
 80074e2:	6039      	str	r1, [r7, #0]
 80074e4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80074e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	da0e      	bge.n	800750c <send_cmd+0x32>
		cmd &= 0x7F;
 80074ee:	79fb      	ldrb	r3, [r7, #7]
 80074f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074f4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80074f6:	2100      	movs	r1, #0
 80074f8:	2037      	movs	r0, #55	; 0x37
 80074fa:	f7ff ffee 	bl	80074da <send_cmd>
 80074fe:	4603      	mov	r3, r0
 8007500:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007502:	7bbb      	ldrb	r3, [r7, #14]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d901      	bls.n	800750c <send_cmd+0x32>
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	e051      	b.n	80075b0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	2b0c      	cmp	r3, #12
 8007510:	d008      	beq.n	8007524 <send_cmd+0x4a>
		despiselect();
 8007512:	f7ff ff5f 	bl	80073d4 <despiselect>
		if (!spiselect()) return 0xFF;
 8007516:	f7ff ff6b 	bl	80073f0 <spiselect>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <send_cmd+0x4a>
 8007520:	23ff      	movs	r3, #255	; 0xff
 8007522:	e045      	b.n	80075b0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007524:	79fb      	ldrb	r3, [r7, #7]
 8007526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800752a:	b2db      	uxtb	r3, r3
 800752c:	4618      	mov	r0, r3
 800752e:	f7ff fee1 	bl	80072f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	0e1b      	lsrs	r3, r3, #24
 8007536:	b2db      	uxtb	r3, r3
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff fedb 	bl	80072f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	0c1b      	lsrs	r3, r3, #16
 8007542:	b2db      	uxtb	r3, r3
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff fed5 	bl	80072f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	0a1b      	lsrs	r3, r3, #8
 800754e:	b2db      	uxtb	r3, r3
 8007550:	4618      	mov	r0, r3
 8007552:	f7ff fecf 	bl	80072f4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff feca 	bl	80072f4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007560:	2301      	movs	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007564:	79fb      	ldrb	r3, [r7, #7]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <send_cmd+0x94>
 800756a:	2395      	movs	r3, #149	; 0x95
 800756c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800756e:	79fb      	ldrb	r3, [r7, #7]
 8007570:	2b08      	cmp	r3, #8
 8007572:	d101      	bne.n	8007578 <send_cmd+0x9e>
 8007574:	2387      	movs	r3, #135	; 0x87
 8007576:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff feba 	bl	80072f4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007580:	79fb      	ldrb	r3, [r7, #7]
 8007582:	2b0c      	cmp	r3, #12
 8007584:	d102      	bne.n	800758c <send_cmd+0xb2>
 8007586:	20ff      	movs	r0, #255	; 0xff
 8007588:	f7ff feb4 	bl	80072f4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800758c:	230a      	movs	r3, #10
 800758e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007590:	20ff      	movs	r0, #255	; 0xff
 8007592:	f7ff feaf 	bl	80072f4 <xchg_spi>
 8007596:	4603      	mov	r3, r0
 8007598:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800759a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	da05      	bge.n	80075ae <send_cmd+0xd4>
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	73fb      	strb	r3, [r7, #15]
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1f0      	bne.n	8007590 <send_cmd+0xb6>

	return res;							/* Return received response */
 80075ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80075b8:	b590      	push	{r4, r7, lr}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <USER_SPI_initialize+0x14>
 80075c8:	2301      	movs	r3, #1
 80075ca:	e0cb      	b.n	8007764 <USER_SPI_initialize+0x1ac>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80075cc:	4b67      	ldr	r3, [pc, #412]	; (800776c <USER_SPI_initialize+0x1b4>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <USER_SPI_initialize+0x2a>
 80075da:	4b64      	ldr	r3, [pc, #400]	; (800776c <USER_SPI_initialize+0x1b4>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	e0c0      	b.n	8007764 <USER_SPI_initialize+0x1ac>

	FCLK_SLOW();
 80075e2:	4b63      	ldr	r3, [pc, #396]	; (8007770 <USER_SPI_initialize+0x1b8>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075ea:	621a      	str	r2, [r3, #32]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80075ec:	230a      	movs	r3, #10
 80075ee:	73fb      	strb	r3, [r7, #15]
 80075f0:	e005      	b.n	80075fe <USER_SPI_initialize+0x46>
 80075f2:	20ff      	movs	r0, #255	; 0xff
 80075f4:	f7ff fe7e 	bl	80072f4 <xchg_spi>
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	73fb      	strb	r3, [r7, #15]
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1f6      	bne.n	80075f2 <USER_SPI_initialize+0x3a>

	ty = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007608:	2100      	movs	r1, #0
 800760a:	2000      	movs	r0, #0
 800760c:	f7ff ff65 	bl	80074da <send_cmd>
 8007610:	4603      	mov	r3, r0
 8007612:	2b01      	cmp	r3, #1
 8007614:	f040 808b 	bne.w	800772e <USER_SPI_initialize+0x176>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800761c:	f7ff fe40 	bl	80072a0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007620:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007624:	2008      	movs	r0, #8
 8007626:	f7ff ff58 	bl	80074da <send_cmd>
 800762a:	4603      	mov	r3, r0
 800762c:	2b01      	cmp	r3, #1
 800762e:	d151      	bne.n	80076d4 <USER_SPI_initialize+0x11c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
 8007634:	e00d      	b.n	8007652 <USER_SPI_initialize+0x9a>
 8007636:	7bfc      	ldrb	r4, [r7, #15]
 8007638:	20ff      	movs	r0, #255	; 0xff
 800763a:	f7ff fe5b 	bl	80072f4 <xchg_spi>
 800763e:	4603      	mov	r3, r0
 8007640:	461a      	mov	r2, r3
 8007642:	f107 0310 	add.w	r3, r7, #16
 8007646:	4423      	add	r3, r4
 8007648:	f803 2c08 	strb.w	r2, [r3, #-8]
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	3301      	adds	r3, #1
 8007650:	73fb      	strb	r3, [r7, #15]
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	2b03      	cmp	r3, #3
 8007656:	d9ee      	bls.n	8007636 <USER_SPI_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007658:	7abb      	ldrb	r3, [r7, #10]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d167      	bne.n	800772e <USER_SPI_initialize+0x176>
 800765e:	7afb      	ldrb	r3, [r7, #11]
 8007660:	2baa      	cmp	r3, #170	; 0xaa
 8007662:	d164      	bne.n	800772e <USER_SPI_initialize+0x176>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007664:	bf00      	nop
 8007666:	f7ff fe2f 	bl	80072c8 <SPI_Timer_Status>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d007      	beq.n	8007680 <USER_SPI_initialize+0xc8>
 8007670:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007674:	20a9      	movs	r0, #169	; 0xa9
 8007676:	f7ff ff30 	bl	80074da <send_cmd>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1f2      	bne.n	8007666 <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007680:	f7ff fe22 	bl	80072c8 <SPI_Timer_Status>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d051      	beq.n	800772e <USER_SPI_initialize+0x176>
 800768a:	2100      	movs	r1, #0
 800768c:	203a      	movs	r0, #58	; 0x3a
 800768e:	f7ff ff24 	bl	80074da <send_cmd>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d14a      	bne.n	800772e <USER_SPI_initialize+0x176>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]
 800769c:	e00d      	b.n	80076ba <USER_SPI_initialize+0x102>
 800769e:	7bfc      	ldrb	r4, [r7, #15]
 80076a0:	20ff      	movs	r0, #255	; 0xff
 80076a2:	f7ff fe27 	bl	80072f4 <xchg_spi>
 80076a6:	4603      	mov	r3, r0
 80076a8:	461a      	mov	r2, r3
 80076aa:	f107 0310 	add.w	r3, r7, #16
 80076ae:	4423      	add	r3, r4
 80076b0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	3301      	adds	r3, #1
 80076b8:	73fb      	strb	r3, [r7, #15]
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d9ee      	bls.n	800769e <USER_SPI_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80076c0:	7a3b      	ldrb	r3, [r7, #8]
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <USER_SPI_initialize+0x116>
 80076ca:	230c      	movs	r3, #12
 80076cc:	e000      	b.n	80076d0 <USER_SPI_initialize+0x118>
 80076ce:	2304      	movs	r3, #4
 80076d0:	737b      	strb	r3, [r7, #13]
 80076d2:	e02c      	b.n	800772e <USER_SPI_initialize+0x176>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80076d4:	2100      	movs	r1, #0
 80076d6:	20a9      	movs	r0, #169	; 0xa9
 80076d8:	f7ff feff 	bl	80074da <send_cmd>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d804      	bhi.n	80076ec <USER_SPI_initialize+0x134>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80076e2:	2302      	movs	r3, #2
 80076e4:	737b      	strb	r3, [r7, #13]
 80076e6:	23a9      	movs	r3, #169	; 0xa9
 80076e8:	73bb      	strb	r3, [r7, #14]
 80076ea:	e003      	b.n	80076f4 <USER_SPI_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80076ec:	2301      	movs	r3, #1
 80076ee:	737b      	strb	r3, [r7, #13]
 80076f0:	2301      	movs	r3, #1
 80076f2:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80076f4:	bf00      	nop
 80076f6:	f7ff fde7 	bl	80072c8 <SPI_Timer_Status>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d007      	beq.n	8007710 <USER_SPI_initialize+0x158>
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	2100      	movs	r1, #0
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff fee8 	bl	80074da <send_cmd>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1f2      	bne.n	80076f6 <USER_SPI_initialize+0x13e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007710:	f7ff fdda 	bl	80072c8 <SPI_Timer_Status>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d007      	beq.n	800772a <USER_SPI_initialize+0x172>
 800771a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800771e:	2010      	movs	r0, #16
 8007720:	f7ff fedb 	bl	80074da <send_cmd>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <USER_SPI_initialize+0x176>
				ty = 0;
 800772a:	2300      	movs	r3, #0
 800772c:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 800772e:	4a11      	ldr	r2, [pc, #68]	; (8007774 <USER_SPI_initialize+0x1bc>)
 8007730:	7b7b      	ldrb	r3, [r7, #13]
 8007732:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007734:	f7ff fe4e 	bl	80073d4 <despiselect>

	if (ty) {			/* OK */
 8007738:	7b7b      	ldrb	r3, [r7, #13]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00c      	beq.n	8007758 <USER_SPI_initialize+0x1a0>
		FCLK_FAST();			/* Set fast clock */
 800773e:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <USER_SPI_initialize+0x1b8>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2210      	movs	r2, #16
 8007744:	621a      	str	r2, [r3, #32]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007746:	4b09      	ldr	r3, [pc, #36]	; (800776c <USER_SPI_initialize+0x1b4>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	f023 0301 	bic.w	r3, r3, #1
 8007750:	b2da      	uxtb	r2, r3
 8007752:	4b06      	ldr	r3, [pc, #24]	; (800776c <USER_SPI_initialize+0x1b4>)
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	e002      	b.n	800775e <USER_SPI_initialize+0x1a6>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007758:	4b04      	ldr	r3, [pc, #16]	; (800776c <USER_SPI_initialize+0x1b4>)
 800775a:	2201      	movs	r2, #1
 800775c:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800775e:	4b03      	ldr	r3, [pc, #12]	; (800776c <USER_SPI_initialize+0x1b4>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	b2db      	uxtb	r3, r3
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	bd90      	pop	{r4, r7, pc}
 800776c:	20000038 	.word	0x20000038
 8007770:	200001b4 	.word	0x200001b4
 8007774:	200000cc 	.word	0x200000cc

08007778 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <USER_SPI_status+0x14>
 8007788:	2301      	movs	r3, #1
 800778a:	e002      	b.n	8007792 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800778c:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <USER_SPI_status+0x28>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	b2db      	uxtb	r3, r3
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000038 	.word	0x20000038

080077a4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	607a      	str	r2, [r7, #4]
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <USER_SPI_read+0x1c>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <USER_SPI_read+0x20>
 80077c0:	2304      	movs	r3, #4
 80077c2:	e04d      	b.n	8007860 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80077c4:	4b28      	ldr	r3, [pc, #160]	; (8007868 <USER_SPI_read+0xc4>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <USER_SPI_read+0x32>
 80077d2:	2303      	movs	r3, #3
 80077d4:	e044      	b.n	8007860 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80077d6:	4b25      	ldr	r3, [pc, #148]	; (800786c <USER_SPI_read+0xc8>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	f003 0308 	and.w	r3, r3, #8
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d102      	bne.n	80077e8 <USER_SPI_read+0x44>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	025b      	lsls	r3, r3, #9
 80077e6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d111      	bne.n	8007812 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	2011      	movs	r0, #17
 80077f2:	f7ff fe72 	bl	80074da <send_cmd>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d129      	bne.n	8007850 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80077fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007800:	68b8      	ldr	r0, [r7, #8]
 8007802:	f7ff fe0f 	bl	8007424 <rcvr_datablock>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d021      	beq.n	8007850 <USER_SPI_read+0xac>
			count = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	e01e      	b.n	8007850 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	2012      	movs	r0, #18
 8007816:	f7ff fe60 	bl	80074da <send_cmd>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d117      	bne.n	8007850 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007824:	68b8      	ldr	r0, [r7, #8]
 8007826:	f7ff fdfd 	bl	8007424 <rcvr_datablock>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00a      	beq.n	8007846 <USER_SPI_read+0xa2>
				buff += 512;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007836:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	3b01      	subs	r3, #1
 800783c:	603b      	str	r3, [r7, #0]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1ed      	bne.n	8007820 <USER_SPI_read+0x7c>
 8007844:	e000      	b.n	8007848 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007846:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007848:	2100      	movs	r1, #0
 800784a:	200c      	movs	r0, #12
 800784c:	f7ff fe45 	bl	80074da <send_cmd>
		}
	}
	despiselect();
 8007850:	f7ff fdc0 	bl	80073d4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	bf14      	ite	ne
 800785a:	2301      	movne	r3, #1
 800785c:	2300      	moveq	r3, #0
 800785e:	b2db      	uxtb	r3, r3
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20000038 	.word	0x20000038
 800786c:	200000cc 	.word	0x200000cc

08007870 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	607a      	str	r2, [r7, #4]
 800787a:	603b      	str	r3, [r7, #0]
 800787c:	4603      	mov	r3, r0
 800787e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <USER_SPI_write+0x1c>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <USER_SPI_write+0x20>
 800788c:	2304      	movs	r3, #4
 800788e:	e063      	b.n	8007958 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007890:	4b33      	ldr	r3, [pc, #204]	; (8007960 <USER_SPI_write+0xf0>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <USER_SPI_write+0x32>
 800789e:	2303      	movs	r3, #3
 80078a0:	e05a      	b.n	8007958 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80078a2:	4b2f      	ldr	r3, [pc, #188]	; (8007960 <USER_SPI_write+0xf0>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <USER_SPI_write+0x44>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e051      	b.n	8007958 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80078b4:	4b2b      	ldr	r3, [pc, #172]	; (8007964 <USER_SPI_write+0xf4>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <USER_SPI_write+0x56>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	025b      	lsls	r3, r3, #9
 80078c4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d110      	bne.n	80078ee <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	2018      	movs	r0, #24
 80078d0:	f7ff fe03 	bl	80074da <send_cmd>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d136      	bne.n	8007948 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80078da:	21fe      	movs	r1, #254	; 0xfe
 80078dc:	68b8      	ldr	r0, [r7, #8]
 80078de:	f7ff fdca 	bl	8007476 <xmit_datablock>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d02f      	beq.n	8007948 <USER_SPI_write+0xd8>
			count = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	e02c      	b.n	8007948 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80078ee:	4b1d      	ldr	r3, [pc, #116]	; (8007964 <USER_SPI_write+0xf4>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	f003 0306 	and.w	r3, r3, #6
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <USER_SPI_write+0x92>
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	2097      	movs	r0, #151	; 0x97
 80078fe:	f7ff fdec 	bl	80074da <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	2019      	movs	r0, #25
 8007906:	f7ff fde8 	bl	80074da <send_cmd>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d11b      	bne.n	8007948 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007910:	21fc      	movs	r1, #252	; 0xfc
 8007912:	68b8      	ldr	r0, [r7, #8]
 8007914:	f7ff fdaf 	bl	8007476 <xmit_datablock>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <USER_SPI_write+0xc4>
				buff += 512;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007924:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	3b01      	subs	r3, #1
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1ee      	bne.n	8007910 <USER_SPI_write+0xa0>
 8007932:	e000      	b.n	8007936 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007934:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007936:	21fd      	movs	r1, #253	; 0xfd
 8007938:	2000      	movs	r0, #0
 800793a:	f7ff fd9c 	bl	8007476 <xmit_datablock>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <USER_SPI_write+0xd8>
 8007944:	2301      	movs	r3, #1
 8007946:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007948:	f7ff fd44 	bl	80073d4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	bf14      	ite	ne
 8007952:	2301      	movne	r3, #1
 8007954:	2300      	moveq	r3, #0
 8007956:	b2db      	uxtb	r3, r3
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	20000038 	.word	0x20000038
 8007964:	200000cc 	.word	0x200000cc

08007968 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08c      	sub	sp, #48	; 0x30
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	603a      	str	r2, [r7, #0]
 8007972:	71fb      	strb	r3, [r7, #7]
 8007974:	460b      	mov	r3, r1
 8007976:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007978:	79fb      	ldrb	r3, [r7, #7]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <USER_SPI_ioctl+0x1a>
 800797e:	2304      	movs	r3, #4
 8007980:	e15a      	b.n	8007c38 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007982:	4baf      	ldr	r3, [pc, #700]	; (8007c40 <USER_SPI_ioctl+0x2d8>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <USER_SPI_ioctl+0x2c>
 8007990:	2303      	movs	r3, #3
 8007992:	e151      	b.n	8007c38 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800799a:	79bb      	ldrb	r3, [r7, #6]
 800799c:	2b04      	cmp	r3, #4
 800799e:	f200 8136 	bhi.w	8007c0e <USER_SPI_ioctl+0x2a6>
 80079a2:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <USER_SPI_ioctl+0x40>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	080079bd 	.word	0x080079bd
 80079ac:	080079d1 	.word	0x080079d1
 80079b0:	08007c0f 	.word	0x08007c0f
 80079b4:	08007a7d 	.word	0x08007a7d
 80079b8:	08007b73 	.word	0x08007b73
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80079bc:	f7ff fd18 	bl	80073f0 <spiselect>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 8127 	beq.w	8007c16 <USER_SPI_ioctl+0x2ae>
 80079c8:	2300      	movs	r3, #0
 80079ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80079ce:	e122      	b.n	8007c16 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80079d0:	2100      	movs	r1, #0
 80079d2:	2009      	movs	r0, #9
 80079d4:	f7ff fd81 	bl	80074da <send_cmd>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f040 811d 	bne.w	8007c1a <USER_SPI_ioctl+0x2b2>
 80079e0:	f107 030c 	add.w	r3, r7, #12
 80079e4:	2110      	movs	r1, #16
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff fd1c 	bl	8007424 <rcvr_datablock>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 8113 	beq.w	8007c1a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80079f4:	7b3b      	ldrb	r3, [r7, #12]
 80079f6:	099b      	lsrs	r3, r3, #6
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d111      	bne.n	8007a22 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80079fe:	7d7b      	ldrb	r3, [r7, #21]
 8007a00:	461a      	mov	r2, r3
 8007a02:	7d3b      	ldrb	r3, [r7, #20]
 8007a04:	021b      	lsls	r3, r3, #8
 8007a06:	4413      	add	r3, r2
 8007a08:	461a      	mov	r2, r3
 8007a0a:	7cfb      	ldrb	r3, [r7, #19]
 8007a0c:	041b      	lsls	r3, r3, #16
 8007a0e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007a12:	4413      	add	r3, r2
 8007a14:	3301      	adds	r3, #1
 8007a16:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	029a      	lsls	r2, r3, #10
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	e028      	b.n	8007a74 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007a22:	7c7b      	ldrb	r3, [r7, #17]
 8007a24:	f003 030f 	and.w	r3, r3, #15
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	7dbb      	ldrb	r3, [r7, #22]
 8007a2c:	09db      	lsrs	r3, r3, #7
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	4413      	add	r3, r2
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	7d7b      	ldrb	r3, [r7, #21]
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	f003 0306 	and.w	r3, r3, #6
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	4413      	add	r3, r2
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	3302      	adds	r3, #2
 8007a46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007a4a:	7d3b      	ldrb	r3, [r7, #20]
 8007a4c:	099b      	lsrs	r3, r3, #6
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	461a      	mov	r2, r3
 8007a52:	7cfb      	ldrb	r3, [r7, #19]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	441a      	add	r2, r3
 8007a58:	7cbb      	ldrb	r3, [r7, #18]
 8007a5a:	029b      	lsls	r3, r3, #10
 8007a5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a60:	4413      	add	r3, r2
 8007a62:	3301      	adds	r3, #1
 8007a64:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007a66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007a6a:	3b09      	subs	r3, #9
 8007a6c:	69fa      	ldr	r2, [r7, #28]
 8007a6e:	409a      	lsls	r2, r3
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007a7a:	e0ce      	b.n	8007c1a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007a7c:	4b71      	ldr	r3, [pc, #452]	; (8007c44 <USER_SPI_ioctl+0x2dc>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d031      	beq.n	8007aec <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007a88:	2100      	movs	r1, #0
 8007a8a:	208d      	movs	r0, #141	; 0x8d
 8007a8c:	f7ff fd25 	bl	80074da <send_cmd>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f040 80c3 	bne.w	8007c1e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007a98:	20ff      	movs	r0, #255	; 0xff
 8007a9a:	f7ff fc2b 	bl	80072f4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007a9e:	f107 030c 	add.w	r3, r7, #12
 8007aa2:	2110      	movs	r1, #16
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff fcbd 	bl	8007424 <rcvr_datablock>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80b6 	beq.w	8007c1e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007ab2:	2330      	movs	r3, #48	; 0x30
 8007ab4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007ab8:	e007      	b.n	8007aca <USER_SPI_ioctl+0x162>
 8007aba:	20ff      	movs	r0, #255	; 0xff
 8007abc:	f7ff fc1a 	bl	80072f4 <xchg_spi>
 8007ac0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007aca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1f3      	bne.n	8007aba <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007ad2:	7dbb      	ldrb	r3, [r7, #22]
 8007ad4:	091b      	lsrs	r3, r3, #4
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	461a      	mov	r2, r3
 8007ada:	2310      	movs	r3, #16
 8007adc:	fa03 f202 	lsl.w	r2, r3, r2
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007aea:	e098      	b.n	8007c1e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007aec:	2100      	movs	r1, #0
 8007aee:	2009      	movs	r0, #9
 8007af0:	f7ff fcf3 	bl	80074da <send_cmd>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f040 8091 	bne.w	8007c1e <USER_SPI_ioctl+0x2b6>
 8007afc:	f107 030c 	add.w	r3, r7, #12
 8007b00:	2110      	movs	r1, #16
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff fc8e 	bl	8007424 <rcvr_datablock>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 8087 	beq.w	8007c1e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007b10:	4b4c      	ldr	r3, [pc, #304]	; (8007c44 <USER_SPI_ioctl+0x2dc>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	f003 0302 	and.w	r3, r3, #2
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d012      	beq.n	8007b42 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007b1c:	7dbb      	ldrb	r3, [r7, #22]
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007b24:	7dfa      	ldrb	r2, [r7, #23]
 8007b26:	09d2      	lsrs	r2, r2, #7
 8007b28:	b2d2      	uxtb	r2, r2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	7e7b      	ldrb	r3, [r7, #25]
 8007b30:	099b      	lsrs	r3, r3, #6
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	3b01      	subs	r3, #1
 8007b36:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	e013      	b.n	8007b6a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007b42:	7dbb      	ldrb	r3, [r7, #22]
 8007b44:	109b      	asrs	r3, r3, #2
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f003 031f 	and.w	r3, r3, #31
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	7dfa      	ldrb	r2, [r7, #23]
 8007b50:	00d2      	lsls	r2, r2, #3
 8007b52:	f002 0218 	and.w	r2, r2, #24
 8007b56:	7df9      	ldrb	r1, [r7, #23]
 8007b58:	0949      	lsrs	r1, r1, #5
 8007b5a:	b2c9      	uxtb	r1, r1
 8007b5c:	440a      	add	r2, r1
 8007b5e:	3201      	adds	r2, #1
 8007b60:	fb02 f303 	mul.w	r3, r2, r3
 8007b64:	461a      	mov	r2, r3
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007b70:	e055      	b.n	8007c1e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007b72:	4b34      	ldr	r3, [pc, #208]	; (8007c44 <USER_SPI_ioctl+0x2dc>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	f003 0306 	and.w	r3, r3, #6
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d051      	beq.n	8007c22 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007b7e:	f107 020c 	add.w	r2, r7, #12
 8007b82:	79fb      	ldrb	r3, [r7, #7]
 8007b84:	210b      	movs	r1, #11
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff feee 	bl	8007968 <USER_SPI_ioctl>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d149      	bne.n	8007c26 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007b92:	7b3b      	ldrb	r3, [r7, #12]
 8007b94:	099b      	lsrs	r3, r3, #6
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d104      	bne.n	8007ba6 <USER_SPI_ioctl+0x23e>
 8007b9c:	7dbb      	ldrb	r3, [r7, #22]
 8007b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d041      	beq.n	8007c2a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	623b      	str	r3, [r7, #32]
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8007bb6:	4b23      	ldr	r3, [pc, #140]	; (8007c44 <USER_SPI_ioctl+0x2dc>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	f003 0308 	and.w	r3, r3, #8
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d105      	bne.n	8007bce <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	025b      	lsls	r3, r3, #9
 8007bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	025b      	lsls	r3, r3, #9
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007bce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bd0:	2020      	movs	r0, #32
 8007bd2:	f7ff fc82 	bl	80074da <send_cmd>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d128      	bne.n	8007c2e <USER_SPI_ioctl+0x2c6>
 8007bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bde:	2021      	movs	r0, #33	; 0x21
 8007be0:	f7ff fc7b 	bl	80074da <send_cmd>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d121      	bne.n	8007c2e <USER_SPI_ioctl+0x2c6>
 8007bea:	2100      	movs	r1, #0
 8007bec:	2026      	movs	r0, #38	; 0x26
 8007bee:	f7ff fc74 	bl	80074da <send_cmd>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d11a      	bne.n	8007c2e <USER_SPI_ioctl+0x2c6>
 8007bf8:	f247 5030 	movw	r0, #30000	; 0x7530
 8007bfc:	f7ff fbc7 	bl	800738e <wait_ready>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d013      	beq.n	8007c2e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007c06:	2300      	movs	r3, #0
 8007c08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007c0c:	e00f      	b.n	8007c2e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007c0e:	2304      	movs	r3, #4
 8007c10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007c14:	e00c      	b.n	8007c30 <USER_SPI_ioctl+0x2c8>
		break;
 8007c16:	bf00      	nop
 8007c18:	e00a      	b.n	8007c30 <USER_SPI_ioctl+0x2c8>
		break;
 8007c1a:	bf00      	nop
 8007c1c:	e008      	b.n	8007c30 <USER_SPI_ioctl+0x2c8>
		break;
 8007c1e:	bf00      	nop
 8007c20:	e006      	b.n	8007c30 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007c22:	bf00      	nop
 8007c24:	e004      	b.n	8007c30 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007c26:	bf00      	nop
 8007c28:	e002      	b.n	8007c30 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007c2a:	bf00      	nop
 8007c2c:	e000      	b.n	8007c30 <USER_SPI_ioctl+0x2c8>
		break;
 8007c2e:	bf00      	nop
	}

	despiselect();
 8007c30:	f7ff fbd0 	bl	80073d4 <despiselect>

	return res;
 8007c34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3730      	adds	r7, #48	; 0x30
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20000038 	.word	0x20000038
 8007c44:	200000cc 	.word	0x200000cc

08007c48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	4603      	mov	r3, r0
 8007c50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	4a08      	ldr	r2, [pc, #32]	; (8007c78 <disk_status+0x30>)
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	79fa      	ldrb	r2, [r7, #7]
 8007c60:	4905      	ldr	r1, [pc, #20]	; (8007c78 <disk_status+0x30>)
 8007c62:	440a      	add	r2, r1
 8007c64:	7a12      	ldrb	r2, [r2, #8]
 8007c66:	4610      	mov	r0, r2
 8007c68:	4798      	blx	r3
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	20000118 	.word	0x20000118

08007c7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007c8a:	79fb      	ldrb	r3, [r7, #7]
 8007c8c:	4a0d      	ldr	r2, [pc, #52]	; (8007cc4 <disk_initialize+0x48>)
 8007c8e:	5cd3      	ldrb	r3, [r2, r3]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d111      	bne.n	8007cb8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007c94:	79fb      	ldrb	r3, [r7, #7]
 8007c96:	4a0b      	ldr	r2, [pc, #44]	; (8007cc4 <disk_initialize+0x48>)
 8007c98:	2101      	movs	r1, #1
 8007c9a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007c9c:	79fb      	ldrb	r3, [r7, #7]
 8007c9e:	4a09      	ldr	r2, [pc, #36]	; (8007cc4 <disk_initialize+0x48>)
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	79fa      	ldrb	r2, [r7, #7]
 8007caa:	4906      	ldr	r1, [pc, #24]	; (8007cc4 <disk_initialize+0x48>)
 8007cac:	440a      	add	r2, r1
 8007cae:	7a12      	ldrb	r2, [r2, #8]
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4798      	blx	r3
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20000118 	.word	0x20000118

08007cc8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007cc8:	b590      	push	{r4, r7, lr}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	607a      	str	r2, [r7, #4]
 8007cd2:	603b      	str	r3, [r7, #0]
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	4a0a      	ldr	r2, [pc, #40]	; (8007d04 <disk_read+0x3c>)
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	689c      	ldr	r4, [r3, #8]
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	4a07      	ldr	r2, [pc, #28]	; (8007d04 <disk_read+0x3c>)
 8007ce8:	4413      	add	r3, r2
 8007cea:	7a18      	ldrb	r0, [r3, #8]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	47a0      	blx	r4
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd90      	pop	{r4, r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20000118 	.word	0x20000118

08007d08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007d08:	b590      	push	{r4, r7, lr}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	607a      	str	r2, [r7, #4]
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	4603      	mov	r3, r0
 8007d16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
 8007d1a:	4a0a      	ldr	r2, [pc, #40]	; (8007d44 <disk_write+0x3c>)
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	68dc      	ldr	r4, [r3, #12]
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	4a07      	ldr	r2, [pc, #28]	; (8007d44 <disk_write+0x3c>)
 8007d28:	4413      	add	r3, r2
 8007d2a:	7a18      	ldrb	r0, [r3, #8]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	68b9      	ldr	r1, [r7, #8]
 8007d32:	47a0      	blx	r4
 8007d34:	4603      	mov	r3, r0
 8007d36:	75fb      	strb	r3, [r7, #23]
  return res;
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd90      	pop	{r4, r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000118 	.word	0x20000118

08007d48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	4603      	mov	r3, r0
 8007d50:	603a      	str	r2, [r7, #0]
 8007d52:	71fb      	strb	r3, [r7, #7]
 8007d54:	460b      	mov	r3, r1
 8007d56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	4a09      	ldr	r2, [pc, #36]	; (8007d80 <disk_ioctl+0x38>)
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	79fa      	ldrb	r2, [r7, #7]
 8007d66:	4906      	ldr	r1, [pc, #24]	; (8007d80 <disk_ioctl+0x38>)
 8007d68:	440a      	add	r2, r1
 8007d6a:	7a10      	ldrb	r0, [r2, #8]
 8007d6c:	79b9      	ldrb	r1, [r7, #6]
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	4798      	blx	r3
 8007d72:	4603      	mov	r3, r0
 8007d74:	73fb      	strb	r3, [r7, #15]
  return res;
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	20000118 	.word	0x20000118

08007d84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007d94:	89fb      	ldrh	r3, [r7, #14]
 8007d96:	021b      	lsls	r3, r3, #8
 8007d98:	b21a      	sxth	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	b21b      	sxth	r3, r3
 8007da0:	4313      	orrs	r3, r2
 8007da2:	b21b      	sxth	r3, r3
 8007da4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007da6:	89fb      	ldrh	r3, [r7, #14]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3303      	adds	r3, #3
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	021b      	lsls	r3, r3, #8
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	3202      	adds	r2, #2
 8007dcc:	7812      	ldrb	r2, [r2, #0]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	3201      	adds	r2, #1
 8007dda:	7812      	ldrb	r2, [r2, #0]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	021b      	lsls	r3, r3, #8
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	7812      	ldrb	r2, [r2, #0]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]
	return rv;
 8007dec:	68fb      	ldr	r3, [r7, #12]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	460b      	mov	r3, r1
 8007e04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	607a      	str	r2, [r7, #4]
 8007e0c:	887a      	ldrh	r2, [r7, #2]
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	701a      	strb	r2, [r3, #0]
 8007e12:	887b      	ldrh	r3, [r7, #2]
 8007e14:	0a1b      	lsrs	r3, r3, #8
 8007e16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	1c5a      	adds	r2, r3, #1
 8007e1c:	607a      	str	r2, [r7, #4]
 8007e1e:	887a      	ldrh	r2, [r7, #2]
 8007e20:	b2d2      	uxtb	r2, r2
 8007e22:	701a      	strb	r2, [r3, #0]
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	b2d2      	uxtb	r2, r2
 8007e44:	701a      	strb	r2, [r3, #0]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	0a1b      	lsrs	r3, r3, #8
 8007e4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	1c5a      	adds	r2, r3, #1
 8007e50:	607a      	str	r2, [r7, #4]
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	b2d2      	uxtb	r2, r2
 8007e56:	701a      	strb	r2, [r3, #0]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	0a1b      	lsrs	r3, r3, #8
 8007e5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	b2d2      	uxtb	r2, r2
 8007e68:	701a      	strb	r2, [r3, #0]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	0a1b      	lsrs	r3, r3, #8
 8007e6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	1c5a      	adds	r2, r3, #1
 8007e74:	607a      	str	r2, [r7, #4]
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	b2d2      	uxtb	r2, r2
 8007e7a:	701a      	strb	r2, [r3, #0]
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007e88:	b480      	push	{r7}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00d      	beq.n	8007ebe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	1c53      	adds	r3, r2, #1
 8007ea6:	613b      	str	r3, [r7, #16]
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	1c59      	adds	r1, r3, #1
 8007eac:	6179      	str	r1, [r7, #20]
 8007eae:	7812      	ldrb	r2, [r2, #0]
 8007eb0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	607b      	str	r3, [r7, #4]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1f1      	bne.n	8007ea2 <mem_cpy+0x1a>
	}
}
 8007ebe:	bf00      	nop
 8007ec0:	371c      	adds	r7, #28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007eca:	b480      	push	{r7}
 8007ecc:	b087      	sub	sp, #28
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	617a      	str	r2, [r7, #20]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	b2d2      	uxtb	r2, r2
 8007ee4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	607b      	str	r3, [r7, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1f3      	bne.n	8007eda <mem_set+0x10>
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	371c      	adds	r7, #28
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007f00:	b480      	push	{r7}
 8007f02:	b089      	sub	sp, #36	; 0x24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	61fb      	str	r3, [r7, #28]
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007f14:	2300      	movs	r3, #0
 8007f16:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	61fa      	str	r2, [r7, #28]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	4619      	mov	r1, r3
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	61ba      	str	r2, [r7, #24]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	1acb      	subs	r3, r1, r3
 8007f2c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	607b      	str	r3, [r7, #4]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d002      	beq.n	8007f40 <mem_cmp+0x40>
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0eb      	beq.n	8007f18 <mem_cmp+0x18>

	return r;
 8007f40:	697b      	ldr	r3, [r7, #20]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3724      	adds	r7, #36	; 0x24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007f58:	e002      	b.n	8007f60 <chk_chr+0x12>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	607b      	str	r3, [r7, #4]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d005      	beq.n	8007f74 <chk_chr+0x26>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d1f2      	bne.n	8007f5a <chk_chr+0xc>
	return *str;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	781b      	ldrb	r3, [r3, #0]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60bb      	str	r3, [r7, #8]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	e029      	b.n	8007fec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007f98:	4a27      	ldr	r2, [pc, #156]	; (8008038 <chk_lock+0xb4>)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	011b      	lsls	r3, r3, #4
 8007f9e:	4413      	add	r3, r2
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d01d      	beq.n	8007fe2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007fa6:	4a24      	ldr	r2, [pc, #144]	; (8008038 <chk_lock+0xb4>)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	011b      	lsls	r3, r3, #4
 8007fac:	4413      	add	r3, r2
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d116      	bne.n	8007fe6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007fb8:	4a1f      	ldr	r2, [pc, #124]	; (8008038 <chk_lock+0xb4>)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	4413      	add	r3, r2
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d10c      	bne.n	8007fe6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007fcc:	4a1a      	ldr	r2, [pc, #104]	; (8008038 <chk_lock+0xb4>)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	011b      	lsls	r3, r3, #4
 8007fd2:	4413      	add	r3, r2
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d102      	bne.n	8007fe6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007fe0:	e007      	b.n	8007ff2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d9d2      	bls.n	8007f98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d109      	bne.n	800800c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d102      	bne.n	8008004 <chk_lock+0x80>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b02      	cmp	r3, #2
 8008002:	d101      	bne.n	8008008 <chk_lock+0x84>
 8008004:	2300      	movs	r3, #0
 8008006:	e010      	b.n	800802a <chk_lock+0xa6>
 8008008:	2312      	movs	r3, #18
 800800a:	e00e      	b.n	800802a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d108      	bne.n	8008024 <chk_lock+0xa0>
 8008012:	4a09      	ldr	r2, [pc, #36]	; (8008038 <chk_lock+0xb4>)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	4413      	add	r3, r2
 800801a:	330c      	adds	r3, #12
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008022:	d101      	bne.n	8008028 <chk_lock+0xa4>
 8008024:	2310      	movs	r3, #16
 8008026:	e000      	b.n	800802a <chk_lock+0xa6>
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	200000d8 	.word	0x200000d8

0800803c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008042:	2300      	movs	r3, #0
 8008044:	607b      	str	r3, [r7, #4]
 8008046:	e002      	b.n	800804e <enq_lock+0x12>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3301      	adds	r3, #1
 800804c:	607b      	str	r3, [r7, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d806      	bhi.n	8008062 <enq_lock+0x26>
 8008054:	4a09      	ldr	r2, [pc, #36]	; (800807c <enq_lock+0x40>)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	4413      	add	r3, r2
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1f2      	bne.n	8008048 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b02      	cmp	r3, #2
 8008066:	bf14      	ite	ne
 8008068:	2301      	movne	r3, #1
 800806a:	2300      	moveq	r3, #0
 800806c:	b2db      	uxtb	r3, r3
}
 800806e:	4618      	mov	r0, r3
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	200000d8 	.word	0x200000d8

08008080 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	e01f      	b.n	80080d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008090:	4a41      	ldr	r2, [pc, #260]	; (8008198 <inc_lock+0x118>)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	011b      	lsls	r3, r3, #4
 8008096:	4413      	add	r3, r2
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d113      	bne.n	80080ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80080a2:	4a3d      	ldr	r2, [pc, #244]	; (8008198 <inc_lock+0x118>)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	011b      	lsls	r3, r3, #4
 80080a8:	4413      	add	r3, r2
 80080aa:	3304      	adds	r3, #4
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d109      	bne.n	80080ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80080b6:	4a38      	ldr	r2, [pc, #224]	; (8008198 <inc_lock+0x118>)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	4413      	add	r3, r2
 80080be:	3308      	adds	r3, #8
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d006      	beq.n	80080d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3301      	adds	r3, #1
 80080ce:	60fb      	str	r3, [r7, #12]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d9dc      	bls.n	8008090 <inc_lock+0x10>
 80080d6:	e000      	b.n	80080da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80080d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d132      	bne.n	8008146 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	e002      	b.n	80080ec <inc_lock+0x6c>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3301      	adds	r3, #1
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d806      	bhi.n	8008100 <inc_lock+0x80>
 80080f2:	4a29      	ldr	r2, [pc, #164]	; (8008198 <inc_lock+0x118>)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	011b      	lsls	r3, r3, #4
 80080f8:	4413      	add	r3, r2
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1f2      	bne.n	80080e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b02      	cmp	r3, #2
 8008104:	d101      	bne.n	800810a <inc_lock+0x8a>
 8008106:	2300      	movs	r3, #0
 8008108:	e040      	b.n	800818c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	4922      	ldr	r1, [pc, #136]	; (8008198 <inc_lock+0x118>)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	011b      	lsls	r3, r3, #4
 8008114:	440b      	add	r3, r1
 8008116:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	491e      	ldr	r1, [pc, #120]	; (8008198 <inc_lock+0x118>)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	011b      	lsls	r3, r3, #4
 8008122:	440b      	add	r3, r1
 8008124:	3304      	adds	r3, #4
 8008126:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	695a      	ldr	r2, [r3, #20]
 800812c:	491a      	ldr	r1, [pc, #104]	; (8008198 <inc_lock+0x118>)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	011b      	lsls	r3, r3, #4
 8008132:	440b      	add	r3, r1
 8008134:	3308      	adds	r3, #8
 8008136:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008138:	4a17      	ldr	r2, [pc, #92]	; (8008198 <inc_lock+0x118>)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	011b      	lsls	r3, r3, #4
 800813e:	4413      	add	r3, r2
 8008140:	330c      	adds	r3, #12
 8008142:	2200      	movs	r2, #0
 8008144:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d009      	beq.n	8008160 <inc_lock+0xe0>
 800814c:	4a12      	ldr	r2, [pc, #72]	; (8008198 <inc_lock+0x118>)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	011b      	lsls	r3, r3, #4
 8008152:	4413      	add	r3, r2
 8008154:	330c      	adds	r3, #12
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d001      	beq.n	8008160 <inc_lock+0xe0>
 800815c:	2300      	movs	r3, #0
 800815e:	e015      	b.n	800818c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d108      	bne.n	8008178 <inc_lock+0xf8>
 8008166:	4a0c      	ldr	r2, [pc, #48]	; (8008198 <inc_lock+0x118>)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	011b      	lsls	r3, r3, #4
 800816c:	4413      	add	r3, r2
 800816e:	330c      	adds	r3, #12
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	3301      	adds	r3, #1
 8008174:	b29a      	uxth	r2, r3
 8008176:	e001      	b.n	800817c <inc_lock+0xfc>
 8008178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800817c:	4906      	ldr	r1, [pc, #24]	; (8008198 <inc_lock+0x118>)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	011b      	lsls	r3, r3, #4
 8008182:	440b      	add	r3, r1
 8008184:	330c      	adds	r3, #12
 8008186:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	3301      	adds	r3, #1
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	200000d8 	.word	0x200000d8

0800819c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	607b      	str	r3, [r7, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d825      	bhi.n	80081fc <dec_lock+0x60>
		n = Files[i].ctr;
 80081b0:	4a17      	ldr	r2, [pc, #92]	; (8008210 <dec_lock+0x74>)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	4413      	add	r3, r2
 80081b8:	330c      	adds	r3, #12
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80081be:	89fb      	ldrh	r3, [r7, #14]
 80081c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081c4:	d101      	bne.n	80081ca <dec_lock+0x2e>
 80081c6:	2300      	movs	r3, #0
 80081c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80081ca:	89fb      	ldrh	r3, [r7, #14]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <dec_lock+0x3a>
 80081d0:	89fb      	ldrh	r3, [r7, #14]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80081d6:	4a0e      	ldr	r2, [pc, #56]	; (8008210 <dec_lock+0x74>)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	011b      	lsls	r3, r3, #4
 80081dc:	4413      	add	r3, r2
 80081de:	330c      	adds	r3, #12
 80081e0:	89fa      	ldrh	r2, [r7, #14]
 80081e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80081e4:	89fb      	ldrh	r3, [r7, #14]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d105      	bne.n	80081f6 <dec_lock+0x5a>
 80081ea:	4a09      	ldr	r2, [pc, #36]	; (8008210 <dec_lock+0x74>)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	011b      	lsls	r3, r3, #4
 80081f0:	4413      	add	r3, r2
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	737b      	strb	r3, [r7, #13]
 80081fa:	e001      	b.n	8008200 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80081fc:	2302      	movs	r3, #2
 80081fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008200:	7b7b      	ldrb	r3, [r7, #13]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	200000d8 	.word	0x200000d8

08008214 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800821c:	2300      	movs	r3, #0
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	e010      	b.n	8008244 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008222:	4a0d      	ldr	r2, [pc, #52]	; (8008258 <clear_lock+0x44>)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	011b      	lsls	r3, r3, #4
 8008228:	4413      	add	r3, r2
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	429a      	cmp	r2, r3
 8008230:	d105      	bne.n	800823e <clear_lock+0x2a>
 8008232:	4a09      	ldr	r2, [pc, #36]	; (8008258 <clear_lock+0x44>)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	4413      	add	r3, r2
 800823a:	2200      	movs	r2, #0
 800823c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3301      	adds	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d9eb      	bls.n	8008222 <clear_lock+0xe>
	}
}
 800824a:	bf00      	nop
 800824c:	bf00      	nop
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	200000d8 	.word	0x200000d8

0800825c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	78db      	ldrb	r3, [r3, #3]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d034      	beq.n	80082da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008274:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	7858      	ldrb	r0, [r3, #1]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008280:	2301      	movs	r3, #1
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	f7ff fd40 	bl	8007d08 <disk_write>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <sync_window+0x38>
			res = FR_DISK_ERR;
 800828e:	2301      	movs	r3, #1
 8008290:	73fb      	strb	r3, [r7, #15]
 8008292:	e022      	b.n	80082da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	1ad2      	subs	r2, r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d217      	bcs.n	80082da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	789b      	ldrb	r3, [r3, #2]
 80082ae:	613b      	str	r3, [r7, #16]
 80082b0:	e010      	b.n	80082d4 <sync_window+0x78>
					wsect += fs->fsize;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	4413      	add	r3, r2
 80082ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	7858      	ldrb	r0, [r3, #1]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80082c6:	2301      	movs	r3, #1
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	f7ff fd1d 	bl	8007d08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	613b      	str	r3, [r7, #16]
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d8eb      	bhi.n	80082b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80082da:	7bfb      	ldrb	r3, [r7, #15]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d01b      	beq.n	8008334 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7ff ffad 	bl	800825c <sync_window>
 8008302:	4603      	mov	r3, r0
 8008304:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d113      	bne.n	8008334 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	7858      	ldrb	r0, [r3, #1]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008316:	2301      	movs	r3, #1
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	f7ff fcd5 	bl	8007cc8 <disk_read>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008324:	f04f 33ff 	mov.w	r3, #4294967295
 8008328:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800832a:	2301      	movs	r3, #1
 800832c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff ff87 	bl	800825c <sync_window>
 800834e:	4603      	mov	r3, r0
 8008350:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008352:	7bfb      	ldrb	r3, [r7, #15]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d158      	bne.n	800840a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2b03      	cmp	r3, #3
 800835e:	d148      	bne.n	80083f2 <sync_fs+0xb2>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	791b      	ldrb	r3, [r3, #4]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d144      	bne.n	80083f2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3334      	adds	r3, #52	; 0x34
 800836c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008370:	2100      	movs	r1, #0
 8008372:	4618      	mov	r0, r3
 8008374:	f7ff fda9 	bl	8007eca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3334      	adds	r3, #52	; 0x34
 800837c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008380:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff fd38 	bl	8007dfa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	3334      	adds	r3, #52	; 0x34
 800838e:	4921      	ldr	r1, [pc, #132]	; (8008414 <sync_fs+0xd4>)
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff fd4d 	bl	8007e30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3334      	adds	r3, #52	; 0x34
 800839a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800839e:	491e      	ldr	r1, [pc, #120]	; (8008418 <sync_fs+0xd8>)
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff fd45 	bl	8007e30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3334      	adds	r3, #52	; 0x34
 80083aa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	4619      	mov	r1, r3
 80083b4:	4610      	mov	r0, r2
 80083b6:	f7ff fd3b 	bl	8007e30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3334      	adds	r3, #52	; 0x34
 80083be:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	4619      	mov	r1, r3
 80083c8:	4610      	mov	r0, r2
 80083ca:	f7ff fd31 	bl	8007e30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	7858      	ldrb	r0, [r3, #1]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083e6:	2301      	movs	r3, #1
 80083e8:	f7ff fc8e 	bl	8007d08 <disk_write>
			fs->fsi_flag = 0;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	785b      	ldrb	r3, [r3, #1]
 80083f6:	2200      	movs	r2, #0
 80083f8:	2100      	movs	r1, #0
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7ff fca4 	bl	8007d48 <disk_ioctl>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <sync_fs+0xca>
 8008406:	2301      	movs	r3, #1
 8008408:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800840a:	7bfb      	ldrb	r3, [r7, #15]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	41615252 	.word	0x41615252
 8008418:	61417272 	.word	0x61417272

0800841c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	3b02      	subs	r3, #2
 800842a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	3b02      	subs	r3, #2
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	429a      	cmp	r2, r3
 8008436:	d301      	bcc.n	800843c <clust2sect+0x20>
 8008438:	2300      	movs	r3, #0
 800843a:	e008      	b.n	800844e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	895b      	ldrh	r3, [r3, #10]
 8008440:	461a      	mov	r2, r3
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	fb03 f202 	mul.w	r2, r3, r2
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	4413      	add	r3, r2
}
 800844e:	4618      	mov	r0, r3
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b086      	sub	sp, #24
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d904      	bls.n	800847a <get_fat+0x20>
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	429a      	cmp	r2, r3
 8008478:	d302      	bcc.n	8008480 <get_fat+0x26>
		val = 1;	/* Internal error */
 800847a:	2301      	movs	r3, #1
 800847c:	617b      	str	r3, [r7, #20]
 800847e:	e08f      	b.n	80085a0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008480:	f04f 33ff 	mov.w	r3, #4294967295
 8008484:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	2b03      	cmp	r3, #3
 800848c:	d062      	beq.n	8008554 <get_fat+0xfa>
 800848e:	2b03      	cmp	r3, #3
 8008490:	dc7c      	bgt.n	800858c <get_fat+0x132>
 8008492:	2b01      	cmp	r3, #1
 8008494:	d002      	beq.n	800849c <get_fat+0x42>
 8008496:	2b02      	cmp	r3, #2
 8008498:	d042      	beq.n	8008520 <get_fat+0xc6>
 800849a:	e077      	b.n	800858c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	085b      	lsrs	r3, r3, #1
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4413      	add	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	0a5b      	lsrs	r3, r3, #9
 80084b2:	4413      	add	r3, r2
 80084b4:	4619      	mov	r1, r3
 80084b6:	6938      	ldr	r0, [r7, #16]
 80084b8:	f7ff ff14 	bl	80082e4 <move_window>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d167      	bne.n	8008592 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	60fa      	str	r2, [r7, #12]
 80084c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	4413      	add	r3, r2
 80084d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	0a5b      	lsrs	r3, r3, #9
 80084de:	4413      	add	r3, r2
 80084e0:	4619      	mov	r1, r3
 80084e2:	6938      	ldr	r0, [r7, #16]
 80084e4:	f7ff fefe 	bl	80082e4 <move_window>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d153      	bne.n	8008596 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4413      	add	r3, r2
 80084f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084fc:	021b      	lsls	r3, r3, #8
 80084fe:	461a      	mov	r2, r3
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	4313      	orrs	r3, r2
 8008504:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <get_fat+0xbc>
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	091b      	lsrs	r3, r3, #4
 8008514:	e002      	b.n	800851c <get_fat+0xc2>
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800851c:	617b      	str	r3, [r7, #20]
			break;
 800851e:	e03f      	b.n	80085a0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	0a1b      	lsrs	r3, r3, #8
 8008528:	4413      	add	r3, r2
 800852a:	4619      	mov	r1, r3
 800852c:	6938      	ldr	r0, [r7, #16]
 800852e:	f7ff fed9 	bl	80082e4 <move_window>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d130      	bne.n	800859a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008546:	4413      	add	r3, r2
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff fc1b 	bl	8007d84 <ld_word>
 800854e:	4603      	mov	r3, r0
 8008550:	617b      	str	r3, [r7, #20]
			break;
 8008552:	e025      	b.n	80085a0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	09db      	lsrs	r3, r3, #7
 800855c:	4413      	add	r3, r2
 800855e:	4619      	mov	r1, r3
 8008560:	6938      	ldr	r0, [r7, #16]
 8008562:	f7ff febf 	bl	80082e4 <move_window>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d118      	bne.n	800859e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800857a:	4413      	add	r3, r2
 800857c:	4618      	mov	r0, r3
 800857e:	f7ff fc19 	bl	8007db4 <ld_dword>
 8008582:	4603      	mov	r3, r0
 8008584:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008588:	617b      	str	r3, [r7, #20]
			break;
 800858a:	e009      	b.n	80085a0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800858c:	2301      	movs	r3, #1
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	e006      	b.n	80085a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008592:	bf00      	nop
 8008594:	e004      	b.n	80085a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008596:	bf00      	nop
 8008598:	e002      	b.n	80085a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800859a:	bf00      	nop
 800859c:	e000      	b.n	80085a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800859e:	bf00      	nop
		}
	}

	return val;
 80085a0:	697b      	ldr	r3, [r7, #20]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80085aa:	b590      	push	{r4, r7, lr}
 80085ac:	b089      	sub	sp, #36	; 0x24
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	60f8      	str	r0, [r7, #12]
 80085b2:	60b9      	str	r1, [r7, #8]
 80085b4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80085b6:	2302      	movs	r3, #2
 80085b8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	f240 80d2 	bls.w	8008766 <put_fat+0x1bc>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	f080 80cc 	bcs.w	8008766 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	f000 8096 	beq.w	8008704 <put_fat+0x15a>
 80085d8:	2b03      	cmp	r3, #3
 80085da:	f300 80cd 	bgt.w	8008778 <put_fat+0x1ce>
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d002      	beq.n	80085e8 <put_fat+0x3e>
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d06e      	beq.n	80086c4 <put_fat+0x11a>
 80085e6:	e0c7      	b.n	8008778 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	61bb      	str	r3, [r7, #24]
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	085b      	lsrs	r3, r3, #1
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	4413      	add	r3, r2
 80085f4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	0a5b      	lsrs	r3, r3, #9
 80085fe:	4413      	add	r3, r2
 8008600:	4619      	mov	r1, r3
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f7ff fe6e 	bl	80082e4 <move_window>
 8008608:	4603      	mov	r3, r0
 800860a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800860c:	7ffb      	ldrb	r3, [r7, #31]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f040 80ab 	bne.w	800876a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	1c59      	adds	r1, r3, #1
 800861e:	61b9      	str	r1, [r7, #24]
 8008620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008624:	4413      	add	r3, r2
 8008626:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00d      	beq.n	800864e <put_fat+0xa4>
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	b25b      	sxtb	r3, r3
 8008638:	f003 030f 	and.w	r3, r3, #15
 800863c:	b25a      	sxtb	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	b2db      	uxtb	r3, r3
 8008642:	011b      	lsls	r3, r3, #4
 8008644:	b25b      	sxtb	r3, r3
 8008646:	4313      	orrs	r3, r2
 8008648:	b25b      	sxtb	r3, r3
 800864a:	b2db      	uxtb	r3, r3
 800864c:	e001      	b.n	8008652 <put_fat+0xa8>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2201      	movs	r2, #1
 800865a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	0a5b      	lsrs	r3, r3, #9
 8008664:	4413      	add	r3, r2
 8008666:	4619      	mov	r1, r3
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f7ff fe3b 	bl	80082e4 <move_window>
 800866e:	4603      	mov	r3, r0
 8008670:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008672:	7ffb      	ldrb	r3, [r7, #31]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d17a      	bne.n	800876e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008684:	4413      	add	r3, r2
 8008686:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <put_fat+0xf0>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	091b      	lsrs	r3, r3, #4
 8008696:	b2db      	uxtb	r3, r3
 8008698:	e00e      	b.n	80086b8 <put_fat+0x10e>
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	b25b      	sxtb	r3, r3
 80086a0:	f023 030f 	bic.w	r3, r3, #15
 80086a4:	b25a      	sxtb	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	0a1b      	lsrs	r3, r3, #8
 80086aa:	b25b      	sxtb	r3, r3
 80086ac:	f003 030f 	and.w	r3, r3, #15
 80086b0:	b25b      	sxtb	r3, r3
 80086b2:	4313      	orrs	r3, r2
 80086b4:	b25b      	sxtb	r3, r3
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2201      	movs	r2, #1
 80086c0:	70da      	strb	r2, [r3, #3]
			break;
 80086c2:	e059      	b.n	8008778 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	0a1b      	lsrs	r3, r3, #8
 80086cc:	4413      	add	r3, r2
 80086ce:	4619      	mov	r1, r3
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f7ff fe07 	bl	80082e4 <move_window>
 80086d6:	4603      	mov	r3, r0
 80086d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086da:	7ffb      	ldrb	r3, [r7, #31]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d148      	bne.n	8008772 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80086ee:	4413      	add	r3, r2
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	b292      	uxth	r2, r2
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7ff fb7f 	bl	8007dfa <st_word>
			fs->wflag = 1;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2201      	movs	r2, #1
 8008700:	70da      	strb	r2, [r3, #3]
			break;
 8008702:	e039      	b.n	8008778 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	09db      	lsrs	r3, r3, #7
 800870c:	4413      	add	r3, r2
 800870e:	4619      	mov	r1, r3
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f7ff fde7 	bl	80082e4 <move_window>
 8008716:	4603      	mov	r3, r0
 8008718:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800871a:	7ffb      	ldrb	r3, [r7, #31]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d12a      	bne.n	8008776 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008734:	4413      	add	r3, r2
 8008736:	4618      	mov	r0, r3
 8008738:	f7ff fb3c 	bl	8007db4 <ld_dword>
 800873c:	4603      	mov	r3, r0
 800873e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008742:	4323      	orrs	r3, r4
 8008744:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008754:	4413      	add	r3, r2
 8008756:	6879      	ldr	r1, [r7, #4]
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff fb69 	bl	8007e30 <st_dword>
			fs->wflag = 1;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2201      	movs	r2, #1
 8008762:	70da      	strb	r2, [r3, #3]
			break;
 8008764:	e008      	b.n	8008778 <put_fat+0x1ce>
		}
	}
 8008766:	bf00      	nop
 8008768:	e006      	b.n	8008778 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800876a:	bf00      	nop
 800876c:	e004      	b.n	8008778 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800876e:	bf00      	nop
 8008770:	e002      	b.n	8008778 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008772:	bf00      	nop
 8008774:	e000      	b.n	8008778 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008776:	bf00      	nop
	return res;
 8008778:	7ffb      	ldrb	r3, [r7, #31]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3724      	adds	r7, #36	; 0x24
 800877e:	46bd      	mov	sp, r7
 8008780:	bd90      	pop	{r4, r7, pc}

08008782 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b088      	sub	sp, #32
 8008786:	af00      	add	r7, sp, #0
 8008788:	60f8      	str	r0, [r7, #12]
 800878a:	60b9      	str	r1, [r7, #8]
 800878c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d904      	bls.n	80087a8 <remove_chain+0x26>
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d301      	bcc.n	80087ac <remove_chain+0x2a>
 80087a8:	2302      	movs	r3, #2
 80087aa:	e04b      	b.n	8008844 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00c      	beq.n	80087cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80087b2:	f04f 32ff 	mov.w	r2, #4294967295
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	69b8      	ldr	r0, [r7, #24]
 80087ba:	f7ff fef6 	bl	80085aa <put_fat>
 80087be:	4603      	mov	r3, r0
 80087c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80087c2:	7ffb      	ldrb	r3, [r7, #31]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <remove_chain+0x4a>
 80087c8:	7ffb      	ldrb	r3, [r7, #31]
 80087ca:	e03b      	b.n	8008844 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80087cc:	68b9      	ldr	r1, [r7, #8]
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f7ff fe43 	bl	800845a <get_fat>
 80087d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d031      	beq.n	8008840 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <remove_chain+0x64>
 80087e2:	2302      	movs	r3, #2
 80087e4:	e02e      	b.n	8008844 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ec:	d101      	bne.n	80087f2 <remove_chain+0x70>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e028      	b.n	8008844 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80087f2:	2200      	movs	r2, #0
 80087f4:	68b9      	ldr	r1, [r7, #8]
 80087f6:	69b8      	ldr	r0, [r7, #24]
 80087f8:	f7ff fed7 	bl	80085aa <put_fat>
 80087fc:	4603      	mov	r3, r0
 80087fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008800:	7ffb      	ldrb	r3, [r7, #31]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <remove_chain+0x88>
 8008806:	7ffb      	ldrb	r3, [r7, #31]
 8008808:	e01c      	b.n	8008844 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	695a      	ldr	r2, [r3, #20]
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	3b02      	subs	r3, #2
 8008814:	429a      	cmp	r2, r3
 8008816:	d20b      	bcs.n	8008830 <remove_chain+0xae>
			fs->free_clst++;
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	1c5a      	adds	r2, r3, #1
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	791b      	ldrb	r3, [r3, #4]
 8008826:	f043 0301 	orr.w	r3, r3, #1
 800882a:	b2da      	uxtb	r2, r3
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	429a      	cmp	r2, r3
 800883c:	d3c6      	bcc.n	80087cc <remove_chain+0x4a>
 800883e:	e000      	b.n	8008842 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008840:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3720      	adds	r7, #32
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b088      	sub	sp, #32
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10d      	bne.n	800887e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d004      	beq.n	8008878 <create_chain+0x2c>
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	429a      	cmp	r2, r3
 8008876:	d31b      	bcc.n	80088b0 <create_chain+0x64>
 8008878:	2301      	movs	r3, #1
 800887a:	61bb      	str	r3, [r7, #24]
 800887c:	e018      	b.n	80088b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff fdea 	bl	800845a <get_fat>
 8008886:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d801      	bhi.n	8008892 <create_chain+0x46>
 800888e:	2301      	movs	r3, #1
 8008890:	e070      	b.n	8008974 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008898:	d101      	bne.n	800889e <create_chain+0x52>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	e06a      	b.n	8008974 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d201      	bcs.n	80088ac <create_chain+0x60>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	e063      	b.n	8008974 <create_chain+0x128>
		scl = clst;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	3301      	adds	r3, #1
 80088b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	69fa      	ldr	r2, [r7, #28]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d307      	bcc.n	80088d4 <create_chain+0x88>
				ncl = 2;
 80088c4:	2302      	movs	r3, #2
 80088c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d901      	bls.n	80088d4 <create_chain+0x88>
 80088d0:	2300      	movs	r3, #0
 80088d2:	e04f      	b.n	8008974 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80088d4:	69f9      	ldr	r1, [r7, #28]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff fdbf 	bl	800845a <get_fat>
 80088dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00e      	beq.n	8008902 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d003      	beq.n	80088f2 <create_chain+0xa6>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f0:	d101      	bne.n	80088f6 <create_chain+0xaa>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	e03e      	b.n	8008974 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80088f6:	69fa      	ldr	r2, [r7, #28]
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d1da      	bne.n	80088b4 <create_chain+0x68>
 80088fe:	2300      	movs	r3, #0
 8008900:	e038      	b.n	8008974 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008902:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008904:	f04f 32ff 	mov.w	r2, #4294967295
 8008908:	69f9      	ldr	r1, [r7, #28]
 800890a:	6938      	ldr	r0, [r7, #16]
 800890c:	f7ff fe4d 	bl	80085aa <put_fat>
 8008910:	4603      	mov	r3, r0
 8008912:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d109      	bne.n	800892e <create_chain+0xe2>
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d006      	beq.n	800892e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008920:	69fa      	ldr	r2, [r7, #28]
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6938      	ldr	r0, [r7, #16]
 8008926:	f7ff fe40 	bl	80085aa <put_fat>
 800892a:	4603      	mov	r3, r0
 800892c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d116      	bne.n	8008962 <create_chain+0x116>
		fs->last_clst = ncl;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	695a      	ldr	r2, [r3, #20]
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	3b02      	subs	r3, #2
 8008944:	429a      	cmp	r2, r3
 8008946:	d804      	bhi.n	8008952 <create_chain+0x106>
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	1e5a      	subs	r2, r3, #1
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	791b      	ldrb	r3, [r3, #4]
 8008956:	f043 0301 	orr.w	r3, r3, #1
 800895a:	b2da      	uxtb	r2, r3
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	711a      	strb	r2, [r3, #4]
 8008960:	e007      	b.n	8008972 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008962:	7dfb      	ldrb	r3, [r7, #23]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d102      	bne.n	800896e <create_chain+0x122>
 8008968:	f04f 33ff 	mov.w	r3, #4294967295
 800896c:	e000      	b.n	8008970 <create_chain+0x124>
 800896e:	2301      	movs	r3, #1
 8008970:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008972:	69fb      	ldr	r3, [r7, #28]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3720      	adds	r7, #32
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	3304      	adds	r3, #4
 8008992:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	0a5b      	lsrs	r3, r3, #9
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	8952      	ldrh	r2, [r2, #10]
 800899c:	fbb3 f3f2 	udiv	r3, r3, r2
 80089a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	1d1a      	adds	r2, r3, #4
 80089a6:	613a      	str	r2, [r7, #16]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <clmt_clust+0x3a>
 80089b2:	2300      	movs	r3, #0
 80089b4:	e010      	b.n	80089d8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d307      	bcc.n	80089ce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	3304      	adds	r3, #4
 80089ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80089cc:	e7e9      	b.n	80089a2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80089ce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	4413      	add	r3, r2
}
 80089d8:	4618      	mov	r0, r3
 80089da:	371c      	adds	r7, #28
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089fa:	d204      	bcs.n	8008a06 <dir_sdi+0x22>
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	f003 031f 	and.w	r3, r3, #31
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008a06:	2302      	movs	r3, #2
 8008a08:	e063      	b.n	8008ad2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d106      	bne.n	8008a2a <dir_sdi+0x46>
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d902      	bls.n	8008a2a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a28:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10c      	bne.n	8008a4a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	095b      	lsrs	r3, r3, #5
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	8912      	ldrh	r2, [r2, #8]
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d301      	bcc.n	8008a40 <dir_sdi+0x5c>
 8008a3c:	2302      	movs	r3, #2
 8008a3e:	e048      	b.n	8008ad2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	61da      	str	r2, [r3, #28]
 8008a48:	e029      	b.n	8008a9e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	895b      	ldrh	r3, [r3, #10]
 8008a4e:	025b      	lsls	r3, r3, #9
 8008a50:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a52:	e019      	b.n	8008a88 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6979      	ldr	r1, [r7, #20]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7ff fcfe 	bl	800845a <get_fat>
 8008a5e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a66:	d101      	bne.n	8008a6c <dir_sdi+0x88>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e032      	b.n	8008ad2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d904      	bls.n	8008a7c <dir_sdi+0x98>
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d301      	bcc.n	8008a80 <dir_sdi+0x9c>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e028      	b.n	8008ad2 <dir_sdi+0xee>
			ofs -= csz;
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d2e1      	bcs.n	8008a54 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008a90:	6979      	ldr	r1, [r7, #20]
 8008a92:	6938      	ldr	r0, [r7, #16]
 8008a94:	f7ff fcc2 	bl	800841c <clust2sect>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <dir_sdi+0xcc>
 8008aac:	2302      	movs	r3, #2
 8008aae:	e010      	b.n	8008ad2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	69da      	ldr	r2, [r3, #28]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	0a5b      	lsrs	r3, r3, #9
 8008ab8:	441a      	add	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aca:	441a      	add	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b086      	sub	sp, #24
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	3320      	adds	r3, #32
 8008af0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <dir_next+0x28>
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b00:	d301      	bcc.n	8008b06 <dir_next+0x2c>
 8008b02:	2304      	movs	r3, #4
 8008b04:	e0aa      	b.n	8008c5c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f040 8098 	bne.w	8008c42 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	1c5a      	adds	r2, r3, #1
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10b      	bne.n	8008b3c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	095b      	lsrs	r3, r3, #5
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	8912      	ldrh	r2, [r2, #8]
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	f0c0 8088 	bcc.w	8008c42 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	61da      	str	r2, [r3, #28]
 8008b38:	2304      	movs	r3, #4
 8008b3a:	e08f      	b.n	8008c5c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	0a5b      	lsrs	r3, r3, #9
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	8952      	ldrh	r2, [r2, #10]
 8008b44:	3a01      	subs	r2, #1
 8008b46:	4013      	ands	r3, r2
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d17a      	bne.n	8008c42 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	4619      	mov	r1, r3
 8008b54:	4610      	mov	r0, r2
 8008b56:	f7ff fc80 	bl	800845a <get_fat>
 8008b5a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d801      	bhi.n	8008b66 <dir_next+0x8c>
 8008b62:	2302      	movs	r3, #2
 8008b64:	e07a      	b.n	8008c5c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6c:	d101      	bne.n	8008b72 <dir_next+0x98>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e074      	b.n	8008c5c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d358      	bcc.n	8008c2e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d104      	bne.n	8008b8c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	61da      	str	r2, [r3, #28]
 8008b88:	2304      	movs	r3, #4
 8008b8a:	e067      	b.n	8008c5c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	4619      	mov	r1, r3
 8008b94:	4610      	mov	r0, r2
 8008b96:	f7ff fe59 	bl	800884c <create_chain>
 8008b9a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <dir_next+0xcc>
 8008ba2:	2307      	movs	r3, #7
 8008ba4:	e05a      	b.n	8008c5c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d101      	bne.n	8008bb0 <dir_next+0xd6>
 8008bac:	2302      	movs	r3, #2
 8008bae:	e055      	b.n	8008c5c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb6:	d101      	bne.n	8008bbc <dir_next+0xe2>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e04f      	b.n	8008c5c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f7ff fb4d 	bl	800825c <sync_window>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <dir_next+0xf2>
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e047      	b.n	8008c5c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3334      	adds	r3, #52	; 0x34
 8008bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7ff f977 	bl	8007eca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008bdc:	2300      	movs	r3, #0
 8008bde:	613b      	str	r3, [r7, #16]
 8008be0:	6979      	ldr	r1, [r7, #20]
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f7ff fc1a 	bl	800841c <clust2sect>
 8008be8:	4602      	mov	r2, r0
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	631a      	str	r2, [r3, #48]	; 0x30
 8008bee:	e012      	b.n	8008c16 <dir_next+0x13c>
						fs->wflag = 1;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f7ff fb30 	bl	800825c <sync_window>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <dir_next+0x12c>
 8008c02:	2301      	movs	r3, #1
 8008c04:	e02a      	b.n	8008c5c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	613b      	str	r3, [r7, #16]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c10:	1c5a      	adds	r2, r3, #1
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	631a      	str	r2, [r3, #48]	; 0x30
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	895b      	ldrh	r3, [r3, #10]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d3e6      	bcc.n	8008bf0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	1ad2      	subs	r2, r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	697a      	ldr	r2, [r7, #20]
 8008c32:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008c34:	6979      	ldr	r1, [r7, #20]
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f7ff fbf0 	bl	800841c <clust2sect>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c54:	441a      	add	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008c74:	2100      	movs	r1, #0
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7ff feb4 	bl	80089e4 <dir_sdi>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d12b      	bne.n	8008cde <dir_alloc+0x7a>
		n = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f7ff fb27 	bl	80082e4 <move_window>
 8008c96:	4603      	mov	r3, r0
 8008c98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d11d      	bne.n	8008cdc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a1b      	ldr	r3, [r3, #32]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2be5      	cmp	r3, #229	; 0xe5
 8008ca8:	d004      	beq.n	8008cb4 <dir_alloc+0x50>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d107      	bne.n	8008cc4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	613b      	str	r3, [r7, #16]
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d102      	bne.n	8008cc8 <dir_alloc+0x64>
 8008cc2:	e00c      	b.n	8008cde <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008cc8:	2101      	movs	r1, #1
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff ff05 	bl	8008ada <dir_next>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0d7      	beq.n	8008c8a <dir_alloc+0x26>
 8008cda:	e000      	b.n	8008cde <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008cdc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008cde:	7dfb      	ldrb	r3, [r7, #23]
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	d101      	bne.n	8008ce8 <dir_alloc+0x84>
 8008ce4:	2307      	movs	r3, #7
 8008ce6:	75fb      	strb	r3, [r7, #23]
	return res;
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	331a      	adds	r3, #26
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7ff f83f 	bl	8007d84 <ld_word>
 8008d06:	4603      	mov	r3, r0
 8008d08:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d109      	bne.n	8008d26 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	3314      	adds	r3, #20
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff f834 	bl	8007d84 <ld_word>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	041b      	lsls	r3, r3, #16
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008d26:	68fb      	ldr	r3, [r7, #12]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	331a      	adds	r3, #26
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	b292      	uxth	r2, r2
 8008d44:	4611      	mov	r1, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff f857 	bl	8007dfa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	d109      	bne.n	8008d68 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f103 0214 	add.w	r2, r3, #20
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	0c1b      	lsrs	r3, r3, #16
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	4619      	mov	r1, r3
 8008d62:	4610      	mov	r0, r2
 8008d64:	f7ff f849 	bl	8007dfa <st_word>
	}
}
 8008d68:	bf00      	nop
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008d70:	b590      	push	{r4, r7, lr}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	331a      	adds	r3, #26
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff f800 	bl	8007d84 <ld_word>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <cmp_lfn+0x1e>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	e059      	b.n	8008e42 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d96:	1e5a      	subs	r2, r3, #1
 8008d98:	4613      	mov	r3, r2
 8008d9a:	005b      	lsls	r3, r3, #1
 8008d9c:	4413      	add	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008da4:	2301      	movs	r3, #1
 8008da6:	81fb      	strh	r3, [r7, #14]
 8008da8:	2300      	movs	r3, #0
 8008daa:	613b      	str	r3, [r7, #16]
 8008dac:	e033      	b.n	8008e16 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008dae:	4a27      	ldr	r2, [pc, #156]	; (8008e4c <cmp_lfn+0xdc>)
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	4413      	add	r3, r2
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	4413      	add	r3, r2
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fe ffe1 	bl	8007d84 <ld_word>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008dc6:	89fb      	ldrh	r3, [r7, #14]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d01a      	beq.n	8008e02 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	2b0e      	cmp	r3, #14
 8008dd0:	d812      	bhi.n	8008df8 <cmp_lfn+0x88>
 8008dd2:	89bb      	ldrh	r3, [r7, #12]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f001 fe19 	bl	800aa0c <ff_wtoupper>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	461c      	mov	r4, r3
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	617a      	str	r2, [r7, #20]
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	4413      	add	r3, r2
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f001 fe0d 	bl	800aa0c <ff_wtoupper>
 8008df2:	4603      	mov	r3, r0
 8008df4:	429c      	cmp	r4, r3
 8008df6:	d001      	beq.n	8008dfc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e022      	b.n	8008e42 <cmp_lfn+0xd2>
			}
			wc = uc;
 8008dfc:	89bb      	ldrh	r3, [r7, #12]
 8008dfe:	81fb      	strh	r3, [r7, #14]
 8008e00:	e006      	b.n	8008e10 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008e02:	89bb      	ldrh	r3, [r7, #12]
 8008e04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d001      	beq.n	8008e10 <cmp_lfn+0xa0>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	e018      	b.n	8008e42 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	3301      	adds	r3, #1
 8008e14:	613b      	str	r3, [r7, #16]
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	2b0c      	cmp	r3, #12
 8008e1a:	d9c8      	bls.n	8008dae <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00b      	beq.n	8008e40 <cmp_lfn+0xd0>
 8008e28:	89fb      	ldrh	r3, [r7, #14]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d008      	beq.n	8008e40 <cmp_lfn+0xd0>
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	4413      	add	r3, r2
 8008e36:	881b      	ldrh	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <cmp_lfn+0xd0>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	e000      	b.n	8008e42 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008e40:	2301      	movs	r3, #1
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd90      	pop	{r4, r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	0800b5e0 	.word	0x0800b5e0

08008e50 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b088      	sub	sp, #32
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	460b      	mov	r3, r1
 8008e60:	71fb      	strb	r3, [r7, #7]
 8008e62:	4613      	mov	r3, r2
 8008e64:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	330d      	adds	r3, #13
 8008e6a:	79ba      	ldrb	r2, [r7, #6]
 8008e6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	330b      	adds	r3, #11
 8008e72:	220f      	movs	r2, #15
 8008e74:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	330c      	adds	r3, #12
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	331a      	adds	r3, #26
 8008e82:	2100      	movs	r1, #0
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fe ffb8 	bl	8007dfa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	1e5a      	subs	r2, r3, #1
 8008e8e:	4613      	mov	r3, r2
 8008e90:	005b      	lsls	r3, r3, #1
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	82fb      	strh	r3, [r7, #22]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008ea2:	8afb      	ldrh	r3, [r7, #22]
 8008ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d007      	beq.n	8008ebc <put_lfn+0x6c>
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	1c5a      	adds	r2, r3, #1
 8008eb0:	61fa      	str	r2, [r7, #28]
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008ebc:	4a17      	ldr	r2, [pc, #92]	; (8008f1c <put_lfn+0xcc>)
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	4413      	add	r3, r2
 8008eca:	8afa      	ldrh	r2, [r7, #22]
 8008ecc:	4611      	mov	r1, r2
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe ff93 	bl	8007dfa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008ed4:	8afb      	ldrh	r3, [r7, #22]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d102      	bne.n	8008ee0 <put_lfn+0x90>
 8008eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ede:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	2b0c      	cmp	r3, #12
 8008eea:	d9da      	bls.n	8008ea2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008eec:	8afb      	ldrh	r3, [r7, #22]
 8008eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d006      	beq.n	8008f04 <put_lfn+0xb4>
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	4413      	add	r3, r2
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d103      	bne.n	8008f0c <put_lfn+0xbc>
 8008f04:	79fb      	ldrb	r3, [r7, #7]
 8008f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f0a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	79fa      	ldrb	r2, [r7, #7]
 8008f10:	701a      	strb	r2, [r3, #0]
}
 8008f12:	bf00      	nop
 8008f14:	3720      	adds	r7, #32
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	0800b5e0 	.word	0x0800b5e0

08008f20 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08c      	sub	sp, #48	; 0x30
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008f2e:	220b      	movs	r2, #11
 8008f30:	68b9      	ldr	r1, [r7, #8]
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f7fe ffa8 	bl	8007e88 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2b05      	cmp	r3, #5
 8008f3c:	d92b      	bls.n	8008f96 <gen_numname+0x76>
		sr = seq;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008f42:	e022      	b.n	8008f8a <gen_numname+0x6a>
			wc = *lfn++;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	1c9a      	adds	r2, r3, #2
 8008f48:	607a      	str	r2, [r7, #4]
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008f4e:	2300      	movs	r3, #0
 8008f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f52:	e017      	b.n	8008f84 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	005a      	lsls	r2, r3, #1
 8008f58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f5a:	f003 0301 	and.w	r3, r3, #1
 8008f5e:	4413      	add	r3, r2
 8008f60:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008f62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f64:	085b      	lsrs	r3, r3, #1
 8008f66:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d005      	beq.n	8008f7e <gen_numname+0x5e>
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008f78:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008f7c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	3301      	adds	r3, #1
 8008f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	2b0f      	cmp	r3, #15
 8008f88:	d9e4      	bls.n	8008f54 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1d8      	bne.n	8008f44 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008f96:	2307      	movs	r3, #7
 8008f98:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	f003 030f 	and.w	r3, r3, #15
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	3330      	adds	r3, #48	; 0x30
 8008fa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008faa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008fae:	2b39      	cmp	r3, #57	; 0x39
 8008fb0:	d904      	bls.n	8008fbc <gen_numname+0x9c>
 8008fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008fb6:	3307      	adds	r3, #7
 8008fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbe:	1e5a      	subs	r2, r3, #1
 8008fc0:	62ba      	str	r2, [r7, #40]	; 0x28
 8008fc2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008fcc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	091b      	lsrs	r3, r3, #4
 8008fd4:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1de      	bne.n	8008f9a <gen_numname+0x7a>
	ns[i] = '~';
 8008fdc:	f107 0214 	add.w	r2, r7, #20
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	4413      	add	r3, r2
 8008fe4:	227e      	movs	r2, #126	; 0x7e
 8008fe6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008fe8:	2300      	movs	r3, #0
 8008fea:	627b      	str	r3, [r7, #36]	; 0x24
 8008fec:	e002      	b.n	8008ff4 <gen_numname+0xd4>
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d205      	bcs.n	8009008 <gen_numname+0xe8>
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	4413      	add	r3, r2
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b20      	cmp	r3, #32
 8009006:	d1f2      	bne.n	8008fee <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900a:	2b07      	cmp	r3, #7
 800900c:	d808      	bhi.n	8009020 <gen_numname+0x100>
 800900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	62ba      	str	r2, [r7, #40]	; 0x28
 8009014:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009018:	4413      	add	r3, r2
 800901a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800901e:	e000      	b.n	8009022 <gen_numname+0x102>
 8009020:	2120      	movs	r1, #32
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	627a      	str	r2, [r7, #36]	; 0x24
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	4413      	add	r3, r2
 800902c:	460a      	mov	r2, r1
 800902e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	2b07      	cmp	r3, #7
 8009034:	d9e8      	bls.n	8009008 <gen_numname+0xe8>
}
 8009036:	bf00      	nop
 8009038:	bf00      	nop
 800903a:	3730      	adds	r7, #48	; 0x30
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800904c:	230b      	movs	r3, #11
 800904e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009050:	7bfb      	ldrb	r3, [r7, #15]
 8009052:	b2da      	uxtb	r2, r3
 8009054:	0852      	lsrs	r2, r2, #1
 8009056:	01db      	lsls	r3, r3, #7
 8009058:	4313      	orrs	r3, r2
 800905a:	b2da      	uxtb	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	1c59      	adds	r1, r3, #1
 8009060:	6079      	str	r1, [r7, #4]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	4413      	add	r3, r2
 8009066:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	3b01      	subs	r3, #1
 800906c:	60bb      	str	r3, [r7, #8]
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1ed      	bne.n	8009050 <sum_sfn+0x10>
	return sum;
 8009074:	7bfb      	ldrb	r3, [r7, #15]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b086      	sub	sp, #24
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009090:	2100      	movs	r1, #0
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7ff fca6 	bl	80089e4 <dir_sdi>
 8009098:	4603      	mov	r3, r0
 800909a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <dir_find+0x24>
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	e0a9      	b.n	80091fa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80090a6:	23ff      	movs	r3, #255	; 0xff
 80090a8:	753b      	strb	r3, [r7, #20]
 80090aa:	7d3b      	ldrb	r3, [r7, #20]
 80090ac:	757b      	strb	r3, [r7, #21]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f04f 32ff 	mov.w	r2, #4294967295
 80090b4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	4619      	mov	r1, r3
 80090bc:	6938      	ldr	r0, [r7, #16]
 80090be:	f7ff f911 	bl	80082e4 <move_window>
 80090c2:	4603      	mov	r3, r0
 80090c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f040 8090 	bne.w	80091ee <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80090d6:	7dbb      	ldrb	r3, [r7, #22]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d102      	bne.n	80090e2 <dir_find+0x60>
 80090dc:	2304      	movs	r3, #4
 80090de:	75fb      	strb	r3, [r7, #23]
 80090e0:	e08a      	b.n	80091f8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	330b      	adds	r3, #11
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090ee:	73fb      	strb	r3, [r7, #15]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	7bfa      	ldrb	r2, [r7, #15]
 80090f4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80090f6:	7dbb      	ldrb	r3, [r7, #22]
 80090f8:	2be5      	cmp	r3, #229	; 0xe5
 80090fa:	d007      	beq.n	800910c <dir_find+0x8a>
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	f003 0308 	and.w	r3, r3, #8
 8009102:	2b00      	cmp	r3, #0
 8009104:	d009      	beq.n	800911a <dir_find+0x98>
 8009106:	7bfb      	ldrb	r3, [r7, #15]
 8009108:	2b0f      	cmp	r3, #15
 800910a:	d006      	beq.n	800911a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800910c:	23ff      	movs	r3, #255	; 0xff
 800910e:	757b      	strb	r3, [r7, #21]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f04f 32ff 	mov.w	r2, #4294967295
 8009116:	631a      	str	r2, [r3, #48]	; 0x30
 8009118:	e05e      	b.n	80091d8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	2b0f      	cmp	r3, #15
 800911e:	d136      	bne.n	800918e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912a:	2b00      	cmp	r3, #0
 800912c:	d154      	bne.n	80091d8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800912e:	7dbb      	ldrb	r3, [r7, #22]
 8009130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00d      	beq.n	8009154 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a1b      	ldr	r3, [r3, #32]
 800913c:	7b5b      	ldrb	r3, [r3, #13]
 800913e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009140:	7dbb      	ldrb	r3, [r7, #22]
 8009142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009146:	75bb      	strb	r3, [r7, #22]
 8009148:	7dbb      	ldrb	r3, [r7, #22]
 800914a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	695a      	ldr	r2, [r3, #20]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009154:	7dba      	ldrb	r2, [r7, #22]
 8009156:	7d7b      	ldrb	r3, [r7, #21]
 8009158:	429a      	cmp	r2, r3
 800915a:	d115      	bne.n	8009188 <dir_find+0x106>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	330d      	adds	r3, #13
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	7d3a      	ldrb	r2, [r7, #20]
 8009166:	429a      	cmp	r2, r3
 8009168:	d10e      	bne.n	8009188 <dir_find+0x106>
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	4619      	mov	r1, r3
 8009174:	4610      	mov	r0, r2
 8009176:	f7ff fdfb 	bl	8008d70 <cmp_lfn>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <dir_find+0x106>
 8009180:	7d7b      	ldrb	r3, [r7, #21]
 8009182:	3b01      	subs	r3, #1
 8009184:	b2db      	uxtb	r3, r3
 8009186:	e000      	b.n	800918a <dir_find+0x108>
 8009188:	23ff      	movs	r3, #255	; 0xff
 800918a:	757b      	strb	r3, [r7, #21]
 800918c:	e024      	b.n	80091d8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800918e:	7d7b      	ldrb	r3, [r7, #21]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d109      	bne.n	80091a8 <dir_find+0x126>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff ff51 	bl	8009040 <sum_sfn>
 800919e:	4603      	mov	r3, r0
 80091a0:	461a      	mov	r2, r3
 80091a2:	7d3b      	ldrb	r3, [r7, #20]
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d024      	beq.n	80091f2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10a      	bne.n	80091cc <dir_find+0x14a>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a18      	ldr	r0, [r3, #32]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	3324      	adds	r3, #36	; 0x24
 80091be:	220b      	movs	r2, #11
 80091c0:	4619      	mov	r1, r3
 80091c2:	f7fe fe9d 	bl	8007f00 <mem_cmp>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d014      	beq.n	80091f6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80091cc:	23ff      	movs	r3, #255	; 0xff
 80091ce:	757b      	strb	r3, [r7, #21]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f04f 32ff 	mov.w	r2, #4294967295
 80091d6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80091d8:	2100      	movs	r1, #0
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7ff fc7d 	bl	8008ada <dir_next>
 80091e0:	4603      	mov	r3, r0
 80091e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80091e4:	7dfb      	ldrb	r3, [r7, #23]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f43f af65 	beq.w	80090b6 <dir_find+0x34>
 80091ec:	e004      	b.n	80091f8 <dir_find+0x176>
		if (res != FR_OK) break;
 80091ee:	bf00      	nop
 80091f0:	e002      	b.n	80091f8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80091f2:	bf00      	nop
 80091f4:	e000      	b.n	80091f8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80091f6:	bf00      	nop

	return res;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08c      	sub	sp, #48	; 0x30
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009218:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <dir_register+0x20>
 8009220:	2306      	movs	r3, #6
 8009222:	e0e0      	b.n	80093e6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009224:	2300      	movs	r3, #0
 8009226:	627b      	str	r3, [r7, #36]	; 0x24
 8009228:	e002      	b.n	8009230 <dir_register+0x2c>
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	3301      	adds	r3, #1
 800922e:	627b      	str	r3, [r7, #36]	; 0x24
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	68da      	ldr	r2, [r3, #12]
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	005b      	lsls	r3, r3, #1
 8009238:	4413      	add	r3, r2
 800923a:	881b      	ldrh	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1f4      	bne.n	800922a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009246:	f107 030c 	add.w	r3, r7, #12
 800924a:	220c      	movs	r2, #12
 800924c:	4618      	mov	r0, r3
 800924e:	f7fe fe1b 	bl	8007e88 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	d032      	beq.n	80092c2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2240      	movs	r2, #64	; 0x40
 8009260:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009264:	2301      	movs	r3, #1
 8009266:	62bb      	str	r3, [r7, #40]	; 0x28
 8009268:	e016      	b.n	8009298 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	68da      	ldr	r2, [r3, #12]
 8009274:	f107 010c 	add.w	r1, r7, #12
 8009278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927a:	f7ff fe51 	bl	8008f20 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff feff 	bl	8009082 <dir_find>
 8009284:	4603      	mov	r3, r0
 8009286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800928a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800928e:	2b00      	cmp	r3, #0
 8009290:	d106      	bne.n	80092a0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009294:	3301      	adds	r3, #1
 8009296:	62bb      	str	r3, [r7, #40]	; 0x28
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	2b63      	cmp	r3, #99	; 0x63
 800929c:	d9e5      	bls.n	800926a <dir_register+0x66>
 800929e:	e000      	b.n	80092a2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80092a0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80092a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a4:	2b64      	cmp	r3, #100	; 0x64
 80092a6:	d101      	bne.n	80092ac <dir_register+0xa8>
 80092a8:	2307      	movs	r3, #7
 80092aa:	e09c      	b.n	80093e6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80092ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092b0:	2b04      	cmp	r3, #4
 80092b2:	d002      	beq.n	80092ba <dir_register+0xb6>
 80092b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092b8:	e095      	b.n	80093e6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80092ba:	7dfa      	ldrb	r2, [r7, #23]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80092c2:	7dfb      	ldrb	r3, [r7, #23]
 80092c4:	f003 0302 	and.w	r3, r3, #2
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d007      	beq.n	80092dc <dir_register+0xd8>
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	330c      	adds	r3, #12
 80092d0:	4a47      	ldr	r2, [pc, #284]	; (80093f0 <dir_register+0x1ec>)
 80092d2:	fba2 2303 	umull	r2, r3, r2, r3
 80092d6:	089b      	lsrs	r3, r3, #2
 80092d8:	3301      	adds	r3, #1
 80092da:	e000      	b.n	80092de <dir_register+0xda>
 80092dc:	2301      	movs	r3, #1
 80092de:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80092e0:	6a39      	ldr	r1, [r7, #32]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7ff fcbe 	bl	8008c64 <dir_alloc>
 80092e8:	4603      	mov	r3, r0
 80092ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80092ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d148      	bne.n	8009388 <dir_register+0x184>
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	623b      	str	r3, [r7, #32]
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d042      	beq.n	8009388 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	695a      	ldr	r2, [r3, #20]
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	015b      	lsls	r3, r3, #5
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7ff fb68 	bl	80089e4 <dir_sdi>
 8009314:	4603      	mov	r3, r0
 8009316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800931a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800931e:	2b00      	cmp	r3, #0
 8009320:	d132      	bne.n	8009388 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	3324      	adds	r3, #36	; 0x24
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff fe8a 	bl	8009040 <sum_sfn>
 800932c:	4603      	mov	r3, r0
 800932e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	4619      	mov	r1, r3
 8009336:	69f8      	ldr	r0, [r7, #28]
 8009338:	f7fe ffd4 	bl	80082e4 <move_window>
 800933c:	4603      	mov	r3, r0
 800933e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009346:	2b00      	cmp	r3, #0
 8009348:	d11d      	bne.n	8009386 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	68d8      	ldr	r0, [r3, #12]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a19      	ldr	r1, [r3, #32]
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	b2da      	uxtb	r2, r3
 8009356:	7efb      	ldrb	r3, [r7, #27]
 8009358:	f7ff fd7a 	bl	8008e50 <put_lfn>
				fs->wflag = 1;
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	2201      	movs	r2, #1
 8009360:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009362:	2100      	movs	r1, #0
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7ff fbb8 	bl	8008ada <dir_next>
 800936a:	4603      	mov	r3, r0
 800936c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009370:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009374:	2b00      	cmp	r3, #0
 8009376:	d107      	bne.n	8009388 <dir_register+0x184>
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	3b01      	subs	r3, #1
 800937c:	623b      	str	r3, [r7, #32]
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1d5      	bne.n	8009330 <dir_register+0x12c>
 8009384:	e000      	b.n	8009388 <dir_register+0x184>
				if (res != FR_OK) break;
 8009386:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800938c:	2b00      	cmp	r3, #0
 800938e:	d128      	bne.n	80093e2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	69db      	ldr	r3, [r3, #28]
 8009394:	4619      	mov	r1, r3
 8009396:	69f8      	ldr	r0, [r7, #28]
 8009398:	f7fe ffa4 	bl	80082e4 <move_window>
 800939c:	4603      	mov	r3, r0
 800939e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80093a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d11b      	bne.n	80093e2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	2220      	movs	r2, #32
 80093b0:	2100      	movs	r1, #0
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe fd89 	bl	8007eca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a18      	ldr	r0, [r3, #32]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	3324      	adds	r3, #36	; 0x24
 80093c0:	220b      	movs	r2, #11
 80093c2:	4619      	mov	r1, r3
 80093c4:	f7fe fd60 	bl	8007e88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	330c      	adds	r3, #12
 80093d4:	f002 0218 	and.w	r2, r2, #24
 80093d8:	b2d2      	uxtb	r2, r2
 80093da:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	2201      	movs	r2, #1
 80093e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80093e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3730      	adds	r7, #48	; 0x30
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	4ec4ec4f 	.word	0x4ec4ec4f

080093f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b08a      	sub	sp, #40	; 0x28
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	613b      	str	r3, [r7, #16]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	60fb      	str	r3, [r7, #12]
 800940c:	2300      	movs	r3, #0
 800940e:	617b      	str	r3, [r7, #20]
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	1c5a      	adds	r2, r3, #1
 8009418:	61ba      	str	r2, [r7, #24]
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	4413      	add	r3, r2
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009424:	2b1f      	cmp	r3, #31
 8009426:	d940      	bls.n	80094aa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800942a:	2b2f      	cmp	r3, #47	; 0x2f
 800942c:	d006      	beq.n	800943c <create_name+0x48>
 800942e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009430:	2b5c      	cmp	r3, #92	; 0x5c
 8009432:	d110      	bne.n	8009456 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009434:	e002      	b.n	800943c <create_name+0x48>
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	3301      	adds	r3, #1
 800943a:	61bb      	str	r3, [r7, #24]
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	4413      	add	r3, r2
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	2b2f      	cmp	r3, #47	; 0x2f
 8009446:	d0f6      	beq.n	8009436 <create_name+0x42>
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	4413      	add	r3, r2
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b5c      	cmp	r3, #92	; 0x5c
 8009452:	d0f0      	beq.n	8009436 <create_name+0x42>
			break;
 8009454:	e02a      	b.n	80094ac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2b0e      	cmp	r3, #14
 800945a:	d901      	bls.n	8009460 <create_name+0x6c>
 800945c:	2306      	movs	r3, #6
 800945e:	e177      	b.n	8009750 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009462:	b2db      	uxtb	r3, r3
 8009464:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009468:	2101      	movs	r1, #1
 800946a:	4618      	mov	r0, r3
 800946c:	f001 fa92 	bl	800a994 <ff_convert>
 8009470:	4603      	mov	r3, r0
 8009472:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <create_name+0x8a>
 800947a:	2306      	movs	r3, #6
 800947c:	e168      	b.n	8009750 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800947e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009480:	2b7f      	cmp	r3, #127	; 0x7f
 8009482:	d809      	bhi.n	8009498 <create_name+0xa4>
 8009484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009486:	4619      	mov	r1, r3
 8009488:	48b3      	ldr	r0, [pc, #716]	; (8009758 <create_name+0x364>)
 800948a:	f7fe fd60 	bl	8007f4e <chk_chr>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <create_name+0xa4>
 8009494:	2306      	movs	r3, #6
 8009496:	e15b      	b.n	8009750 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	617a      	str	r2, [r7, #20]
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	4413      	add	r3, r2
 80094a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80094a6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80094a8:	e7b4      	b.n	8009414 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80094aa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	441a      	add	r2, r3
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80094b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094b8:	2b1f      	cmp	r3, #31
 80094ba:	d801      	bhi.n	80094c0 <create_name+0xcc>
 80094bc:	2304      	movs	r3, #4
 80094be:	e000      	b.n	80094c2 <create_name+0xce>
 80094c0:	2300      	movs	r3, #0
 80094c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80094c6:	e011      	b.n	80094ec <create_name+0xf8>
		w = lfn[di - 1];
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80094ce:	3b01      	subs	r3, #1
 80094d0:	005b      	lsls	r3, r3, #1
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	4413      	add	r3, r2
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80094da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d002      	beq.n	80094e6 <create_name+0xf2>
 80094e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094e2:	2b2e      	cmp	r3, #46	; 0x2e
 80094e4:	d106      	bne.n	80094f4 <create_name+0x100>
		di--;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1ea      	bne.n	80094c8 <create_name+0xd4>
 80094f2:	e000      	b.n	80094f6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80094f4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	005b      	lsls	r3, r3, #1
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4413      	add	r3, r2
 80094fe:	2200      	movs	r2, #0
 8009500:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <create_name+0x118>
 8009508:	2306      	movs	r3, #6
 800950a:	e121      	b.n	8009750 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	3324      	adds	r3, #36	; 0x24
 8009510:	220b      	movs	r2, #11
 8009512:	2120      	movs	r1, #32
 8009514:	4618      	mov	r0, r3
 8009516:	f7fe fcd8 	bl	8007eca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800951a:	2300      	movs	r3, #0
 800951c:	61bb      	str	r3, [r7, #24]
 800951e:	e002      	b.n	8009526 <create_name+0x132>
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	3301      	adds	r3, #1
 8009524:	61bb      	str	r3, [r7, #24]
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	4413      	add	r3, r2
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	2b20      	cmp	r3, #32
 8009532:	d0f5      	beq.n	8009520 <create_name+0x12c>
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	005b      	lsls	r3, r3, #1
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	4413      	add	r3, r2
 800953c:	881b      	ldrh	r3, [r3, #0]
 800953e:	2b2e      	cmp	r3, #46	; 0x2e
 8009540:	d0ee      	beq.n	8009520 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d009      	beq.n	800955c <create_name+0x168>
 8009548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800954c:	f043 0303 	orr.w	r3, r3, #3
 8009550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009554:	e002      	b.n	800955c <create_name+0x168>
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	3b01      	subs	r3, #1
 800955a:	617b      	str	r3, [r7, #20]
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d009      	beq.n	8009576 <create_name+0x182>
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009568:	3b01      	subs	r3, #1
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	4413      	add	r3, r2
 8009570:	881b      	ldrh	r3, [r3, #0]
 8009572:	2b2e      	cmp	r3, #46	; 0x2e
 8009574:	d1ef      	bne.n	8009556 <create_name+0x162>

	i = b = 0; ni = 8;
 8009576:	2300      	movs	r3, #0
 8009578:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800957c:	2300      	movs	r3, #0
 800957e:	623b      	str	r3, [r7, #32]
 8009580:	2308      	movs	r3, #8
 8009582:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	61ba      	str	r2, [r7, #24]
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	4413      	add	r3, r2
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009596:	2b00      	cmp	r3, #0
 8009598:	f000 8090 	beq.w	80096bc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800959c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800959e:	2b20      	cmp	r3, #32
 80095a0:	d006      	beq.n	80095b0 <create_name+0x1bc>
 80095a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095a4:	2b2e      	cmp	r3, #46	; 0x2e
 80095a6:	d10a      	bne.n	80095be <create_name+0x1ca>
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d006      	beq.n	80095be <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80095b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095b4:	f043 0303 	orr.w	r3, r3, #3
 80095b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095bc:	e07d      	b.n	80096ba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80095be:	6a3a      	ldr	r2, [r7, #32]
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d203      	bcs.n	80095ce <create_name+0x1da>
 80095c6:	69ba      	ldr	r2, [r7, #24]
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d123      	bne.n	8009616 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	2b0b      	cmp	r3, #11
 80095d2:	d106      	bne.n	80095e2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80095d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095d8:	f043 0303 	orr.w	r3, r3, #3
 80095dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095e0:	e06f      	b.n	80096c2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d005      	beq.n	80095f6 <create_name+0x202>
 80095ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095ee:	f043 0303 	orr.w	r3, r3, #3
 80095f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80095f6:	69ba      	ldr	r2, [r7, #24]
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d860      	bhi.n	80096c0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	61bb      	str	r3, [r7, #24]
 8009602:	2308      	movs	r3, #8
 8009604:	623b      	str	r3, [r7, #32]
 8009606:	230b      	movs	r3, #11
 8009608:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800960a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009614:	e051      	b.n	80096ba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009618:	2b7f      	cmp	r3, #127	; 0x7f
 800961a:	d914      	bls.n	8009646 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800961c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800961e:	2100      	movs	r1, #0
 8009620:	4618      	mov	r0, r3
 8009622:	f001 f9b7 	bl	800a994 <ff_convert>
 8009626:	4603      	mov	r3, r0
 8009628:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800962a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800962c:	2b00      	cmp	r3, #0
 800962e:	d004      	beq.n	800963a <create_name+0x246>
 8009630:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009632:	3b80      	subs	r3, #128	; 0x80
 8009634:	4a49      	ldr	r2, [pc, #292]	; (800975c <create_name+0x368>)
 8009636:	5cd3      	ldrb	r3, [r2, r3]
 8009638:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800963a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800963e:	f043 0302 	orr.w	r3, r3, #2
 8009642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009648:	2b00      	cmp	r3, #0
 800964a:	d007      	beq.n	800965c <create_name+0x268>
 800964c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800964e:	4619      	mov	r1, r3
 8009650:	4843      	ldr	r0, [pc, #268]	; (8009760 <create_name+0x36c>)
 8009652:	f7fe fc7c 	bl	8007f4e <chk_chr>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d008      	beq.n	800966e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800965c:	235f      	movs	r3, #95	; 0x5f
 800965e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009664:	f043 0303 	orr.w	r3, r3, #3
 8009668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800966c:	e01b      	b.n	80096a6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800966e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009670:	2b40      	cmp	r3, #64	; 0x40
 8009672:	d909      	bls.n	8009688 <create_name+0x294>
 8009674:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009676:	2b5a      	cmp	r3, #90	; 0x5a
 8009678:	d806      	bhi.n	8009688 <create_name+0x294>
					b |= 2;
 800967a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800967e:	f043 0302 	orr.w	r3, r3, #2
 8009682:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009686:	e00e      	b.n	80096a6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009688:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800968a:	2b60      	cmp	r3, #96	; 0x60
 800968c:	d90b      	bls.n	80096a6 <create_name+0x2b2>
 800968e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009690:	2b7a      	cmp	r3, #122	; 0x7a
 8009692:	d808      	bhi.n	80096a6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009694:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009698:	f043 0301 	orr.w	r3, r3, #1
 800969c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80096a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096a2:	3b20      	subs	r3, #32
 80096a4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80096a6:	6a3b      	ldr	r3, [r7, #32]
 80096a8:	1c5a      	adds	r2, r3, #1
 80096aa:	623a      	str	r2, [r7, #32]
 80096ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80096ae:	b2d1      	uxtb	r1, r2
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	4413      	add	r3, r2
 80096b4:	460a      	mov	r2, r1
 80096b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80096ba:	e763      	b.n	8009584 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80096bc:	bf00      	nop
 80096be:	e000      	b.n	80096c2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80096c0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80096c8:	2be5      	cmp	r3, #229	; 0xe5
 80096ca:	d103      	bne.n	80096d4 <create_name+0x2e0>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2205      	movs	r2, #5
 80096d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	2b08      	cmp	r3, #8
 80096d8:	d104      	bne.n	80096e4 <create_name+0x2f0>
 80096da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80096e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80096e8:	f003 030c 	and.w	r3, r3, #12
 80096ec:	2b0c      	cmp	r3, #12
 80096ee:	d005      	beq.n	80096fc <create_name+0x308>
 80096f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80096f4:	f003 0303 	and.w	r3, r3, #3
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d105      	bne.n	8009708 <create_name+0x314>
 80096fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009700:	f043 0302 	orr.w	r3, r3, #2
 8009704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800970c:	f003 0302 	and.w	r3, r3, #2
 8009710:	2b00      	cmp	r3, #0
 8009712:	d117      	bne.n	8009744 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009714:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009718:	f003 0303 	and.w	r3, r3, #3
 800971c:	2b01      	cmp	r3, #1
 800971e:	d105      	bne.n	800972c <create_name+0x338>
 8009720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009724:	f043 0310 	orr.w	r3, r3, #16
 8009728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800972c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009730:	f003 030c 	and.w	r3, r3, #12
 8009734:	2b04      	cmp	r3, #4
 8009736:	d105      	bne.n	8009744 <create_name+0x350>
 8009738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800973c:	f043 0308 	orr.w	r3, r3, #8
 8009740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800974a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800974e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009750:	4618      	mov	r0, r3
 8009752:	3728      	adds	r7, #40	; 0x28
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	0800b4f8 	.word	0x0800b4f8
 800975c:	0800b560 	.word	0x0800b560
 8009760:	0800b504 	.word	0x0800b504

08009764 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009778:	e002      	b.n	8009780 <follow_path+0x1c>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	3301      	adds	r3, #1
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b2f      	cmp	r3, #47	; 0x2f
 8009786:	d0f8      	beq.n	800977a <follow_path+0x16>
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b5c      	cmp	r3, #92	; 0x5c
 800978e:	d0f4      	beq.n	800977a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	2200      	movs	r2, #0
 8009794:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	2b1f      	cmp	r3, #31
 800979c:	d80a      	bhi.n	80097b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2280      	movs	r2, #128	; 0x80
 80097a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80097a6:	2100      	movs	r1, #0
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7ff f91b 	bl	80089e4 <dir_sdi>
 80097ae:	4603      	mov	r3, r0
 80097b0:	75fb      	strb	r3, [r7, #23]
 80097b2:	e043      	b.n	800983c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80097b4:	463b      	mov	r3, r7
 80097b6:	4619      	mov	r1, r3
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7ff fe1b 	bl	80093f4 <create_name>
 80097be:	4603      	mov	r3, r0
 80097c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80097c2:	7dfb      	ldrb	r3, [r7, #23]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d134      	bne.n	8009832 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7ff fc5a 	bl	8009082 <dir_find>
 80097ce:	4603      	mov	r3, r0
 80097d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80097d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80097da:	7dfb      	ldrb	r3, [r7, #23]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00a      	beq.n	80097f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	d127      	bne.n	8009836 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80097e6:	7afb      	ldrb	r3, [r7, #11]
 80097e8:	f003 0304 	and.w	r3, r3, #4
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d122      	bne.n	8009836 <follow_path+0xd2>
 80097f0:	2305      	movs	r3, #5
 80097f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80097f4:	e01f      	b.n	8009836 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80097f6:	7afb      	ldrb	r3, [r7, #11]
 80097f8:	f003 0304 	and.w	r3, r3, #4
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d11c      	bne.n	800983a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	799b      	ldrb	r3, [r3, #6]
 8009804:	f003 0310 	and.w	r3, r3, #16
 8009808:	2b00      	cmp	r3, #0
 800980a:	d102      	bne.n	8009812 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800980c:	2305      	movs	r3, #5
 800980e:	75fb      	strb	r3, [r7, #23]
 8009810:	e014      	b.n	800983c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009820:	4413      	add	r3, r2
 8009822:	4619      	mov	r1, r3
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f7ff fa64 	bl	8008cf2 <ld_clust>
 800982a:	4602      	mov	r2, r0
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009830:	e7c0      	b.n	80097b4 <follow_path+0x50>
			if (res != FR_OK) break;
 8009832:	bf00      	nop
 8009834:	e002      	b.n	800983c <follow_path+0xd8>
				break;
 8009836:	bf00      	nop
 8009838:	e000      	b.n	800983c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800983a:	bf00      	nop
			}
		}
	}

	return res;
 800983c:	7dfb      	ldrb	r3, [r7, #23]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3718      	adds	r7, #24
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009846:	b480      	push	{r7}
 8009848:	b087      	sub	sp, #28
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800984e:	f04f 33ff 	mov.w	r3, #4294967295
 8009852:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d031      	beq.n	80098c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	617b      	str	r3, [r7, #20]
 8009862:	e002      	b.n	800986a <get_ldnumber+0x24>
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	3301      	adds	r3, #1
 8009868:	617b      	str	r3, [r7, #20]
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	2b1f      	cmp	r3, #31
 8009870:	d903      	bls.n	800987a <get_ldnumber+0x34>
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	2b3a      	cmp	r3, #58	; 0x3a
 8009878:	d1f4      	bne.n	8009864 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	2b3a      	cmp	r3, #58	; 0x3a
 8009880:	d11c      	bne.n	80098bc <get_ldnumber+0x76>
			tp = *path;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	1c5a      	adds	r2, r3, #1
 800988c:	60fa      	str	r2, [r7, #12]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	3b30      	subs	r3, #48	; 0x30
 8009892:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2b09      	cmp	r3, #9
 8009898:	d80e      	bhi.n	80098b8 <get_ldnumber+0x72>
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d10a      	bne.n	80098b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d107      	bne.n	80098b8 <get_ldnumber+0x72>
					vol = (int)i;
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	3301      	adds	r3, #1
 80098b0:	617b      	str	r3, [r7, #20]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	e002      	b.n	80098c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80098bc:	2300      	movs	r3, #0
 80098be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80098c0:	693b      	ldr	r3, [r7, #16]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	371c      	adds	r7, #28
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
	...

080098d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	70da      	strb	r2, [r3, #3]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f04f 32ff 	mov.w	r2, #4294967295
 80098e6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7fe fcfa 	bl	80082e4 <move_window>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <check_fs+0x2a>
 80098f6:	2304      	movs	r3, #4
 80098f8:	e038      	b.n	800996c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	3334      	adds	r3, #52	; 0x34
 80098fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009902:	4618      	mov	r0, r3
 8009904:	f7fe fa3e 	bl	8007d84 <ld_word>
 8009908:	4603      	mov	r3, r0
 800990a:	461a      	mov	r2, r3
 800990c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009910:	429a      	cmp	r2, r3
 8009912:	d001      	beq.n	8009918 <check_fs+0x48>
 8009914:	2303      	movs	r3, #3
 8009916:	e029      	b.n	800996c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800991e:	2be9      	cmp	r3, #233	; 0xe9
 8009920:	d009      	beq.n	8009936 <check_fs+0x66>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009928:	2beb      	cmp	r3, #235	; 0xeb
 800992a:	d11e      	bne.n	800996a <check_fs+0x9a>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009932:	2b90      	cmp	r3, #144	; 0x90
 8009934:	d119      	bne.n	800996a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	3334      	adds	r3, #52	; 0x34
 800993a:	3336      	adds	r3, #54	; 0x36
 800993c:	4618      	mov	r0, r3
 800993e:	f7fe fa39 	bl	8007db4 <ld_dword>
 8009942:	4603      	mov	r3, r0
 8009944:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009948:	4a0a      	ldr	r2, [pc, #40]	; (8009974 <check_fs+0xa4>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d101      	bne.n	8009952 <check_fs+0x82>
 800994e:	2300      	movs	r3, #0
 8009950:	e00c      	b.n	800996c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	3334      	adds	r3, #52	; 0x34
 8009956:	3352      	adds	r3, #82	; 0x52
 8009958:	4618      	mov	r0, r3
 800995a:	f7fe fa2b 	bl	8007db4 <ld_dword>
 800995e:	4603      	mov	r3, r0
 8009960:	4a05      	ldr	r2, [pc, #20]	; (8009978 <check_fs+0xa8>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d101      	bne.n	800996a <check_fs+0x9a>
 8009966:	2300      	movs	r3, #0
 8009968:	e000      	b.n	800996c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800996a:	2302      	movs	r3, #2
}
 800996c:	4618      	mov	r0, r3
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	00544146 	.word	0x00544146
 8009978:	33544146 	.word	0x33544146

0800997c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b096      	sub	sp, #88	; 0x58
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	4613      	mov	r3, r2
 8009988:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f7ff ff58 	bl	8009846 <get_ldnumber>
 8009996:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800999a:	2b00      	cmp	r3, #0
 800999c:	da01      	bge.n	80099a2 <find_volume+0x26>
 800999e:	230b      	movs	r3, #11
 80099a0:	e231      	b.n	8009e06 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80099a2:	4aa8      	ldr	r2, [pc, #672]	; (8009c44 <find_volume+0x2c8>)
 80099a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80099ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <find_volume+0x3a>
 80099b2:	230c      	movs	r3, #12
 80099b4:	e227      	b.n	8009e06 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80099bc:	79fb      	ldrb	r3, [r7, #7]
 80099be:	f023 0301 	bic.w	r3, r3, #1
 80099c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80099c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d01a      	beq.n	8009a02 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80099cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ce:	785b      	ldrb	r3, [r3, #1]
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fe f939 	bl	8007c48 <disk_status>
 80099d6:	4603      	mov	r3, r0
 80099d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80099dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10c      	bne.n	8009a02 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80099e8:	79fb      	ldrb	r3, [r7, #7]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d007      	beq.n	80099fe <find_volume+0x82>
 80099ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099f2:	f003 0304 	and.w	r3, r3, #4
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80099fa:	230a      	movs	r3, #10
 80099fc:	e203      	b.n	8009e06 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 80099fe:	2300      	movs	r3, #0
 8009a00:	e201      	b.n	8009e06 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a04:	2200      	movs	r2, #0
 8009a06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a12:	785b      	ldrb	r3, [r3, #1]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fe f931 	bl	8007c7c <disk_initialize>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009a20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a24:	f003 0301 	and.w	r3, r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e1ea      	b.n	8009e06 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d007      	beq.n	8009a46 <find_volume+0xca>
 8009a36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a3a:	f003 0304 	and.w	r3, r3, #4
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009a42:	230a      	movs	r3, #10
 8009a44:	e1df      	b.n	8009e06 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009a4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a4e:	f7ff ff3f 	bl	80098d0 <check_fs>
 8009a52:	4603      	mov	r3, r0
 8009a54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009a58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d14b      	bne.n	8009af8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009a60:	2300      	movs	r3, #0
 8009a62:	643b      	str	r3, [r7, #64]	; 0x40
 8009a64:	e01f      	b.n	8009aa6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a68:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a6e:	011b      	lsls	r3, r3, #4
 8009a70:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009a74:	4413      	add	r3, r2
 8009a76:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7a:	3304      	adds	r3, #4
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d006      	beq.n	8009a90 <find_volume+0x114>
 8009a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a84:	3308      	adds	r3, #8
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe f994 	bl	8007db4 <ld_dword>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	e000      	b.n	8009a92 <find_volume+0x116>
 8009a90:	2200      	movs	r2, #0
 8009a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009a9a:	440b      	add	r3, r1
 8009a9c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8009aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	d9dc      	bls.n	8009a66 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009aac:	2300      	movs	r3, #0
 8009aae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <find_volume+0x140>
 8009ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009aca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d005      	beq.n	8009ade <find_volume+0x162>
 8009ad2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ad4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ad6:	f7ff fefb 	bl	80098d0 <check_fs>
 8009ada:	4603      	mov	r3, r0
 8009adc:	e000      	b.n	8009ae0 <find_volume+0x164>
 8009ade:	2303      	movs	r3, #3
 8009ae0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d905      	bls.n	8009af8 <find_volume+0x17c>
 8009aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aee:	3301      	adds	r3, #1
 8009af0:	643b      	str	r3, [r7, #64]	; 0x40
 8009af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d9e1      	bls.n	8009abc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009af8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009afc:	2b04      	cmp	r3, #4
 8009afe:	d101      	bne.n	8009b04 <find_volume+0x188>
 8009b00:	2301      	movs	r3, #1
 8009b02:	e180      	b.n	8009e06 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009b04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d901      	bls.n	8009b10 <find_volume+0x194>
 8009b0c:	230d      	movs	r3, #13
 8009b0e:	e17a      	b.n	8009e06 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b12:	3334      	adds	r3, #52	; 0x34
 8009b14:	330b      	adds	r3, #11
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fe f934 	bl	8007d84 <ld_word>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b22:	d001      	beq.n	8009b28 <find_volume+0x1ac>
 8009b24:	230d      	movs	r3, #13
 8009b26:	e16e      	b.n	8009e06 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	3334      	adds	r3, #52	; 0x34
 8009b2c:	3316      	adds	r3, #22
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fe f928 	bl	8007d84 <ld_word>
 8009b34:	4603      	mov	r3, r0
 8009b36:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d106      	bne.n	8009b4c <find_volume+0x1d0>
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b40:	3334      	adds	r3, #52	; 0x34
 8009b42:	3324      	adds	r3, #36	; 0x24
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe f935 	bl	8007db4 <ld_dword>
 8009b4a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b50:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b54:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5e:	789b      	ldrb	r3, [r3, #2]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d005      	beq.n	8009b70 <find_volume+0x1f4>
 8009b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b66:	789b      	ldrb	r3, [r3, #2]
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d001      	beq.n	8009b70 <find_volume+0x1f4>
 8009b6c:	230d      	movs	r3, #13
 8009b6e:	e14a      	b.n	8009e06 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b72:	789b      	ldrb	r3, [r3, #2]
 8009b74:	461a      	mov	r2, r3
 8009b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b78:	fb02 f303 	mul.w	r3, r2, r3
 8009b7c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	895b      	ldrh	r3, [r3, #10]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d008      	beq.n	8009ba4 <find_volume+0x228>
 8009b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b94:	895b      	ldrh	r3, [r3, #10]
 8009b96:	461a      	mov	r2, r3
 8009b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9a:	895b      	ldrh	r3, [r3, #10]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <find_volume+0x22c>
 8009ba4:	230d      	movs	r3, #13
 8009ba6:	e12e      	b.n	8009e06 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009baa:	3334      	adds	r3, #52	; 0x34
 8009bac:	3311      	adds	r3, #17
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fe f8e8 	bl	8007d84 <ld_word>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	891b      	ldrh	r3, [r3, #8]
 8009bc0:	f003 030f 	and.w	r3, r3, #15
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <find_volume+0x252>
 8009bca:	230d      	movs	r3, #13
 8009bcc:	e11b      	b.n	8009e06 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd0:	3334      	adds	r3, #52	; 0x34
 8009bd2:	3313      	adds	r3, #19
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7fe f8d5 	bl	8007d84 <ld_word>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d106      	bne.n	8009bf2 <find_volume+0x276>
 8009be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be6:	3334      	adds	r3, #52	; 0x34
 8009be8:	3320      	adds	r3, #32
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fe f8e2 	bl	8007db4 <ld_dword>
 8009bf0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf4:	3334      	adds	r3, #52	; 0x34
 8009bf6:	330e      	adds	r3, #14
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fe f8c3 	bl	8007d84 <ld_word>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009c02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d101      	bne.n	8009c0c <find_volume+0x290>
 8009c08:	230d      	movs	r3, #13
 8009c0a:	e0fc      	b.n	8009e06 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009c0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c10:	4413      	add	r3, r2
 8009c12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c14:	8912      	ldrh	r2, [r2, #8]
 8009c16:	0912      	lsrs	r2, r2, #4
 8009c18:	b292      	uxth	r2, r2
 8009c1a:	4413      	add	r3, r2
 8009c1c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d201      	bcs.n	8009c2a <find_volume+0x2ae>
 8009c26:	230d      	movs	r3, #13
 8009c28:	e0ed      	b.n	8009e06 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c32:	8952      	ldrh	r2, [r2, #10]
 8009c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c38:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d103      	bne.n	8009c48 <find_volume+0x2cc>
 8009c40:	230d      	movs	r3, #13
 8009c42:	e0e0      	b.n	8009e06 <find_volume+0x48a>
 8009c44:	200000d0 	.word	0x200000d0
		fmt = FS_FAT32;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d802      	bhi.n	8009c5e <find_volume+0x2e2>
 8009c58:	2302      	movs	r3, #2
 8009c5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c60:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d802      	bhi.n	8009c6e <find_volume+0x2f2>
 8009c68:	2301      	movs	r3, #1
 8009c6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c70:	1c9a      	adds	r2, r3, #2
 8009c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c74:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c7a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009c7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c80:	441a      	add	r2, r3
 8009c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c84:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009c86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8a:	441a      	add	r2, r3
 8009c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009c90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c94:	2b03      	cmp	r3, #3
 8009c96:	d11e      	bne.n	8009cd6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9a:	3334      	adds	r3, #52	; 0x34
 8009c9c:	332a      	adds	r3, #42	; 0x2a
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fe f870 	bl	8007d84 <ld_word>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <find_volume+0x332>
 8009caa:	230d      	movs	r3, #13
 8009cac:	e0ab      	b.n	8009e06 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb0:	891b      	ldrh	r3, [r3, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d001      	beq.n	8009cba <find_volume+0x33e>
 8009cb6:	230d      	movs	r3, #13
 8009cb8:	e0a5      	b.n	8009e06 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbc:	3334      	adds	r3, #52	; 0x34
 8009cbe:	332c      	adds	r3, #44	; 0x2c
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fe f877 	bl	8007db4 <ld_dword>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cca:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8009cd4:	e01f      	b.n	8009d16 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd8:	891b      	ldrh	r3, [r3, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d101      	bne.n	8009ce2 <find_volume+0x366>
 8009cde:	230d      	movs	r3, #13
 8009ce0:	e091      	b.n	8009e06 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce8:	441a      	add	r2, r3
 8009cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cec:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009cee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d103      	bne.n	8009cfe <find_volume+0x382>
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	005b      	lsls	r3, r3, #1
 8009cfc:	e00a      	b.n	8009d14 <find_volume+0x398>
 8009cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d00:	699a      	ldr	r2, [r3, #24]
 8009d02:	4613      	mov	r3, r2
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	4413      	add	r3, r2
 8009d08:	085a      	lsrs	r2, r3, #1
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009d14:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d18:	69da      	ldr	r2, [r3, #28]
 8009d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d1c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009d20:	0a5b      	lsrs	r3, r3, #9
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d201      	bcs.n	8009d2a <find_volume+0x3ae>
 8009d26:	230d      	movs	r3, #13
 8009d28:	e06d      	b.n	8009e06 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d30:	615a      	str	r2, [r3, #20]
 8009d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d34:	695a      	ldr	r2, [r3, #20]
 8009d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d38:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3c:	2280      	movs	r2, #128	; 0x80
 8009d3e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009d40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d44:	2b03      	cmp	r3, #3
 8009d46:	d149      	bne.n	8009ddc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4a:	3334      	adds	r3, #52	; 0x34
 8009d4c:	3330      	adds	r3, #48	; 0x30
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fe f818 	bl	8007d84 <ld_word>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d140      	bne.n	8009ddc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d62:	f7fe fabf 	bl	80082e4 <move_window>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d137      	bne.n	8009ddc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6e:	2200      	movs	r2, #0
 8009d70:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d74:	3334      	adds	r3, #52	; 0x34
 8009d76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fe f802 	bl	8007d84 <ld_word>
 8009d80:	4603      	mov	r3, r0
 8009d82:	461a      	mov	r2, r3
 8009d84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d127      	bne.n	8009ddc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8e:	3334      	adds	r3, #52	; 0x34
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fe f80f 	bl	8007db4 <ld_dword>
 8009d96:	4603      	mov	r3, r0
 8009d98:	4a1d      	ldr	r2, [pc, #116]	; (8009e10 <find_volume+0x494>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d11e      	bne.n	8009ddc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da0:	3334      	adds	r3, #52	; 0x34
 8009da2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe f804 	bl	8007db4 <ld_dword>
 8009dac:	4603      	mov	r3, r0
 8009dae:	4a19      	ldr	r2, [pc, #100]	; (8009e14 <find_volume+0x498>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d113      	bne.n	8009ddc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db6:	3334      	adds	r3, #52	; 0x34
 8009db8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fd fff9 	bl	8007db4 <ld_dword>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dca:	3334      	adds	r3, #52	; 0x34
 8009dcc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fd ffef 	bl	8007db4 <ld_dword>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dda:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dde:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009de2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009de4:	4b0c      	ldr	r3, [pc, #48]	; (8009e18 <find_volume+0x49c>)
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	3301      	adds	r3, #1
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	4b0a      	ldr	r3, [pc, #40]	; (8009e18 <find_volume+0x49c>)
 8009dee:	801a      	strh	r2, [r3, #0]
 8009df0:	4b09      	ldr	r3, [pc, #36]	; (8009e18 <find_volume+0x49c>)
 8009df2:	881a      	ldrh	r2, [r3, #0]
 8009df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfa:	4a08      	ldr	r2, [pc, #32]	; (8009e1c <find_volume+0x4a0>)
 8009dfc:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009dfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e00:	f7fe fa08 	bl	8008214 <clear_lock>
#endif
	return FR_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3758      	adds	r7, #88	; 0x58
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	41615252 	.word	0x41615252
 8009e14:	61417272 	.word	0x61417272
 8009e18:	200000d4 	.word	0x200000d4
 8009e1c:	200000f8 	.word	0x200000f8

08009e20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009e2a:	2309      	movs	r3, #9
 8009e2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d01c      	beq.n	8009e6e <validate+0x4e>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d018      	beq.n	8009e6e <validate+0x4e>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d013      	beq.n	8009e6e <validate+0x4e>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	889a      	ldrh	r2, [r3, #4]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	88db      	ldrh	r3, [r3, #6]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d10c      	bne.n	8009e6e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	785b      	ldrb	r3, [r3, #1]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fd fef4 	bl	8007c48 <disk_status>
 8009e60:	4603      	mov	r3, r0
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <validate+0x4e>
			res = FR_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d102      	bne.n	8009e7a <validate+0x5a>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	e000      	b.n	8009e7c <validate+0x5c>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	683a      	ldr	r2, [r7, #0]
 8009e7e:	6013      	str	r3, [r2, #0]
	return res;
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
	...

08009e8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b088      	sub	sp, #32
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	4613      	mov	r3, r2
 8009e98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009e9e:	f107 0310 	add.w	r3, r7, #16
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7ff fccf 	bl	8009846 <get_ldnumber>
 8009ea8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	da01      	bge.n	8009eb4 <f_mount+0x28>
 8009eb0:	230b      	movs	r3, #11
 8009eb2:	e02b      	b.n	8009f0c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009eb4:	4a17      	ldr	r2, [pc, #92]	; (8009f14 <f_mount+0x88>)
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ebc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d005      	beq.n	8009ed0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009ec4:	69b8      	ldr	r0, [r7, #24]
 8009ec6:	f7fe f9a5 	bl	8008214 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d002      	beq.n	8009edc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	490d      	ldr	r1, [pc, #52]	; (8009f14 <f_mount+0x88>)
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <f_mount+0x66>
 8009eec:	79fb      	ldrb	r3, [r7, #7]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d001      	beq.n	8009ef6 <f_mount+0x6a>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e00a      	b.n	8009f0c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009ef6:	f107 010c 	add.w	r1, r7, #12
 8009efa:	f107 0308 	add.w	r3, r7, #8
 8009efe:	2200      	movs	r2, #0
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7ff fd3b 	bl	800997c <find_volume>
 8009f06:	4603      	mov	r3, r0
 8009f08:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3720      	adds	r7, #32
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	200000d0 	.word	0x200000d0

08009f18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b09a      	sub	sp, #104	; 0x68
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	4613      	mov	r3, r2
 8009f24:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d101      	bne.n	8009f30 <f_open+0x18>
 8009f2c:	2309      	movs	r3, #9
 8009f2e:	e1ad      	b.n	800a28c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009f30:	79fb      	ldrb	r3, [r7, #7]
 8009f32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f36:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009f38:	79fa      	ldrb	r2, [r7, #7]
 8009f3a:	f107 0114 	add.w	r1, r7, #20
 8009f3e:	f107 0308 	add.w	r3, r7, #8
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7ff fd1a 	bl	800997c <find_volume>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009f4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f040 8191 	bne.w	800a27a <f_open+0x362>
		dj.obj.fs = fs;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	f107 0318 	add.w	r3, r7, #24
 8009f62:	4611      	mov	r1, r2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7ff fbfd 	bl	8009764 <follow_path>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009f70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d11a      	bne.n	8009fae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009f78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009f7c:	b25b      	sxtb	r3, r3
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	da03      	bge.n	8009f8a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009f82:	2306      	movs	r3, #6
 8009f84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009f88:	e011      	b.n	8009fae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009f8a:	79fb      	ldrb	r3, [r7, #7]
 8009f8c:	f023 0301 	bic.w	r3, r3, #1
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	bf14      	ite	ne
 8009f94:	2301      	movne	r3, #1
 8009f96:	2300      	moveq	r3, #0
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f107 0318 	add.w	r3, r7, #24
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fd ffee 	bl	8007f84 <chk_lock>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009fae:	79fb      	ldrb	r3, [r7, #7]
 8009fb0:	f003 031c 	and.w	r3, r3, #28
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d07f      	beq.n	800a0b8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009fb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d017      	beq.n	8009ff0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009fc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009fc4:	2b04      	cmp	r3, #4
 8009fc6:	d10e      	bne.n	8009fe6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009fc8:	f7fe f838 	bl	800803c <enq_lock>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d006      	beq.n	8009fe0 <f_open+0xc8>
 8009fd2:	f107 0318 	add.w	r3, r7, #24
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7ff f914 	bl	8009204 <dir_register>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	e000      	b.n	8009fe2 <f_open+0xca>
 8009fe0:	2312      	movs	r3, #18
 8009fe2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009fe6:	79fb      	ldrb	r3, [r7, #7]
 8009fe8:	f043 0308 	orr.w	r3, r3, #8
 8009fec:	71fb      	strb	r3, [r7, #7]
 8009fee:	e010      	b.n	800a012 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009ff0:	7fbb      	ldrb	r3, [r7, #30]
 8009ff2:	f003 0311 	and.w	r3, r3, #17
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d003      	beq.n	800a002 <f_open+0xea>
					res = FR_DENIED;
 8009ffa:	2307      	movs	r3, #7
 8009ffc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a000:	e007      	b.n	800a012 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a002:	79fb      	ldrb	r3, [r7, #7]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <f_open+0xfa>
 800a00c:	2308      	movs	r3, #8
 800a00e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a012:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a016:	2b00      	cmp	r3, #0
 800a018:	d168      	bne.n	800a0ec <f_open+0x1d4>
 800a01a:	79fb      	ldrb	r3, [r7, #7]
 800a01c:	f003 0308 	and.w	r3, r3, #8
 800a020:	2b00      	cmp	r3, #0
 800a022:	d063      	beq.n	800a0ec <f_open+0x1d4>
				dw = GET_FATTIME();
 800a024:	f7fd f8de 	bl	80071e4 <get_fattime>
 800a028:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02c:	330e      	adds	r3, #14
 800a02e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a030:	4618      	mov	r0, r3
 800a032:	f7fd fefd 	bl	8007e30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a038:	3316      	adds	r3, #22
 800a03a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fd fef7 	bl	8007e30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a044:	330b      	adds	r3, #11
 800a046:	2220      	movs	r2, #32
 800a048:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a04e:	4611      	mov	r1, r2
 800a050:	4618      	mov	r0, r3
 800a052:	f7fe fe4e 	bl	8008cf2 <ld_clust>
 800a056:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a05c:	2200      	movs	r2, #0
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fe fe66 	bl	8008d30 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a066:	331c      	adds	r3, #28
 800a068:	2100      	movs	r1, #0
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fd fee0 	bl	8007e30 <st_dword>
					fs->wflag = 1;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	2201      	movs	r2, #1
 800a074:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d037      	beq.n	800a0ec <f_open+0x1d4>
						dw = fs->winsect;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a080:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a082:	f107 0318 	add.w	r3, r7, #24
 800a086:	2200      	movs	r2, #0
 800a088:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fe fb79 	bl	8008782 <remove_chain>
 800a090:	4603      	mov	r3, r0
 800a092:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a096:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d126      	bne.n	800a0ec <f_open+0x1d4>
							res = move_window(fs, dw);
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe f91e 	bl	80082e4 <move_window>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0b2:	3a01      	subs	r2, #1
 800a0b4:	611a      	str	r2, [r3, #16]
 800a0b6:	e019      	b.n	800a0ec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a0b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d115      	bne.n	800a0ec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a0c0:	7fbb      	ldrb	r3, [r7, #30]
 800a0c2:	f003 0310 	and.w	r3, r3, #16
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a0ca:	2304      	movs	r3, #4
 800a0cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a0d0:	e00c      	b.n	800a0ec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a0d2:	79fb      	ldrb	r3, [r7, #7]
 800a0d4:	f003 0302 	and.w	r3, r3, #2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d007      	beq.n	800a0ec <f_open+0x1d4>
 800a0dc:	7fbb      	ldrb	r3, [r7, #30]
 800a0de:	f003 0301 	and.w	r3, r3, #1
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d002      	beq.n	800a0ec <f_open+0x1d4>
						res = FR_DENIED;
 800a0e6:	2307      	movs	r3, #7
 800a0e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a0ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d128      	bne.n	800a146 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	f003 0308 	and.w	r3, r3, #8
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a104:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a10e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a114:	79fb      	ldrb	r3, [r7, #7]
 800a116:	f023 0301 	bic.w	r3, r3, #1
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	bf14      	ite	ne
 800a11e:	2301      	movne	r3, #1
 800a120:	2300      	moveq	r3, #0
 800a122:	b2db      	uxtb	r3, r3
 800a124:	461a      	mov	r2, r3
 800a126:	f107 0318 	add.w	r3, r7, #24
 800a12a:	4611      	mov	r1, r2
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fd ffa7 	bl	8008080 <inc_lock>
 800a132:	4602      	mov	r2, r0
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d102      	bne.n	800a146 <f_open+0x22e>
 800a140:	2302      	movs	r3, #2
 800a142:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a146:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f040 8095 	bne.w	800a27a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a154:	4611      	mov	r1, r2
 800a156:	4618      	mov	r0, r3
 800a158:	f7fe fdcb 	bl	8008cf2 <ld_clust>
 800a15c:	4602      	mov	r2, r0
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a164:	331c      	adds	r3, #28
 800a166:	4618      	mov	r0, r3
 800a168:	f7fd fe24 	bl	8007db4 <ld_dword>
 800a16c:	4602      	mov	r2, r0
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	88da      	ldrh	r2, [r3, #6]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	79fa      	ldrb	r2, [r7, #7]
 800a18a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2200      	movs	r2, #0
 800a19c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	3330      	adds	r3, #48	; 0x30
 800a1a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7fd fe8e 	bl	8007eca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a1ae:	79fb      	ldrb	r3, [r7, #7]
 800a1b0:	f003 0320 	and.w	r3, r3, #32
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d060      	beq.n	800a27a <f_open+0x362>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d05c      	beq.n	800a27a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	68da      	ldr	r2, [r3, #12]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	895b      	ldrh	r3, [r3, #10]
 800a1cc:	025b      	lsls	r3, r3, #9
 800a1ce:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1dc:	e016      	b.n	800a20c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fe f939 	bl	800845a <get_fat>
 800a1e8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a1ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d802      	bhi.n	800a1f6 <f_open+0x2de>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a1f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fc:	d102      	bne.n	800a204 <f_open+0x2ec>
 800a1fe:	2301      	movs	r3, #1
 800a200:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a204:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a20c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a210:	2b00      	cmp	r3, #0
 800a212:	d103      	bne.n	800a21c <f_open+0x304>
 800a214:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a218:	429a      	cmp	r2, r3
 800a21a:	d8e0      	bhi.n	800a1de <f_open+0x2c6>
				}
				fp->clust = clst;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a220:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a222:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a226:	2b00      	cmp	r3, #0
 800a228:	d127      	bne.n	800a27a <f_open+0x362>
 800a22a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a22c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a230:	2b00      	cmp	r3, #0
 800a232:	d022      	beq.n	800a27a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fe f8ef 	bl	800841c <clust2sect>
 800a23e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a242:	2b00      	cmp	r3, #0
 800a244:	d103      	bne.n	800a24e <f_open+0x336>
						res = FR_INT_ERR;
 800a246:	2302      	movs	r3, #2
 800a248:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a24c:	e015      	b.n	800a27a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a24e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a250:	0a5a      	lsrs	r2, r3, #9
 800a252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a254:	441a      	add	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	7858      	ldrb	r0, [r3, #1]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6a1a      	ldr	r2, [r3, #32]
 800a268:	2301      	movs	r3, #1
 800a26a:	f7fd fd2d 	bl	8007cc8 <disk_read>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <f_open+0x362>
 800a274:	2301      	movs	r3, #1
 800a276:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a27a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d002      	beq.n	800a288 <f_open+0x370>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a288:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3768      	adds	r7, #104	; 0x68
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08c      	sub	sp, #48	; 0x30
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f107 0210 	add.w	r2, r7, #16
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7ff fdb3 	bl	8009e20 <validate>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a2c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d107      	bne.n	800a2d8 <f_write+0x44>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	7d5b      	ldrb	r3, [r3, #21]
 800a2cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a2d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <f_write+0x4a>
 800a2d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2dc:	e14b      	b.n	800a576 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	7d1b      	ldrb	r3, [r3, #20]
 800a2e2:	f003 0302 	and.w	r3, r3, #2
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d101      	bne.n	800a2ee <f_write+0x5a>
 800a2ea:	2307      	movs	r3, #7
 800a2ec:	e143      	b.n	800a576 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	699a      	ldr	r2, [r3, #24]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	441a      	add	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	f080 812d 	bcs.w	800a55a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	43db      	mvns	r3, r3
 800a306:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a308:	e127      	b.n	800a55a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a312:	2b00      	cmp	r3, #0
 800a314:	f040 80e3 	bne.w	800a4de <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	0a5b      	lsrs	r3, r3, #9
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	8952      	ldrh	r2, [r2, #10]
 800a322:	3a01      	subs	r2, #1
 800a324:	4013      	ands	r3, r2
 800a326:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d143      	bne.n	800a3b6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10c      	bne.n	800a350 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d11a      	bne.n	800a378 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2100      	movs	r1, #0
 800a346:	4618      	mov	r0, r3
 800a348:	f7fe fa80 	bl	800884c <create_chain>
 800a34c:	62b8      	str	r0, [r7, #40]	; 0x28
 800a34e:	e013      	b.n	800a378 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a354:	2b00      	cmp	r3, #0
 800a356:	d007      	beq.n	800a368 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	4619      	mov	r1, r3
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f7fe fb0c 	bl	800897c <clmt_clust>
 800a364:	62b8      	str	r0, [r7, #40]	; 0x28
 800a366:	e007      	b.n	800a378 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	4619      	mov	r1, r3
 800a370:	4610      	mov	r0, r2
 800a372:	f7fe fa6b 	bl	800884c <create_chain>
 800a376:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f000 80f2 	beq.w	800a564 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a382:	2b01      	cmp	r3, #1
 800a384:	d104      	bne.n	800a390 <f_write+0xfc>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2202      	movs	r2, #2
 800a38a:	755a      	strb	r2, [r3, #21]
 800a38c:	2302      	movs	r3, #2
 800a38e:	e0f2      	b.n	800a576 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a396:	d104      	bne.n	800a3a2 <f_write+0x10e>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2201      	movs	r2, #1
 800a39c:	755a      	strb	r2, [r3, #21]
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e0e9      	b.n	800a576 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3a6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d102      	bne.n	800a3b6 <f_write+0x122>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3b4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	7d1b      	ldrb	r3, [r3, #20]
 800a3ba:	b25b      	sxtb	r3, r3
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	da18      	bge.n	800a3f2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	7858      	ldrb	r0, [r3, #1]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a1a      	ldr	r2, [r3, #32]
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	f7fd fc9a 	bl	8007d08 <disk_write>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d004      	beq.n	800a3e4 <f_write+0x150>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	755a      	strb	r2, [r3, #21]
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e0c8      	b.n	800a576 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	7d1b      	ldrb	r3, [r3, #20]
 800a3e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	69db      	ldr	r3, [r3, #28]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	f7fe f80e 	bl	800841c <clust2sect>
 800a400:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d104      	bne.n	800a412 <f_write+0x17e>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2202      	movs	r2, #2
 800a40c:	755a      	strb	r2, [r3, #21]
 800a40e:	2302      	movs	r3, #2
 800a410:	e0b1      	b.n	800a576 <f_write+0x2e2>
			sect += csect;
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	4413      	add	r3, r2
 800a418:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	0a5b      	lsrs	r3, r3, #9
 800a41e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d03c      	beq.n	800a4a0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a426:	69ba      	ldr	r2, [r7, #24]
 800a428:	6a3b      	ldr	r3, [r7, #32]
 800a42a:	4413      	add	r3, r2
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	8952      	ldrh	r2, [r2, #10]
 800a430:	4293      	cmp	r3, r2
 800a432:	d905      	bls.n	800a440 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	895b      	ldrh	r3, [r3, #10]
 800a438:	461a      	mov	r2, r3
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	7858      	ldrb	r0, [r3, #1]
 800a444:	6a3b      	ldr	r3, [r7, #32]
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	69f9      	ldr	r1, [r7, #28]
 800a44a:	f7fd fc5d 	bl	8007d08 <disk_write>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d004      	beq.n	800a45e <f_write+0x1ca>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2201      	movs	r2, #1
 800a458:	755a      	strb	r2, [r3, #21]
 800a45a:	2301      	movs	r3, #1
 800a45c:	e08b      	b.n	800a576 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6a1a      	ldr	r2, [r3, #32]
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	6a3a      	ldr	r2, [r7, #32]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d915      	bls.n	800a498 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6a1a      	ldr	r2, [r3, #32]
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	1ad3      	subs	r3, r2, r3
 800a47a:	025b      	lsls	r3, r3, #9
 800a47c:	69fa      	ldr	r2, [r7, #28]
 800a47e:	4413      	add	r3, r2
 800a480:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a484:	4619      	mov	r1, r3
 800a486:	f7fd fcff 	bl	8007e88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	7d1b      	ldrb	r3, [r3, #20]
 800a48e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a492:	b2da      	uxtb	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a498:	6a3b      	ldr	r3, [r7, #32]
 800a49a:	025b      	lsls	r3, r3, #9
 800a49c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a49e:	e03f      	b.n	800a520 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d016      	beq.n	800a4d8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	699a      	ldr	r2, [r3, #24]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d210      	bcs.n	800a4d8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	7858      	ldrb	r0, [r3, #1]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	f7fd fc00 	bl	8007cc8 <disk_read>
 800a4c8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d004      	beq.n	800a4d8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	755a      	strb	r2, [r3, #21]
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e04e      	b.n	800a576 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4e6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a4ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d901      	bls.n	800a4f8 <f_write+0x264>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a506:	4413      	add	r3, r2
 800a508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a50a:	69f9      	ldr	r1, [r7, #28]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fd fcbb 	bl	8007e88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	7d1b      	ldrb	r3, [r3, #20]
 800a516:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a51a:	b2da      	uxtb	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a520:	69fa      	ldr	r2, [r7, #28]
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	4413      	add	r3, r2
 800a526:	61fb      	str	r3, [r7, #28]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	699a      	ldr	r2, [r3, #24]
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	441a      	add	r2, r3
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	619a      	str	r2, [r3, #24]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	68da      	ldr	r2, [r3, #12]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	bf38      	it	cc
 800a540:	461a      	movcc	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	60da      	str	r2, [r3, #12]
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	441a      	add	r2, r3
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	601a      	str	r2, [r3, #0]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f47f aed4 	bne.w	800a30a <f_write+0x76>
 800a562:	e000      	b.n	800a566 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a564:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	7d1b      	ldrb	r3, [r3, #20]
 800a56a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3730      	adds	r7, #48	; 0x30
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b086      	sub	sp, #24
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f107 0208 	add.w	r2, r7, #8
 800a58c:	4611      	mov	r1, r2
 800a58e:	4618      	mov	r0, r3
 800a590:	f7ff fc46 	bl	8009e20 <validate>
 800a594:	4603      	mov	r3, r0
 800a596:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a598:	7dfb      	ldrb	r3, [r7, #23]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d168      	bne.n	800a670 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	7d1b      	ldrb	r3, [r3, #20]
 800a5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d062      	beq.n	800a670 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	7d1b      	ldrb	r3, [r3, #20]
 800a5ae:	b25b      	sxtb	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	da15      	bge.n	800a5e0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	7858      	ldrb	r0, [r3, #1]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a1a      	ldr	r2, [r3, #32]
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	f7fd fba0 	bl	8007d08 <disk_write>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d001      	beq.n	800a5d2 <f_sync+0x54>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e04f      	b.n	800a672 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	7d1b      	ldrb	r3, [r3, #20]
 800a5d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a5e0:	f7fc fe00 	bl	80071e4 <get_fattime>
 800a5e4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	f7fd fe78 	bl	80082e4 <move_window>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a5f8:	7dfb      	ldrb	r3, [r7, #23]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d138      	bne.n	800a670 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a602:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	330b      	adds	r3, #11
 800a608:	781a      	ldrb	r2, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	330b      	adds	r3, #11
 800a60e:	f042 0220 	orr.w	r2, r2, #32
 800a612:	b2d2      	uxtb	r2, r2
 800a614:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6818      	ldr	r0, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	461a      	mov	r2, r3
 800a620:	68f9      	ldr	r1, [r7, #12]
 800a622:	f7fe fb85 	bl	8008d30 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f103 021c 	add.w	r2, r3, #28
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	4619      	mov	r1, r3
 800a632:	4610      	mov	r0, r2
 800a634:	f7fd fbfc 	bl	8007e30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3316      	adds	r3, #22
 800a63c:	6939      	ldr	r1, [r7, #16]
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fd fbf6 	bl	8007e30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	3312      	adds	r3, #18
 800a648:	2100      	movs	r1, #0
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fd fbd5 	bl	8007dfa <st_word>
					fs->wflag = 1;
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2201      	movs	r2, #1
 800a654:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	4618      	mov	r0, r3
 800a65a:	f7fd fe71 	bl	8008340 <sync_fs>
 800a65e:	4603      	mov	r3, r0
 800a660:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	7d1b      	ldrb	r3, [r3, #20]
 800a666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a670:	7dfb      	ldrb	r3, [r7, #23]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3718      	adds	r7, #24
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b084      	sub	sp, #16
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7ff ff7b 	bl	800a57e <f_sync>
 800a688:	4603      	mov	r3, r0
 800a68a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a68c:	7bfb      	ldrb	r3, [r7, #15]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d118      	bne.n	800a6c4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f107 0208 	add.w	r2, r7, #8
 800a698:	4611      	mov	r1, r2
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7ff fbc0 	bl	8009e20 <validate>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a6a4:	7bfb      	ldrb	r3, [r7, #15]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10c      	bne.n	800a6c4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fd fd74 	bl	800819c <dec_lock>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d102      	bne.n	800a6c4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b098      	sub	sp, #96	; 0x60
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a6d6:	f107 010c 	add.w	r1, r7, #12
 800a6da:	1d3b      	adds	r3, r7, #4
 800a6dc:	2202      	movs	r2, #2
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7ff f94c 	bl	800997c <find_volume>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800a6ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f040 80ec 	bne.w	800a8d0 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	f107 0310 	add.w	r3, r7, #16
 800a6fe:	4611      	mov	r1, r2
 800a700:	4618      	mov	r0, r3
 800a702:	f7ff f82f 	bl	8009764 <follow_path>
 800a706:	4603      	mov	r3, r0
 800a708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800a70c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a710:	2b00      	cmp	r3, #0
 800a712:	d102      	bne.n	800a71a <f_mkdir+0x4c>
 800a714:	2308      	movs	r3, #8
 800a716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800a71a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a71e:	2b04      	cmp	r3, #4
 800a720:	f040 80d6 	bne.w	800a8d0 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800a724:	f107 0310 	add.w	r3, r7, #16
 800a728:	2100      	movs	r1, #0
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fe f88e 	bl	800884c <create_chain>
 800a730:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	895b      	ldrh	r3, [r3, #10]
 800a736:	025b      	lsls	r3, r3, #9
 800a738:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800a740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a742:	2b00      	cmp	r3, #0
 800a744:	d102      	bne.n	800a74c <f_mkdir+0x7e>
 800a746:	2307      	movs	r3, #7
 800a748:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800a74c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d102      	bne.n	800a758 <f_mkdir+0x8a>
 800a752:	2302      	movs	r3, #2
 800a754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75e:	d102      	bne.n	800a766 <f_mkdir+0x98>
 800a760:	2301      	movs	r3, #1
 800a762:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800a766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d106      	bne.n	800a77c <f_mkdir+0xae>
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	4618      	mov	r0, r3
 800a772:	f7fd fd73 	bl	800825c <sync_window>
 800a776:	4603      	mov	r3, r0
 800a778:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800a77c:	f7fc fd32 	bl	80071e4 <get_fattime>
 800a780:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800a782:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a786:	2b00      	cmp	r3, #0
 800a788:	d16a      	bne.n	800a860 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fd fe44 	bl	800841c <clust2sect>
 800a794:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3334      	adds	r3, #52	; 0x34
 800a79a:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800a79c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a7a4:	f7fd fb91 	bl	8007eca <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800a7a8:	220b      	movs	r2, #11
 800a7aa:	2120      	movs	r1, #32
 800a7ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a7ae:	f7fd fb8c 	bl	8007eca <mem_set>
					dir[DIR_Name] = '.';
 800a7b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7b4:	222e      	movs	r2, #46	; 0x2e
 800a7b6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800a7b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7ba:	330b      	adds	r3, #11
 800a7bc:	2210      	movs	r2, #16
 800a7be:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800a7c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c2:	3316      	adds	r3, #22
 800a7c4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fd fb32 	bl	8007e30 <st_dword>
					st_clust(fs, dir, dcl);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7fe faac 	bl	8008d30 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800a7d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7da:	3320      	adds	r3, #32
 800a7dc:	2220      	movs	r2, #32
 800a7de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fd fb51 	bl	8007e88 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800a7e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7e8:	3321      	adds	r3, #33	; 0x21
 800a7ea:	222e      	movs	r2, #46	; 0x2e
 800a7ec:	701a      	strb	r2, [r3, #0]
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d106      	bne.n	800a808 <f_mkdir+0x13a>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a800:	429a      	cmp	r2, r3
 800a802:	d101      	bne.n	800a808 <f_mkdir+0x13a>
 800a804:	2300      	movs	r3, #0
 800a806:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a80c:	3320      	adds	r3, #32
 800a80e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a810:	4619      	mov	r1, r3
 800a812:	f7fe fa8d 	bl	8008d30 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	895b      	ldrh	r3, [r3, #10]
 800a81a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a81c:	e01b      	b.n	800a856 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800a81e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a820:	1c5a      	adds	r2, r3, #1
 800a822:	657a      	str	r2, [r7, #84]	; 0x54
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2201      	movs	r2, #1
 800a82c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	4618      	mov	r0, r3
 800a832:	f7fd fd13 	bl	800825c <sync_window>
 800a836:	4603      	mov	r3, r0
 800a838:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800a83c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10c      	bne.n	800a85e <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800a844:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a848:	2100      	movs	r1, #0
 800a84a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a84c:	f7fd fb3d 	bl	8007eca <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800a850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a852:	3b01      	subs	r3, #1
 800a854:	65bb      	str	r3, [r7, #88]	; 0x58
 800a856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1e0      	bne.n	800a81e <f_mkdir+0x150>
 800a85c:	e000      	b.n	800a860 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800a85e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800a860:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a864:	2b00      	cmp	r3, #0
 800a866:	d107      	bne.n	800a878 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800a868:	f107 0310 	add.w	r3, r7, #16
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fe fcc9 	bl	8009204 <dir_register>
 800a872:	4603      	mov	r3, r0
 800a874:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800a878:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d120      	bne.n	800a8c2 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800a880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a882:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800a884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a886:	3316      	adds	r3, #22
 800a888:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fd fad0 	bl	8007e30 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a894:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a896:	4618      	mov	r0, r3
 800a898:	f7fe fa4a 	bl	8008d30 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800a89c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a89e:	330b      	adds	r3, #11
 800a8a0:	2210      	movs	r2, #16
 800a8a2:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800a8aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10e      	bne.n	800a8d0 <f_mkdir+0x202>
					res = sync_fs(fs);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fd fd43 	bl	8008340 <sync_fs>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a8c0:	e006      	b.n	800a8d0 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800a8c2:	f107 0310 	add.w	r3, r7, #16
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fd ff59 	bl	8008782 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a8d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3760      	adds	r7, #96	; 0x60
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a8f2:	4b1f      	ldr	r3, [pc, #124]	; (800a970 <FATFS_LinkDriverEx+0x94>)
 800a8f4:	7a5b      	ldrb	r3, [r3, #9]
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d131      	bne.n	800a960 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a8fc:	4b1c      	ldr	r3, [pc, #112]	; (800a970 <FATFS_LinkDriverEx+0x94>)
 800a8fe:	7a5b      	ldrb	r3, [r3, #9]
 800a900:	b2db      	uxtb	r3, r3
 800a902:	461a      	mov	r2, r3
 800a904:	4b1a      	ldr	r3, [pc, #104]	; (800a970 <FATFS_LinkDriverEx+0x94>)
 800a906:	2100      	movs	r1, #0
 800a908:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a90a:	4b19      	ldr	r3, [pc, #100]	; (800a970 <FATFS_LinkDriverEx+0x94>)
 800a90c:	7a5b      	ldrb	r3, [r3, #9]
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	4a17      	ldr	r2, [pc, #92]	; (800a970 <FATFS_LinkDriverEx+0x94>)
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a91a:	4b15      	ldr	r3, [pc, #84]	; (800a970 <FATFS_LinkDriverEx+0x94>)
 800a91c:	7a5b      	ldrb	r3, [r3, #9]
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	461a      	mov	r2, r3
 800a922:	4b13      	ldr	r3, [pc, #76]	; (800a970 <FATFS_LinkDriverEx+0x94>)
 800a924:	4413      	add	r3, r2
 800a926:	79fa      	ldrb	r2, [r7, #7]
 800a928:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a92a:	4b11      	ldr	r3, [pc, #68]	; (800a970 <FATFS_LinkDriverEx+0x94>)
 800a92c:	7a5b      	ldrb	r3, [r3, #9]
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	b2d1      	uxtb	r1, r2
 800a934:	4a0e      	ldr	r2, [pc, #56]	; (800a970 <FATFS_LinkDriverEx+0x94>)
 800a936:	7251      	strb	r1, [r2, #9]
 800a938:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a93a:	7dbb      	ldrb	r3, [r7, #22]
 800a93c:	3330      	adds	r3, #48	; 0x30
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	3301      	adds	r3, #1
 800a948:	223a      	movs	r2, #58	; 0x3a
 800a94a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	3302      	adds	r3, #2
 800a950:	222f      	movs	r2, #47	; 0x2f
 800a952:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	3303      	adds	r3, #3
 800a958:	2200      	movs	r2, #0
 800a95a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a960:	7dfb      	ldrb	r3, [r7, #23]
}
 800a962:	4618      	mov	r0, r3
 800a964:	371c      	adds	r7, #28
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	20000118 	.word	0x20000118

0800a974 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a97e:	2200      	movs	r2, #0
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f7ff ffaa 	bl	800a8dc <FATFS_LinkDriverEx>
 800a988:	4603      	mov	r3, r0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	4603      	mov	r3, r0
 800a99c:	6039      	str	r1, [r7, #0]
 800a99e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a9a0:	88fb      	ldrh	r3, [r7, #6]
 800a9a2:	2b7f      	cmp	r3, #127	; 0x7f
 800a9a4:	d802      	bhi.n	800a9ac <ff_convert+0x18>
		c = chr;
 800a9a6:	88fb      	ldrh	r3, [r7, #6]
 800a9a8:	81fb      	strh	r3, [r7, #14]
 800a9aa:	e025      	b.n	800a9f8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00b      	beq.n	800a9ca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a9b2:	88fb      	ldrh	r3, [r7, #6]
 800a9b4:	2bff      	cmp	r3, #255	; 0xff
 800a9b6:	d805      	bhi.n	800a9c4 <ff_convert+0x30>
 800a9b8:	88fb      	ldrh	r3, [r7, #6]
 800a9ba:	3b80      	subs	r3, #128	; 0x80
 800a9bc:	4a12      	ldr	r2, [pc, #72]	; (800aa08 <ff_convert+0x74>)
 800a9be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9c2:	e000      	b.n	800a9c6 <ff_convert+0x32>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	81fb      	strh	r3, [r7, #14]
 800a9c8:	e016      	b.n	800a9f8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	81fb      	strh	r3, [r7, #14]
 800a9ce:	e009      	b.n	800a9e4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a9d0:	89fb      	ldrh	r3, [r7, #14]
 800a9d2:	4a0d      	ldr	r2, [pc, #52]	; (800aa08 <ff_convert+0x74>)
 800a9d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9d8:	88fa      	ldrh	r2, [r7, #6]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d006      	beq.n	800a9ec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a9de:	89fb      	ldrh	r3, [r7, #14]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	81fb      	strh	r3, [r7, #14]
 800a9e4:	89fb      	ldrh	r3, [r7, #14]
 800a9e6:	2b7f      	cmp	r3, #127	; 0x7f
 800a9e8:	d9f2      	bls.n	800a9d0 <ff_convert+0x3c>
 800a9ea:	e000      	b.n	800a9ee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a9ec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a9ee:	89fb      	ldrh	r3, [r7, #14]
 800a9f0:	3380      	adds	r3, #128	; 0x80
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a9f8:	89fb      	ldrh	r3, [r7, #14]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3714      	adds	r7, #20
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	0800b5f0 	.word	0x0800b5f0

0800aa0c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	4603      	mov	r3, r0
 800aa14:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800aa16:	88fb      	ldrh	r3, [r7, #6]
 800aa18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa1c:	d201      	bcs.n	800aa22 <ff_wtoupper+0x16>
 800aa1e:	4b3e      	ldr	r3, [pc, #248]	; (800ab18 <ff_wtoupper+0x10c>)
 800aa20:	e000      	b.n	800aa24 <ff_wtoupper+0x18>
 800aa22:	4b3e      	ldr	r3, [pc, #248]	; (800ab1c <ff_wtoupper+0x110>)
 800aa24:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	1c9a      	adds	r2, r3, #2
 800aa2a:	617a      	str	r2, [r7, #20]
 800aa2c:	881b      	ldrh	r3, [r3, #0]
 800aa2e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800aa30:	8a7b      	ldrh	r3, [r7, #18]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d068      	beq.n	800ab08 <ff_wtoupper+0xfc>
 800aa36:	88fa      	ldrh	r2, [r7, #6]
 800aa38:	8a7b      	ldrh	r3, [r7, #18]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d364      	bcc.n	800ab08 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	1c9a      	adds	r2, r3, #2
 800aa42:	617a      	str	r2, [r7, #20]
 800aa44:	881b      	ldrh	r3, [r3, #0]
 800aa46:	823b      	strh	r3, [r7, #16]
 800aa48:	8a3b      	ldrh	r3, [r7, #16]
 800aa4a:	0a1b      	lsrs	r3, r3, #8
 800aa4c:	81fb      	strh	r3, [r7, #14]
 800aa4e:	8a3b      	ldrh	r3, [r7, #16]
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800aa54:	88fa      	ldrh	r2, [r7, #6]
 800aa56:	8a79      	ldrh	r1, [r7, #18]
 800aa58:	8a3b      	ldrh	r3, [r7, #16]
 800aa5a:	440b      	add	r3, r1
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	da49      	bge.n	800aaf4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800aa60:	89fb      	ldrh	r3, [r7, #14]
 800aa62:	2b08      	cmp	r3, #8
 800aa64:	d84f      	bhi.n	800ab06 <ff_wtoupper+0xfa>
 800aa66:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <ff_wtoupper+0x60>)
 800aa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6c:	0800aa91 	.word	0x0800aa91
 800aa70:	0800aaa3 	.word	0x0800aaa3
 800aa74:	0800aab9 	.word	0x0800aab9
 800aa78:	0800aac1 	.word	0x0800aac1
 800aa7c:	0800aac9 	.word	0x0800aac9
 800aa80:	0800aad1 	.word	0x0800aad1
 800aa84:	0800aad9 	.word	0x0800aad9
 800aa88:	0800aae1 	.word	0x0800aae1
 800aa8c:	0800aae9 	.word	0x0800aae9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800aa90:	88fa      	ldrh	r2, [r7, #6]
 800aa92:	8a7b      	ldrh	r3, [r7, #18]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	005b      	lsls	r3, r3, #1
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	80fb      	strh	r3, [r7, #6]
 800aaa0:	e027      	b.n	800aaf2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800aaa2:	88fa      	ldrh	r2, [r7, #6]
 800aaa4:	8a7b      	ldrh	r3, [r7, #18]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	f003 0301 	and.w	r3, r3, #1
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	88fa      	ldrh	r2, [r7, #6]
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	80fb      	strh	r3, [r7, #6]
 800aab6:	e01c      	b.n	800aaf2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800aab8:	88fb      	ldrh	r3, [r7, #6]
 800aaba:	3b10      	subs	r3, #16
 800aabc:	80fb      	strh	r3, [r7, #6]
 800aabe:	e018      	b.n	800aaf2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800aac0:	88fb      	ldrh	r3, [r7, #6]
 800aac2:	3b20      	subs	r3, #32
 800aac4:	80fb      	strh	r3, [r7, #6]
 800aac6:	e014      	b.n	800aaf2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800aac8:	88fb      	ldrh	r3, [r7, #6]
 800aaca:	3b30      	subs	r3, #48	; 0x30
 800aacc:	80fb      	strh	r3, [r7, #6]
 800aace:	e010      	b.n	800aaf2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800aad0:	88fb      	ldrh	r3, [r7, #6]
 800aad2:	3b1a      	subs	r3, #26
 800aad4:	80fb      	strh	r3, [r7, #6]
 800aad6:	e00c      	b.n	800aaf2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800aad8:	88fb      	ldrh	r3, [r7, #6]
 800aada:	3308      	adds	r3, #8
 800aadc:	80fb      	strh	r3, [r7, #6]
 800aade:	e008      	b.n	800aaf2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800aae0:	88fb      	ldrh	r3, [r7, #6]
 800aae2:	3b50      	subs	r3, #80	; 0x50
 800aae4:	80fb      	strh	r3, [r7, #6]
 800aae6:	e004      	b.n	800aaf2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800aae8:	88fb      	ldrh	r3, [r7, #6]
 800aaea:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800aaee:	80fb      	strh	r3, [r7, #6]
 800aaf0:	bf00      	nop
			}
			break;
 800aaf2:	e008      	b.n	800ab06 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800aaf4:	89fb      	ldrh	r3, [r7, #14]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d195      	bne.n	800aa26 <ff_wtoupper+0x1a>
 800aafa:	8a3b      	ldrh	r3, [r7, #16]
 800aafc:	005b      	lsls	r3, r3, #1
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	4413      	add	r3, r2
 800ab02:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ab04:	e78f      	b.n	800aa26 <ff_wtoupper+0x1a>
			break;
 800ab06:	bf00      	nop
	}

	return chr;
 800ab08:	88fb      	ldrh	r3, [r7, #6]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	371c      	adds	r7, #28
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	0800b6f0 	.word	0x0800b6f0
 800ab1c:	0800b8e4 	.word	0x0800b8e4

0800ab20 <__errno>:
 800ab20:	4b01      	ldr	r3, [pc, #4]	; (800ab28 <__errno+0x8>)
 800ab22:	6818      	ldr	r0, [r3, #0]
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	2000003c 	.word	0x2000003c

0800ab2c <__libc_init_array>:
 800ab2c:	b570      	push	{r4, r5, r6, lr}
 800ab2e:	4d0d      	ldr	r5, [pc, #52]	; (800ab64 <__libc_init_array+0x38>)
 800ab30:	4c0d      	ldr	r4, [pc, #52]	; (800ab68 <__libc_init_array+0x3c>)
 800ab32:	1b64      	subs	r4, r4, r5
 800ab34:	10a4      	asrs	r4, r4, #2
 800ab36:	2600      	movs	r6, #0
 800ab38:	42a6      	cmp	r6, r4
 800ab3a:	d109      	bne.n	800ab50 <__libc_init_array+0x24>
 800ab3c:	4d0b      	ldr	r5, [pc, #44]	; (800ab6c <__libc_init_array+0x40>)
 800ab3e:	4c0c      	ldr	r4, [pc, #48]	; (800ab70 <__libc_init_array+0x44>)
 800ab40:	f000 fc4e 	bl	800b3e0 <_init>
 800ab44:	1b64      	subs	r4, r4, r5
 800ab46:	10a4      	asrs	r4, r4, #2
 800ab48:	2600      	movs	r6, #0
 800ab4a:	42a6      	cmp	r6, r4
 800ab4c:	d105      	bne.n	800ab5a <__libc_init_array+0x2e>
 800ab4e:	bd70      	pop	{r4, r5, r6, pc}
 800ab50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab54:	4798      	blx	r3
 800ab56:	3601      	adds	r6, #1
 800ab58:	e7ee      	b.n	800ab38 <__libc_init_array+0xc>
 800ab5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab5e:	4798      	blx	r3
 800ab60:	3601      	adds	r6, #1
 800ab62:	e7f2      	b.n	800ab4a <__libc_init_array+0x1e>
 800ab64:	0800b9dc 	.word	0x0800b9dc
 800ab68:	0800b9dc 	.word	0x0800b9dc
 800ab6c:	0800b9dc 	.word	0x0800b9dc
 800ab70:	0800b9e0 	.word	0x0800b9e0

0800ab74 <memset>:
 800ab74:	4402      	add	r2, r0
 800ab76:	4603      	mov	r3, r0
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d100      	bne.n	800ab7e <memset+0xa>
 800ab7c:	4770      	bx	lr
 800ab7e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab82:	e7f9      	b.n	800ab78 <memset+0x4>

0800ab84 <siprintf>:
 800ab84:	b40e      	push	{r1, r2, r3}
 800ab86:	b500      	push	{lr}
 800ab88:	b09c      	sub	sp, #112	; 0x70
 800ab8a:	ab1d      	add	r3, sp, #116	; 0x74
 800ab8c:	9002      	str	r0, [sp, #8]
 800ab8e:	9006      	str	r0, [sp, #24]
 800ab90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab94:	4809      	ldr	r0, [pc, #36]	; (800abbc <siprintf+0x38>)
 800ab96:	9107      	str	r1, [sp, #28]
 800ab98:	9104      	str	r1, [sp, #16]
 800ab9a:	4909      	ldr	r1, [pc, #36]	; (800abc0 <siprintf+0x3c>)
 800ab9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aba0:	9105      	str	r1, [sp, #20]
 800aba2:	6800      	ldr	r0, [r0, #0]
 800aba4:	9301      	str	r3, [sp, #4]
 800aba6:	a902      	add	r1, sp, #8
 800aba8:	f000 f868 	bl	800ac7c <_svfiprintf_r>
 800abac:	9b02      	ldr	r3, [sp, #8]
 800abae:	2200      	movs	r2, #0
 800abb0:	701a      	strb	r2, [r3, #0]
 800abb2:	b01c      	add	sp, #112	; 0x70
 800abb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800abb8:	b003      	add	sp, #12
 800abba:	4770      	bx	lr
 800abbc:	2000003c 	.word	0x2000003c
 800abc0:	ffff0208 	.word	0xffff0208

0800abc4 <__ssputs_r>:
 800abc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc8:	688e      	ldr	r6, [r1, #8]
 800abca:	429e      	cmp	r6, r3
 800abcc:	4682      	mov	sl, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	4690      	mov	r8, r2
 800abd2:	461f      	mov	r7, r3
 800abd4:	d838      	bhi.n	800ac48 <__ssputs_r+0x84>
 800abd6:	898a      	ldrh	r2, [r1, #12]
 800abd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800abdc:	d032      	beq.n	800ac44 <__ssputs_r+0x80>
 800abde:	6825      	ldr	r5, [r4, #0]
 800abe0:	6909      	ldr	r1, [r1, #16]
 800abe2:	eba5 0901 	sub.w	r9, r5, r1
 800abe6:	6965      	ldr	r5, [r4, #20]
 800abe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abf0:	3301      	adds	r3, #1
 800abf2:	444b      	add	r3, r9
 800abf4:	106d      	asrs	r5, r5, #1
 800abf6:	429d      	cmp	r5, r3
 800abf8:	bf38      	it	cc
 800abfa:	461d      	movcc	r5, r3
 800abfc:	0553      	lsls	r3, r2, #21
 800abfe:	d531      	bpl.n	800ac64 <__ssputs_r+0xa0>
 800ac00:	4629      	mov	r1, r5
 800ac02:	f000 fb47 	bl	800b294 <_malloc_r>
 800ac06:	4606      	mov	r6, r0
 800ac08:	b950      	cbnz	r0, 800ac20 <__ssputs_r+0x5c>
 800ac0a:	230c      	movs	r3, #12
 800ac0c:	f8ca 3000 	str.w	r3, [sl]
 800ac10:	89a3      	ldrh	r3, [r4, #12]
 800ac12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac16:	81a3      	strh	r3, [r4, #12]
 800ac18:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac20:	6921      	ldr	r1, [r4, #16]
 800ac22:	464a      	mov	r2, r9
 800ac24:	f000 fabe 	bl	800b1a4 <memcpy>
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac32:	81a3      	strh	r3, [r4, #12]
 800ac34:	6126      	str	r6, [r4, #16]
 800ac36:	6165      	str	r5, [r4, #20]
 800ac38:	444e      	add	r6, r9
 800ac3a:	eba5 0509 	sub.w	r5, r5, r9
 800ac3e:	6026      	str	r6, [r4, #0]
 800ac40:	60a5      	str	r5, [r4, #8]
 800ac42:	463e      	mov	r6, r7
 800ac44:	42be      	cmp	r6, r7
 800ac46:	d900      	bls.n	800ac4a <__ssputs_r+0x86>
 800ac48:	463e      	mov	r6, r7
 800ac4a:	4632      	mov	r2, r6
 800ac4c:	6820      	ldr	r0, [r4, #0]
 800ac4e:	4641      	mov	r1, r8
 800ac50:	f000 fab6 	bl	800b1c0 <memmove>
 800ac54:	68a3      	ldr	r3, [r4, #8]
 800ac56:	6822      	ldr	r2, [r4, #0]
 800ac58:	1b9b      	subs	r3, r3, r6
 800ac5a:	4432      	add	r2, r6
 800ac5c:	60a3      	str	r3, [r4, #8]
 800ac5e:	6022      	str	r2, [r4, #0]
 800ac60:	2000      	movs	r0, #0
 800ac62:	e7db      	b.n	800ac1c <__ssputs_r+0x58>
 800ac64:	462a      	mov	r2, r5
 800ac66:	f000 fb6f 	bl	800b348 <_realloc_r>
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d1e1      	bne.n	800ac34 <__ssputs_r+0x70>
 800ac70:	6921      	ldr	r1, [r4, #16]
 800ac72:	4650      	mov	r0, sl
 800ac74:	f000 fabe 	bl	800b1f4 <_free_r>
 800ac78:	e7c7      	b.n	800ac0a <__ssputs_r+0x46>
	...

0800ac7c <_svfiprintf_r>:
 800ac7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac80:	4698      	mov	r8, r3
 800ac82:	898b      	ldrh	r3, [r1, #12]
 800ac84:	061b      	lsls	r3, r3, #24
 800ac86:	b09d      	sub	sp, #116	; 0x74
 800ac88:	4607      	mov	r7, r0
 800ac8a:	460d      	mov	r5, r1
 800ac8c:	4614      	mov	r4, r2
 800ac8e:	d50e      	bpl.n	800acae <_svfiprintf_r+0x32>
 800ac90:	690b      	ldr	r3, [r1, #16]
 800ac92:	b963      	cbnz	r3, 800acae <_svfiprintf_r+0x32>
 800ac94:	2140      	movs	r1, #64	; 0x40
 800ac96:	f000 fafd 	bl	800b294 <_malloc_r>
 800ac9a:	6028      	str	r0, [r5, #0]
 800ac9c:	6128      	str	r0, [r5, #16]
 800ac9e:	b920      	cbnz	r0, 800acaa <_svfiprintf_r+0x2e>
 800aca0:	230c      	movs	r3, #12
 800aca2:	603b      	str	r3, [r7, #0]
 800aca4:	f04f 30ff 	mov.w	r0, #4294967295
 800aca8:	e0d1      	b.n	800ae4e <_svfiprintf_r+0x1d2>
 800acaa:	2340      	movs	r3, #64	; 0x40
 800acac:	616b      	str	r3, [r5, #20]
 800acae:	2300      	movs	r3, #0
 800acb0:	9309      	str	r3, [sp, #36]	; 0x24
 800acb2:	2320      	movs	r3, #32
 800acb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800acbc:	2330      	movs	r3, #48	; 0x30
 800acbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae68 <_svfiprintf_r+0x1ec>
 800acc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acc6:	f04f 0901 	mov.w	r9, #1
 800acca:	4623      	mov	r3, r4
 800accc:	469a      	mov	sl, r3
 800acce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acd2:	b10a      	cbz	r2, 800acd8 <_svfiprintf_r+0x5c>
 800acd4:	2a25      	cmp	r2, #37	; 0x25
 800acd6:	d1f9      	bne.n	800accc <_svfiprintf_r+0x50>
 800acd8:	ebba 0b04 	subs.w	fp, sl, r4
 800acdc:	d00b      	beq.n	800acf6 <_svfiprintf_r+0x7a>
 800acde:	465b      	mov	r3, fp
 800ace0:	4622      	mov	r2, r4
 800ace2:	4629      	mov	r1, r5
 800ace4:	4638      	mov	r0, r7
 800ace6:	f7ff ff6d 	bl	800abc4 <__ssputs_r>
 800acea:	3001      	adds	r0, #1
 800acec:	f000 80aa 	beq.w	800ae44 <_svfiprintf_r+0x1c8>
 800acf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acf2:	445a      	add	r2, fp
 800acf4:	9209      	str	r2, [sp, #36]	; 0x24
 800acf6:	f89a 3000 	ldrb.w	r3, [sl]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	f000 80a2 	beq.w	800ae44 <_svfiprintf_r+0x1c8>
 800ad00:	2300      	movs	r3, #0
 800ad02:	f04f 32ff 	mov.w	r2, #4294967295
 800ad06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad0a:	f10a 0a01 	add.w	sl, sl, #1
 800ad0e:	9304      	str	r3, [sp, #16]
 800ad10:	9307      	str	r3, [sp, #28]
 800ad12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad16:	931a      	str	r3, [sp, #104]	; 0x68
 800ad18:	4654      	mov	r4, sl
 800ad1a:	2205      	movs	r2, #5
 800ad1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad20:	4851      	ldr	r0, [pc, #324]	; (800ae68 <_svfiprintf_r+0x1ec>)
 800ad22:	f7f5 fa65 	bl	80001f0 <memchr>
 800ad26:	9a04      	ldr	r2, [sp, #16]
 800ad28:	b9d8      	cbnz	r0, 800ad62 <_svfiprintf_r+0xe6>
 800ad2a:	06d0      	lsls	r0, r2, #27
 800ad2c:	bf44      	itt	mi
 800ad2e:	2320      	movmi	r3, #32
 800ad30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad34:	0711      	lsls	r1, r2, #28
 800ad36:	bf44      	itt	mi
 800ad38:	232b      	movmi	r3, #43	; 0x2b
 800ad3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad42:	2b2a      	cmp	r3, #42	; 0x2a
 800ad44:	d015      	beq.n	800ad72 <_svfiprintf_r+0xf6>
 800ad46:	9a07      	ldr	r2, [sp, #28]
 800ad48:	4654      	mov	r4, sl
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	f04f 0c0a 	mov.w	ip, #10
 800ad50:	4621      	mov	r1, r4
 800ad52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad56:	3b30      	subs	r3, #48	; 0x30
 800ad58:	2b09      	cmp	r3, #9
 800ad5a:	d94e      	bls.n	800adfa <_svfiprintf_r+0x17e>
 800ad5c:	b1b0      	cbz	r0, 800ad8c <_svfiprintf_r+0x110>
 800ad5e:	9207      	str	r2, [sp, #28]
 800ad60:	e014      	b.n	800ad8c <_svfiprintf_r+0x110>
 800ad62:	eba0 0308 	sub.w	r3, r0, r8
 800ad66:	fa09 f303 	lsl.w	r3, r9, r3
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	9304      	str	r3, [sp, #16]
 800ad6e:	46a2      	mov	sl, r4
 800ad70:	e7d2      	b.n	800ad18 <_svfiprintf_r+0x9c>
 800ad72:	9b03      	ldr	r3, [sp, #12]
 800ad74:	1d19      	adds	r1, r3, #4
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	9103      	str	r1, [sp, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	bfbb      	ittet	lt
 800ad7e:	425b      	neglt	r3, r3
 800ad80:	f042 0202 	orrlt.w	r2, r2, #2
 800ad84:	9307      	strge	r3, [sp, #28]
 800ad86:	9307      	strlt	r3, [sp, #28]
 800ad88:	bfb8      	it	lt
 800ad8a:	9204      	strlt	r2, [sp, #16]
 800ad8c:	7823      	ldrb	r3, [r4, #0]
 800ad8e:	2b2e      	cmp	r3, #46	; 0x2e
 800ad90:	d10c      	bne.n	800adac <_svfiprintf_r+0x130>
 800ad92:	7863      	ldrb	r3, [r4, #1]
 800ad94:	2b2a      	cmp	r3, #42	; 0x2a
 800ad96:	d135      	bne.n	800ae04 <_svfiprintf_r+0x188>
 800ad98:	9b03      	ldr	r3, [sp, #12]
 800ad9a:	1d1a      	adds	r2, r3, #4
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	9203      	str	r2, [sp, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	bfb8      	it	lt
 800ada4:	f04f 33ff 	movlt.w	r3, #4294967295
 800ada8:	3402      	adds	r4, #2
 800adaa:	9305      	str	r3, [sp, #20]
 800adac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae78 <_svfiprintf_r+0x1fc>
 800adb0:	7821      	ldrb	r1, [r4, #0]
 800adb2:	2203      	movs	r2, #3
 800adb4:	4650      	mov	r0, sl
 800adb6:	f7f5 fa1b 	bl	80001f0 <memchr>
 800adba:	b140      	cbz	r0, 800adce <_svfiprintf_r+0x152>
 800adbc:	2340      	movs	r3, #64	; 0x40
 800adbe:	eba0 000a 	sub.w	r0, r0, sl
 800adc2:	fa03 f000 	lsl.w	r0, r3, r0
 800adc6:	9b04      	ldr	r3, [sp, #16]
 800adc8:	4303      	orrs	r3, r0
 800adca:	3401      	adds	r4, #1
 800adcc:	9304      	str	r3, [sp, #16]
 800adce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800add2:	4826      	ldr	r0, [pc, #152]	; (800ae6c <_svfiprintf_r+0x1f0>)
 800add4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800add8:	2206      	movs	r2, #6
 800adda:	f7f5 fa09 	bl	80001f0 <memchr>
 800adde:	2800      	cmp	r0, #0
 800ade0:	d038      	beq.n	800ae54 <_svfiprintf_r+0x1d8>
 800ade2:	4b23      	ldr	r3, [pc, #140]	; (800ae70 <_svfiprintf_r+0x1f4>)
 800ade4:	bb1b      	cbnz	r3, 800ae2e <_svfiprintf_r+0x1b2>
 800ade6:	9b03      	ldr	r3, [sp, #12]
 800ade8:	3307      	adds	r3, #7
 800adea:	f023 0307 	bic.w	r3, r3, #7
 800adee:	3308      	adds	r3, #8
 800adf0:	9303      	str	r3, [sp, #12]
 800adf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf4:	4433      	add	r3, r6
 800adf6:	9309      	str	r3, [sp, #36]	; 0x24
 800adf8:	e767      	b.n	800acca <_svfiprintf_r+0x4e>
 800adfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800adfe:	460c      	mov	r4, r1
 800ae00:	2001      	movs	r0, #1
 800ae02:	e7a5      	b.n	800ad50 <_svfiprintf_r+0xd4>
 800ae04:	2300      	movs	r3, #0
 800ae06:	3401      	adds	r4, #1
 800ae08:	9305      	str	r3, [sp, #20]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	f04f 0c0a 	mov.w	ip, #10
 800ae10:	4620      	mov	r0, r4
 800ae12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae16:	3a30      	subs	r2, #48	; 0x30
 800ae18:	2a09      	cmp	r2, #9
 800ae1a:	d903      	bls.n	800ae24 <_svfiprintf_r+0x1a8>
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d0c5      	beq.n	800adac <_svfiprintf_r+0x130>
 800ae20:	9105      	str	r1, [sp, #20]
 800ae22:	e7c3      	b.n	800adac <_svfiprintf_r+0x130>
 800ae24:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae28:	4604      	mov	r4, r0
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e7f0      	b.n	800ae10 <_svfiprintf_r+0x194>
 800ae2e:	ab03      	add	r3, sp, #12
 800ae30:	9300      	str	r3, [sp, #0]
 800ae32:	462a      	mov	r2, r5
 800ae34:	4b0f      	ldr	r3, [pc, #60]	; (800ae74 <_svfiprintf_r+0x1f8>)
 800ae36:	a904      	add	r1, sp, #16
 800ae38:	4638      	mov	r0, r7
 800ae3a:	f3af 8000 	nop.w
 800ae3e:	1c42      	adds	r2, r0, #1
 800ae40:	4606      	mov	r6, r0
 800ae42:	d1d6      	bne.n	800adf2 <_svfiprintf_r+0x176>
 800ae44:	89ab      	ldrh	r3, [r5, #12]
 800ae46:	065b      	lsls	r3, r3, #25
 800ae48:	f53f af2c 	bmi.w	800aca4 <_svfiprintf_r+0x28>
 800ae4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae4e:	b01d      	add	sp, #116	; 0x74
 800ae50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae54:	ab03      	add	r3, sp, #12
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	462a      	mov	r2, r5
 800ae5a:	4b06      	ldr	r3, [pc, #24]	; (800ae74 <_svfiprintf_r+0x1f8>)
 800ae5c:	a904      	add	r1, sp, #16
 800ae5e:	4638      	mov	r0, r7
 800ae60:	f000 f87a 	bl	800af58 <_printf_i>
 800ae64:	e7eb      	b.n	800ae3e <_svfiprintf_r+0x1c2>
 800ae66:	bf00      	nop
 800ae68:	0800b9a0 	.word	0x0800b9a0
 800ae6c:	0800b9aa 	.word	0x0800b9aa
 800ae70:	00000000 	.word	0x00000000
 800ae74:	0800abc5 	.word	0x0800abc5
 800ae78:	0800b9a6 	.word	0x0800b9a6

0800ae7c <_printf_common>:
 800ae7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae80:	4616      	mov	r6, r2
 800ae82:	4699      	mov	r9, r3
 800ae84:	688a      	ldr	r2, [r1, #8]
 800ae86:	690b      	ldr	r3, [r1, #16]
 800ae88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	bfb8      	it	lt
 800ae90:	4613      	movlt	r3, r2
 800ae92:	6033      	str	r3, [r6, #0]
 800ae94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae98:	4607      	mov	r7, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	b10a      	cbz	r2, 800aea2 <_printf_common+0x26>
 800ae9e:	3301      	adds	r3, #1
 800aea0:	6033      	str	r3, [r6, #0]
 800aea2:	6823      	ldr	r3, [r4, #0]
 800aea4:	0699      	lsls	r1, r3, #26
 800aea6:	bf42      	ittt	mi
 800aea8:	6833      	ldrmi	r3, [r6, #0]
 800aeaa:	3302      	addmi	r3, #2
 800aeac:	6033      	strmi	r3, [r6, #0]
 800aeae:	6825      	ldr	r5, [r4, #0]
 800aeb0:	f015 0506 	ands.w	r5, r5, #6
 800aeb4:	d106      	bne.n	800aec4 <_printf_common+0x48>
 800aeb6:	f104 0a19 	add.w	sl, r4, #25
 800aeba:	68e3      	ldr	r3, [r4, #12]
 800aebc:	6832      	ldr	r2, [r6, #0]
 800aebe:	1a9b      	subs	r3, r3, r2
 800aec0:	42ab      	cmp	r3, r5
 800aec2:	dc26      	bgt.n	800af12 <_printf_common+0x96>
 800aec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aec8:	1e13      	subs	r3, r2, #0
 800aeca:	6822      	ldr	r2, [r4, #0]
 800aecc:	bf18      	it	ne
 800aece:	2301      	movne	r3, #1
 800aed0:	0692      	lsls	r2, r2, #26
 800aed2:	d42b      	bmi.n	800af2c <_printf_common+0xb0>
 800aed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aed8:	4649      	mov	r1, r9
 800aeda:	4638      	mov	r0, r7
 800aedc:	47c0      	blx	r8
 800aede:	3001      	adds	r0, #1
 800aee0:	d01e      	beq.n	800af20 <_printf_common+0xa4>
 800aee2:	6823      	ldr	r3, [r4, #0]
 800aee4:	68e5      	ldr	r5, [r4, #12]
 800aee6:	6832      	ldr	r2, [r6, #0]
 800aee8:	f003 0306 	and.w	r3, r3, #6
 800aeec:	2b04      	cmp	r3, #4
 800aeee:	bf08      	it	eq
 800aef0:	1aad      	subeq	r5, r5, r2
 800aef2:	68a3      	ldr	r3, [r4, #8]
 800aef4:	6922      	ldr	r2, [r4, #16]
 800aef6:	bf0c      	ite	eq
 800aef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aefc:	2500      	movne	r5, #0
 800aefe:	4293      	cmp	r3, r2
 800af00:	bfc4      	itt	gt
 800af02:	1a9b      	subgt	r3, r3, r2
 800af04:	18ed      	addgt	r5, r5, r3
 800af06:	2600      	movs	r6, #0
 800af08:	341a      	adds	r4, #26
 800af0a:	42b5      	cmp	r5, r6
 800af0c:	d11a      	bne.n	800af44 <_printf_common+0xc8>
 800af0e:	2000      	movs	r0, #0
 800af10:	e008      	b.n	800af24 <_printf_common+0xa8>
 800af12:	2301      	movs	r3, #1
 800af14:	4652      	mov	r2, sl
 800af16:	4649      	mov	r1, r9
 800af18:	4638      	mov	r0, r7
 800af1a:	47c0      	blx	r8
 800af1c:	3001      	adds	r0, #1
 800af1e:	d103      	bne.n	800af28 <_printf_common+0xac>
 800af20:	f04f 30ff 	mov.w	r0, #4294967295
 800af24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af28:	3501      	adds	r5, #1
 800af2a:	e7c6      	b.n	800aeba <_printf_common+0x3e>
 800af2c:	18e1      	adds	r1, r4, r3
 800af2e:	1c5a      	adds	r2, r3, #1
 800af30:	2030      	movs	r0, #48	; 0x30
 800af32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af36:	4422      	add	r2, r4
 800af38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af40:	3302      	adds	r3, #2
 800af42:	e7c7      	b.n	800aed4 <_printf_common+0x58>
 800af44:	2301      	movs	r3, #1
 800af46:	4622      	mov	r2, r4
 800af48:	4649      	mov	r1, r9
 800af4a:	4638      	mov	r0, r7
 800af4c:	47c0      	blx	r8
 800af4e:	3001      	adds	r0, #1
 800af50:	d0e6      	beq.n	800af20 <_printf_common+0xa4>
 800af52:	3601      	adds	r6, #1
 800af54:	e7d9      	b.n	800af0a <_printf_common+0x8e>
	...

0800af58 <_printf_i>:
 800af58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af5c:	460c      	mov	r4, r1
 800af5e:	4691      	mov	r9, r2
 800af60:	7e27      	ldrb	r7, [r4, #24]
 800af62:	990c      	ldr	r1, [sp, #48]	; 0x30
 800af64:	2f78      	cmp	r7, #120	; 0x78
 800af66:	4680      	mov	r8, r0
 800af68:	469a      	mov	sl, r3
 800af6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af6e:	d807      	bhi.n	800af80 <_printf_i+0x28>
 800af70:	2f62      	cmp	r7, #98	; 0x62
 800af72:	d80a      	bhi.n	800af8a <_printf_i+0x32>
 800af74:	2f00      	cmp	r7, #0
 800af76:	f000 80d8 	beq.w	800b12a <_printf_i+0x1d2>
 800af7a:	2f58      	cmp	r7, #88	; 0x58
 800af7c:	f000 80a3 	beq.w	800b0c6 <_printf_i+0x16e>
 800af80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800af84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af88:	e03a      	b.n	800b000 <_printf_i+0xa8>
 800af8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af8e:	2b15      	cmp	r3, #21
 800af90:	d8f6      	bhi.n	800af80 <_printf_i+0x28>
 800af92:	a001      	add	r0, pc, #4	; (adr r0, 800af98 <_printf_i+0x40>)
 800af94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800af98:	0800aff1 	.word	0x0800aff1
 800af9c:	0800b005 	.word	0x0800b005
 800afa0:	0800af81 	.word	0x0800af81
 800afa4:	0800af81 	.word	0x0800af81
 800afa8:	0800af81 	.word	0x0800af81
 800afac:	0800af81 	.word	0x0800af81
 800afb0:	0800b005 	.word	0x0800b005
 800afb4:	0800af81 	.word	0x0800af81
 800afb8:	0800af81 	.word	0x0800af81
 800afbc:	0800af81 	.word	0x0800af81
 800afc0:	0800af81 	.word	0x0800af81
 800afc4:	0800b111 	.word	0x0800b111
 800afc8:	0800b035 	.word	0x0800b035
 800afcc:	0800b0f3 	.word	0x0800b0f3
 800afd0:	0800af81 	.word	0x0800af81
 800afd4:	0800af81 	.word	0x0800af81
 800afd8:	0800b133 	.word	0x0800b133
 800afdc:	0800af81 	.word	0x0800af81
 800afe0:	0800b035 	.word	0x0800b035
 800afe4:	0800af81 	.word	0x0800af81
 800afe8:	0800af81 	.word	0x0800af81
 800afec:	0800b0fb 	.word	0x0800b0fb
 800aff0:	680b      	ldr	r3, [r1, #0]
 800aff2:	1d1a      	adds	r2, r3, #4
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	600a      	str	r2, [r1, #0]
 800aff8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800affc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b000:	2301      	movs	r3, #1
 800b002:	e0a3      	b.n	800b14c <_printf_i+0x1f4>
 800b004:	6825      	ldr	r5, [r4, #0]
 800b006:	6808      	ldr	r0, [r1, #0]
 800b008:	062e      	lsls	r6, r5, #24
 800b00a:	f100 0304 	add.w	r3, r0, #4
 800b00e:	d50a      	bpl.n	800b026 <_printf_i+0xce>
 800b010:	6805      	ldr	r5, [r0, #0]
 800b012:	600b      	str	r3, [r1, #0]
 800b014:	2d00      	cmp	r5, #0
 800b016:	da03      	bge.n	800b020 <_printf_i+0xc8>
 800b018:	232d      	movs	r3, #45	; 0x2d
 800b01a:	426d      	negs	r5, r5
 800b01c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b020:	485e      	ldr	r0, [pc, #376]	; (800b19c <_printf_i+0x244>)
 800b022:	230a      	movs	r3, #10
 800b024:	e019      	b.n	800b05a <_printf_i+0x102>
 800b026:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b02a:	6805      	ldr	r5, [r0, #0]
 800b02c:	600b      	str	r3, [r1, #0]
 800b02e:	bf18      	it	ne
 800b030:	b22d      	sxthne	r5, r5
 800b032:	e7ef      	b.n	800b014 <_printf_i+0xbc>
 800b034:	680b      	ldr	r3, [r1, #0]
 800b036:	6825      	ldr	r5, [r4, #0]
 800b038:	1d18      	adds	r0, r3, #4
 800b03a:	6008      	str	r0, [r1, #0]
 800b03c:	0628      	lsls	r0, r5, #24
 800b03e:	d501      	bpl.n	800b044 <_printf_i+0xec>
 800b040:	681d      	ldr	r5, [r3, #0]
 800b042:	e002      	b.n	800b04a <_printf_i+0xf2>
 800b044:	0669      	lsls	r1, r5, #25
 800b046:	d5fb      	bpl.n	800b040 <_printf_i+0xe8>
 800b048:	881d      	ldrh	r5, [r3, #0]
 800b04a:	4854      	ldr	r0, [pc, #336]	; (800b19c <_printf_i+0x244>)
 800b04c:	2f6f      	cmp	r7, #111	; 0x6f
 800b04e:	bf0c      	ite	eq
 800b050:	2308      	moveq	r3, #8
 800b052:	230a      	movne	r3, #10
 800b054:	2100      	movs	r1, #0
 800b056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b05a:	6866      	ldr	r6, [r4, #4]
 800b05c:	60a6      	str	r6, [r4, #8]
 800b05e:	2e00      	cmp	r6, #0
 800b060:	bfa2      	ittt	ge
 800b062:	6821      	ldrge	r1, [r4, #0]
 800b064:	f021 0104 	bicge.w	r1, r1, #4
 800b068:	6021      	strge	r1, [r4, #0]
 800b06a:	b90d      	cbnz	r5, 800b070 <_printf_i+0x118>
 800b06c:	2e00      	cmp	r6, #0
 800b06e:	d04d      	beq.n	800b10c <_printf_i+0x1b4>
 800b070:	4616      	mov	r6, r2
 800b072:	fbb5 f1f3 	udiv	r1, r5, r3
 800b076:	fb03 5711 	mls	r7, r3, r1, r5
 800b07a:	5dc7      	ldrb	r7, [r0, r7]
 800b07c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b080:	462f      	mov	r7, r5
 800b082:	42bb      	cmp	r3, r7
 800b084:	460d      	mov	r5, r1
 800b086:	d9f4      	bls.n	800b072 <_printf_i+0x11a>
 800b088:	2b08      	cmp	r3, #8
 800b08a:	d10b      	bne.n	800b0a4 <_printf_i+0x14c>
 800b08c:	6823      	ldr	r3, [r4, #0]
 800b08e:	07df      	lsls	r7, r3, #31
 800b090:	d508      	bpl.n	800b0a4 <_printf_i+0x14c>
 800b092:	6923      	ldr	r3, [r4, #16]
 800b094:	6861      	ldr	r1, [r4, #4]
 800b096:	4299      	cmp	r1, r3
 800b098:	bfde      	ittt	le
 800b09a:	2330      	movle	r3, #48	; 0x30
 800b09c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b0a4:	1b92      	subs	r2, r2, r6
 800b0a6:	6122      	str	r2, [r4, #16]
 800b0a8:	f8cd a000 	str.w	sl, [sp]
 800b0ac:	464b      	mov	r3, r9
 800b0ae:	aa03      	add	r2, sp, #12
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	4640      	mov	r0, r8
 800b0b4:	f7ff fee2 	bl	800ae7c <_printf_common>
 800b0b8:	3001      	adds	r0, #1
 800b0ba:	d14c      	bne.n	800b156 <_printf_i+0x1fe>
 800b0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c0:	b004      	add	sp, #16
 800b0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0c6:	4835      	ldr	r0, [pc, #212]	; (800b19c <_printf_i+0x244>)
 800b0c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b0cc:	6823      	ldr	r3, [r4, #0]
 800b0ce:	680e      	ldr	r6, [r1, #0]
 800b0d0:	061f      	lsls	r7, r3, #24
 800b0d2:	f856 5b04 	ldr.w	r5, [r6], #4
 800b0d6:	600e      	str	r6, [r1, #0]
 800b0d8:	d514      	bpl.n	800b104 <_printf_i+0x1ac>
 800b0da:	07d9      	lsls	r1, r3, #31
 800b0dc:	bf44      	itt	mi
 800b0de:	f043 0320 	orrmi.w	r3, r3, #32
 800b0e2:	6023      	strmi	r3, [r4, #0]
 800b0e4:	b91d      	cbnz	r5, 800b0ee <_printf_i+0x196>
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	f023 0320 	bic.w	r3, r3, #32
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	2310      	movs	r3, #16
 800b0f0:	e7b0      	b.n	800b054 <_printf_i+0xfc>
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	f043 0320 	orr.w	r3, r3, #32
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	2378      	movs	r3, #120	; 0x78
 800b0fc:	4828      	ldr	r0, [pc, #160]	; (800b1a0 <_printf_i+0x248>)
 800b0fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b102:	e7e3      	b.n	800b0cc <_printf_i+0x174>
 800b104:	065e      	lsls	r6, r3, #25
 800b106:	bf48      	it	mi
 800b108:	b2ad      	uxthmi	r5, r5
 800b10a:	e7e6      	b.n	800b0da <_printf_i+0x182>
 800b10c:	4616      	mov	r6, r2
 800b10e:	e7bb      	b.n	800b088 <_printf_i+0x130>
 800b110:	680b      	ldr	r3, [r1, #0]
 800b112:	6826      	ldr	r6, [r4, #0]
 800b114:	6960      	ldr	r0, [r4, #20]
 800b116:	1d1d      	adds	r5, r3, #4
 800b118:	600d      	str	r5, [r1, #0]
 800b11a:	0635      	lsls	r5, r6, #24
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	d501      	bpl.n	800b124 <_printf_i+0x1cc>
 800b120:	6018      	str	r0, [r3, #0]
 800b122:	e002      	b.n	800b12a <_printf_i+0x1d2>
 800b124:	0671      	lsls	r1, r6, #25
 800b126:	d5fb      	bpl.n	800b120 <_printf_i+0x1c8>
 800b128:	8018      	strh	r0, [r3, #0]
 800b12a:	2300      	movs	r3, #0
 800b12c:	6123      	str	r3, [r4, #16]
 800b12e:	4616      	mov	r6, r2
 800b130:	e7ba      	b.n	800b0a8 <_printf_i+0x150>
 800b132:	680b      	ldr	r3, [r1, #0]
 800b134:	1d1a      	adds	r2, r3, #4
 800b136:	600a      	str	r2, [r1, #0]
 800b138:	681e      	ldr	r6, [r3, #0]
 800b13a:	6862      	ldr	r2, [r4, #4]
 800b13c:	2100      	movs	r1, #0
 800b13e:	4630      	mov	r0, r6
 800b140:	f7f5 f856 	bl	80001f0 <memchr>
 800b144:	b108      	cbz	r0, 800b14a <_printf_i+0x1f2>
 800b146:	1b80      	subs	r0, r0, r6
 800b148:	6060      	str	r0, [r4, #4]
 800b14a:	6863      	ldr	r3, [r4, #4]
 800b14c:	6123      	str	r3, [r4, #16]
 800b14e:	2300      	movs	r3, #0
 800b150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b154:	e7a8      	b.n	800b0a8 <_printf_i+0x150>
 800b156:	6923      	ldr	r3, [r4, #16]
 800b158:	4632      	mov	r2, r6
 800b15a:	4649      	mov	r1, r9
 800b15c:	4640      	mov	r0, r8
 800b15e:	47d0      	blx	sl
 800b160:	3001      	adds	r0, #1
 800b162:	d0ab      	beq.n	800b0bc <_printf_i+0x164>
 800b164:	6823      	ldr	r3, [r4, #0]
 800b166:	079b      	lsls	r3, r3, #30
 800b168:	d413      	bmi.n	800b192 <_printf_i+0x23a>
 800b16a:	68e0      	ldr	r0, [r4, #12]
 800b16c:	9b03      	ldr	r3, [sp, #12]
 800b16e:	4298      	cmp	r0, r3
 800b170:	bfb8      	it	lt
 800b172:	4618      	movlt	r0, r3
 800b174:	e7a4      	b.n	800b0c0 <_printf_i+0x168>
 800b176:	2301      	movs	r3, #1
 800b178:	4632      	mov	r2, r6
 800b17a:	4649      	mov	r1, r9
 800b17c:	4640      	mov	r0, r8
 800b17e:	47d0      	blx	sl
 800b180:	3001      	adds	r0, #1
 800b182:	d09b      	beq.n	800b0bc <_printf_i+0x164>
 800b184:	3501      	adds	r5, #1
 800b186:	68e3      	ldr	r3, [r4, #12]
 800b188:	9903      	ldr	r1, [sp, #12]
 800b18a:	1a5b      	subs	r3, r3, r1
 800b18c:	42ab      	cmp	r3, r5
 800b18e:	dcf2      	bgt.n	800b176 <_printf_i+0x21e>
 800b190:	e7eb      	b.n	800b16a <_printf_i+0x212>
 800b192:	2500      	movs	r5, #0
 800b194:	f104 0619 	add.w	r6, r4, #25
 800b198:	e7f5      	b.n	800b186 <_printf_i+0x22e>
 800b19a:	bf00      	nop
 800b19c:	0800b9b1 	.word	0x0800b9b1
 800b1a0:	0800b9c2 	.word	0x0800b9c2

0800b1a4 <memcpy>:
 800b1a4:	440a      	add	r2, r1
 800b1a6:	4291      	cmp	r1, r2
 800b1a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1ac:	d100      	bne.n	800b1b0 <memcpy+0xc>
 800b1ae:	4770      	bx	lr
 800b1b0:	b510      	push	{r4, lr}
 800b1b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1ba:	4291      	cmp	r1, r2
 800b1bc:	d1f9      	bne.n	800b1b2 <memcpy+0xe>
 800b1be:	bd10      	pop	{r4, pc}

0800b1c0 <memmove>:
 800b1c0:	4288      	cmp	r0, r1
 800b1c2:	b510      	push	{r4, lr}
 800b1c4:	eb01 0402 	add.w	r4, r1, r2
 800b1c8:	d902      	bls.n	800b1d0 <memmove+0x10>
 800b1ca:	4284      	cmp	r4, r0
 800b1cc:	4623      	mov	r3, r4
 800b1ce:	d807      	bhi.n	800b1e0 <memmove+0x20>
 800b1d0:	1e43      	subs	r3, r0, #1
 800b1d2:	42a1      	cmp	r1, r4
 800b1d4:	d008      	beq.n	800b1e8 <memmove+0x28>
 800b1d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1de:	e7f8      	b.n	800b1d2 <memmove+0x12>
 800b1e0:	4402      	add	r2, r0
 800b1e2:	4601      	mov	r1, r0
 800b1e4:	428a      	cmp	r2, r1
 800b1e6:	d100      	bne.n	800b1ea <memmove+0x2a>
 800b1e8:	bd10      	pop	{r4, pc}
 800b1ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1f2:	e7f7      	b.n	800b1e4 <memmove+0x24>

0800b1f4 <_free_r>:
 800b1f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1f6:	2900      	cmp	r1, #0
 800b1f8:	d048      	beq.n	800b28c <_free_r+0x98>
 800b1fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1fe:	9001      	str	r0, [sp, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	f1a1 0404 	sub.w	r4, r1, #4
 800b206:	bfb8      	it	lt
 800b208:	18e4      	addlt	r4, r4, r3
 800b20a:	f000 f8d3 	bl	800b3b4 <__malloc_lock>
 800b20e:	4a20      	ldr	r2, [pc, #128]	; (800b290 <_free_r+0x9c>)
 800b210:	9801      	ldr	r0, [sp, #4]
 800b212:	6813      	ldr	r3, [r2, #0]
 800b214:	4615      	mov	r5, r2
 800b216:	b933      	cbnz	r3, 800b226 <_free_r+0x32>
 800b218:	6063      	str	r3, [r4, #4]
 800b21a:	6014      	str	r4, [r2, #0]
 800b21c:	b003      	add	sp, #12
 800b21e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b222:	f000 b8cd 	b.w	800b3c0 <__malloc_unlock>
 800b226:	42a3      	cmp	r3, r4
 800b228:	d90b      	bls.n	800b242 <_free_r+0x4e>
 800b22a:	6821      	ldr	r1, [r4, #0]
 800b22c:	1862      	adds	r2, r4, r1
 800b22e:	4293      	cmp	r3, r2
 800b230:	bf04      	itt	eq
 800b232:	681a      	ldreq	r2, [r3, #0]
 800b234:	685b      	ldreq	r3, [r3, #4]
 800b236:	6063      	str	r3, [r4, #4]
 800b238:	bf04      	itt	eq
 800b23a:	1852      	addeq	r2, r2, r1
 800b23c:	6022      	streq	r2, [r4, #0]
 800b23e:	602c      	str	r4, [r5, #0]
 800b240:	e7ec      	b.n	800b21c <_free_r+0x28>
 800b242:	461a      	mov	r2, r3
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	b10b      	cbz	r3, 800b24c <_free_r+0x58>
 800b248:	42a3      	cmp	r3, r4
 800b24a:	d9fa      	bls.n	800b242 <_free_r+0x4e>
 800b24c:	6811      	ldr	r1, [r2, #0]
 800b24e:	1855      	adds	r5, r2, r1
 800b250:	42a5      	cmp	r5, r4
 800b252:	d10b      	bne.n	800b26c <_free_r+0x78>
 800b254:	6824      	ldr	r4, [r4, #0]
 800b256:	4421      	add	r1, r4
 800b258:	1854      	adds	r4, r2, r1
 800b25a:	42a3      	cmp	r3, r4
 800b25c:	6011      	str	r1, [r2, #0]
 800b25e:	d1dd      	bne.n	800b21c <_free_r+0x28>
 800b260:	681c      	ldr	r4, [r3, #0]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	6053      	str	r3, [r2, #4]
 800b266:	4421      	add	r1, r4
 800b268:	6011      	str	r1, [r2, #0]
 800b26a:	e7d7      	b.n	800b21c <_free_r+0x28>
 800b26c:	d902      	bls.n	800b274 <_free_r+0x80>
 800b26e:	230c      	movs	r3, #12
 800b270:	6003      	str	r3, [r0, #0]
 800b272:	e7d3      	b.n	800b21c <_free_r+0x28>
 800b274:	6825      	ldr	r5, [r4, #0]
 800b276:	1961      	adds	r1, r4, r5
 800b278:	428b      	cmp	r3, r1
 800b27a:	bf04      	itt	eq
 800b27c:	6819      	ldreq	r1, [r3, #0]
 800b27e:	685b      	ldreq	r3, [r3, #4]
 800b280:	6063      	str	r3, [r4, #4]
 800b282:	bf04      	itt	eq
 800b284:	1949      	addeq	r1, r1, r5
 800b286:	6021      	streq	r1, [r4, #0]
 800b288:	6054      	str	r4, [r2, #4]
 800b28a:	e7c7      	b.n	800b21c <_free_r+0x28>
 800b28c:	b003      	add	sp, #12
 800b28e:	bd30      	pop	{r4, r5, pc}
 800b290:	20000124 	.word	0x20000124

0800b294 <_malloc_r>:
 800b294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b296:	1ccd      	adds	r5, r1, #3
 800b298:	f025 0503 	bic.w	r5, r5, #3
 800b29c:	3508      	adds	r5, #8
 800b29e:	2d0c      	cmp	r5, #12
 800b2a0:	bf38      	it	cc
 800b2a2:	250c      	movcc	r5, #12
 800b2a4:	2d00      	cmp	r5, #0
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	db01      	blt.n	800b2ae <_malloc_r+0x1a>
 800b2aa:	42a9      	cmp	r1, r5
 800b2ac:	d903      	bls.n	800b2b6 <_malloc_r+0x22>
 800b2ae:	230c      	movs	r3, #12
 800b2b0:	6033      	str	r3, [r6, #0]
 800b2b2:	2000      	movs	r0, #0
 800b2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2b6:	f000 f87d 	bl	800b3b4 <__malloc_lock>
 800b2ba:	4921      	ldr	r1, [pc, #132]	; (800b340 <_malloc_r+0xac>)
 800b2bc:	680a      	ldr	r2, [r1, #0]
 800b2be:	4614      	mov	r4, r2
 800b2c0:	b99c      	cbnz	r4, 800b2ea <_malloc_r+0x56>
 800b2c2:	4f20      	ldr	r7, [pc, #128]	; (800b344 <_malloc_r+0xb0>)
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	b923      	cbnz	r3, 800b2d2 <_malloc_r+0x3e>
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	f000 f862 	bl	800b394 <_sbrk_r>
 800b2d0:	6038      	str	r0, [r7, #0]
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	f000 f85d 	bl	800b394 <_sbrk_r>
 800b2da:	1c43      	adds	r3, r0, #1
 800b2dc:	d123      	bne.n	800b326 <_malloc_r+0x92>
 800b2de:	230c      	movs	r3, #12
 800b2e0:	6033      	str	r3, [r6, #0]
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f000 f86c 	bl	800b3c0 <__malloc_unlock>
 800b2e8:	e7e3      	b.n	800b2b2 <_malloc_r+0x1e>
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	1b5b      	subs	r3, r3, r5
 800b2ee:	d417      	bmi.n	800b320 <_malloc_r+0x8c>
 800b2f0:	2b0b      	cmp	r3, #11
 800b2f2:	d903      	bls.n	800b2fc <_malloc_r+0x68>
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	441c      	add	r4, r3
 800b2f8:	6025      	str	r5, [r4, #0]
 800b2fa:	e004      	b.n	800b306 <_malloc_r+0x72>
 800b2fc:	6863      	ldr	r3, [r4, #4]
 800b2fe:	42a2      	cmp	r2, r4
 800b300:	bf0c      	ite	eq
 800b302:	600b      	streq	r3, [r1, #0]
 800b304:	6053      	strne	r3, [r2, #4]
 800b306:	4630      	mov	r0, r6
 800b308:	f000 f85a 	bl	800b3c0 <__malloc_unlock>
 800b30c:	f104 000b 	add.w	r0, r4, #11
 800b310:	1d23      	adds	r3, r4, #4
 800b312:	f020 0007 	bic.w	r0, r0, #7
 800b316:	1ac2      	subs	r2, r0, r3
 800b318:	d0cc      	beq.n	800b2b4 <_malloc_r+0x20>
 800b31a:	1a1b      	subs	r3, r3, r0
 800b31c:	50a3      	str	r3, [r4, r2]
 800b31e:	e7c9      	b.n	800b2b4 <_malloc_r+0x20>
 800b320:	4622      	mov	r2, r4
 800b322:	6864      	ldr	r4, [r4, #4]
 800b324:	e7cc      	b.n	800b2c0 <_malloc_r+0x2c>
 800b326:	1cc4      	adds	r4, r0, #3
 800b328:	f024 0403 	bic.w	r4, r4, #3
 800b32c:	42a0      	cmp	r0, r4
 800b32e:	d0e3      	beq.n	800b2f8 <_malloc_r+0x64>
 800b330:	1a21      	subs	r1, r4, r0
 800b332:	4630      	mov	r0, r6
 800b334:	f000 f82e 	bl	800b394 <_sbrk_r>
 800b338:	3001      	adds	r0, #1
 800b33a:	d1dd      	bne.n	800b2f8 <_malloc_r+0x64>
 800b33c:	e7cf      	b.n	800b2de <_malloc_r+0x4a>
 800b33e:	bf00      	nop
 800b340:	20000124 	.word	0x20000124
 800b344:	20000128 	.word	0x20000128

0800b348 <_realloc_r>:
 800b348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b34a:	4607      	mov	r7, r0
 800b34c:	4614      	mov	r4, r2
 800b34e:	460e      	mov	r6, r1
 800b350:	b921      	cbnz	r1, 800b35c <_realloc_r+0x14>
 800b352:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b356:	4611      	mov	r1, r2
 800b358:	f7ff bf9c 	b.w	800b294 <_malloc_r>
 800b35c:	b922      	cbnz	r2, 800b368 <_realloc_r+0x20>
 800b35e:	f7ff ff49 	bl	800b1f4 <_free_r>
 800b362:	4625      	mov	r5, r4
 800b364:	4628      	mov	r0, r5
 800b366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b368:	f000 f830 	bl	800b3cc <_malloc_usable_size_r>
 800b36c:	42a0      	cmp	r0, r4
 800b36e:	d20f      	bcs.n	800b390 <_realloc_r+0x48>
 800b370:	4621      	mov	r1, r4
 800b372:	4638      	mov	r0, r7
 800b374:	f7ff ff8e 	bl	800b294 <_malloc_r>
 800b378:	4605      	mov	r5, r0
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d0f2      	beq.n	800b364 <_realloc_r+0x1c>
 800b37e:	4631      	mov	r1, r6
 800b380:	4622      	mov	r2, r4
 800b382:	f7ff ff0f 	bl	800b1a4 <memcpy>
 800b386:	4631      	mov	r1, r6
 800b388:	4638      	mov	r0, r7
 800b38a:	f7ff ff33 	bl	800b1f4 <_free_r>
 800b38e:	e7e9      	b.n	800b364 <_realloc_r+0x1c>
 800b390:	4635      	mov	r5, r6
 800b392:	e7e7      	b.n	800b364 <_realloc_r+0x1c>

0800b394 <_sbrk_r>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	4d06      	ldr	r5, [pc, #24]	; (800b3b0 <_sbrk_r+0x1c>)
 800b398:	2300      	movs	r3, #0
 800b39a:	4604      	mov	r4, r0
 800b39c:	4608      	mov	r0, r1
 800b39e:	602b      	str	r3, [r5, #0]
 800b3a0:	f7f6 fe52 	bl	8002048 <_sbrk>
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	d102      	bne.n	800b3ae <_sbrk_r+0x1a>
 800b3a8:	682b      	ldr	r3, [r5, #0]
 800b3aa:	b103      	cbz	r3, 800b3ae <_sbrk_r+0x1a>
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	20000850 	.word	0x20000850

0800b3b4 <__malloc_lock>:
 800b3b4:	4801      	ldr	r0, [pc, #4]	; (800b3bc <__malloc_lock+0x8>)
 800b3b6:	f000 b811 	b.w	800b3dc <__retarget_lock_acquire_recursive>
 800b3ba:	bf00      	nop
 800b3bc:	20000858 	.word	0x20000858

0800b3c0 <__malloc_unlock>:
 800b3c0:	4801      	ldr	r0, [pc, #4]	; (800b3c8 <__malloc_unlock+0x8>)
 800b3c2:	f000 b80c 	b.w	800b3de <__retarget_lock_release_recursive>
 800b3c6:	bf00      	nop
 800b3c8:	20000858 	.word	0x20000858

0800b3cc <_malloc_usable_size_r>:
 800b3cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3d0:	1f18      	subs	r0, r3, #4
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	bfbc      	itt	lt
 800b3d6:	580b      	ldrlt	r3, [r1, r0]
 800b3d8:	18c0      	addlt	r0, r0, r3
 800b3da:	4770      	bx	lr

0800b3dc <__retarget_lock_acquire_recursive>:
 800b3dc:	4770      	bx	lr

0800b3de <__retarget_lock_release_recursive>:
 800b3de:	4770      	bx	lr

0800b3e0 <_init>:
 800b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e2:	bf00      	nop
 800b3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3e6:	bc08      	pop	{r3}
 800b3e8:	469e      	mov	lr, r3
 800b3ea:	4770      	bx	lr

0800b3ec <_fini>:
 800b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ee:	bf00      	nop
 800b3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3f2:	bc08      	pop	{r3}
 800b3f4:	469e      	mov	lr, r3
 800b3f6:	4770      	bx	lr
